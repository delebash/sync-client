{"version":3,"sources":["webpack:///webpack/bootstrap ce05a5aa1304474f1ba3","webpack:///C:/Users/Daniel/AppData/Local/Yarn/config/global/node_modules/timers-browserify/main.js","webpack:///./src/index.js","webpack:///./node_modules/sync-client/dist/sync-client.js","webpack:///C:/Users/Daniel/AppData/Local/Yarn/config/global/node_modules/setimmediate/setImmediate.js","webpack:///(webpack)/buildin/global.js","webpack:///C:/Users/Daniel/AppData/Local/Yarn/config/global/node_modules/process/browser.js"],"names":["db","id","DB_NAME","versions","version","stores","test","opendb","connect","open","add","json","friends","toArray","friend","console","log","e","alert","edit","where","equalsIgnoreCase","result","put","name","shoeSize","age","updated","get","cleartable","clear","deletedb","remove","isonline","window","navigator","onLine","document","querySelector","addEventListener"],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;AC7DA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;ACpDA;;AAEA,IAAIA,EAAJ;AACA,IAAIC,EAAJ;AACA,MAAMC,UAAU,KAAhB;;AAEA,MAAMC,WAAW,CAAC;AACdC,aAAS,CADK;AAEdC,YAAQ,EAAE;AACNC,cAAM;AADF;AAFM,CAAD,CAAjB;;AAOA,eAAeC,MAAf,GAAwB;AACpBP,SAAK,IAAI,mDAAJ,CAAeE,OAAf,EAAwBC,QAAxB,CAAL;AACAH,OAAGQ,OAAH,CAAW,uBAAX;AACAR,OAAGS,IAAH;AACH;;AAED,eAAeC,GAAf,GAAqB;AACjB,QAAI;AACA;AACA;AACA,cAAMV,GAAGM,IAAH,CAAQI,GAAR,CAAY;AACdC,kBAAM,EAAC,QAAO,IAAR,EAAa,QAAO,MAApB,EAA2B,QAAO,MAAlC;AADQ,SAAZ,CAAN;;AAIA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACR;;AAEQ,YAAIC,UAAU,MAAMZ,GAAGM,IAAH,CAAQO,OAAR,EAApB;;AAEA,aAAK,IAAIC,MAAT,IAAmBF,OAAnB,EAA4B;AACxBG,oBAAQC,GAAR,CAAYF,MAAZ;AACH;AAEJ,KAzBD,CA0BA,OAAOG,CAAP,EAAU;AACNC,cAAMD,CAAN;AACH;AACJ;;AAED,eAAeE,IAAf,GAAsB;AAClB,QAAI;;AAEA,YAAIP,UAAU,MAAMZ,GAAGM,IAAH,CACfc,KADe,CACT,IADS,EACHC,gBADG,CACc,GADd,EACmBR,OADnB,EAApB;AAEA,aAAK,IAAIC,MAAT,IAAmBF,OAAnB,EAA4B;AACxB,gBAAIU,SAAS,MAAMtB,GAAGM,IAAH,CAAQiB,GAAR,CAAY,EAACtB,IAAGa,OAAOb,EAAX,EAAcuB,MAAM,KAApB,EAA2BC,UAAU,EAArC,EAAyCC,KAAI,EAA7C,EAAZ,CAAnB;AACAX,oBAAQC,GAAR,CAAY,YAAYM,MAAxB;AACA,gBAAIK,UAAU,MAAM3B,GAAGM,IAAH,CAAQsB,GAAR,CAAYN,MAAZ,CAApB;AACAP,oBAAQC,GAAR,CAAYW,OAAZ;AACH;AACJ,KAVD,CAWA,OAAOV,CAAP,EAAU;AACNC,cAAMD,CAAN;AACH;AACJ;;AAED,eAAeW,GAAf,GAAqB;AACjB,QAAI;AACA,YAAIhB,UAAU,MAAMZ,GAAGM,IAAH,CAAQO,OAAR,EAApB;;AAEA,aAAK,IAAIC,MAAT,IAAmBF,OAAnB,EAA4B;AACxBG,oBAAQC,GAAR,CAAYF,MAAZ;AACH;AACJ,KAND,CAOA,OAAOG,CAAP,EAAU;AACNC,cAAMD,CAAN;AACH;AACJ;AACD,eAAeY,UAAf,GAA4B;AACxB,QAAIP,SAAS,MAAMtB,GAAGM,IAAH,CAAQwB,KAAR,EAAnB;AACAf,YAAQC,GAAR,CAAYM,MAAZ;AACH;AACD,eAAeS,QAAf,GAA0B;AACtB/B,OAAGgC,MAAH,CAAU,uBAAV;AACA;AACD;AACF;;AAED,SAASC,QAAT,GAAmB;AACflB,YAAQC,GAAR,CAAYkB,OAAOC,SAAP,CAAiBC,MAA7B;AACH;;AAEDC,SAASC,aAAT,CAAuB,SAAvB,EAAkCC,gBAAlC,CAAmD,OAAnD,EAA4D,YAAY;AACpEhC;AACH,CAFD;AAGA8B,SAASC,aAAT,CAAuB,MAAvB,EAA+BC,gBAA/B,CAAgD,OAAhD,EAAyD,YAAY;AACjE7B;AACH,CAFD;AAGA2B,SAASC,aAAT,CAAuB,OAAvB,EAAgCC,gBAAhC,CAAiD,OAAjD,EAA0D,YAAY;AAClEpB;AACH,CAFD;AAGAkB,SAASC,aAAT,CAAuB,MAAvB,EAA+BC,gBAA/B,CAAgD,OAAhD,EAAyD,YAAY;AACjEX;AACH,CAFD;AAGAS,SAASC,aAAT,CAAuB,aAAvB,EAAsCC,gBAAtC,CAAuD,OAAvD,EAAgE,YAAY;AACxEV;AACH,CAFD;AAGAQ,SAASC,aAAT,CAAuB,WAAvB,EAAoCC,gBAApC,CAAqD,OAArD,EAA8D,YAAY;AACtER;AACH,CAFD;AAGAM,SAASC,aAAT,CAAuB,WAAvB,EAAoCC,gBAApC,CAAqD,OAArD,EAA8D,YAAY;AACtEN;AACH,CAFD,E;;;;;;AChHA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,cAAc;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,0BAA0B,EAAE;AAC/D,yCAAyC,eAAe;AACxD;AACA;AACA;AACA;AACA;AACA,8DAA8D,+DAA+D;AAC7H;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA,6BAA6B;AAC7B,qCAAqC;;AAErC,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,uCAAuC;;AAEvC,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA,iCAAiC,QAAQ,gBAAgB,UAAU,GAAG;AACtE,CAAC;;AAED,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE;AACnE;AACA,qFAAqF;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,cAAc;AACd,cAAc;AACd,cAAc;AACd,eAAe;AACf,eAAe;AACf,eAAe;AACf,gBAAgB;AAChB;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,UAAU;AACb;AACA;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA,uBAAuB;AACvB;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA,iBAAiB;;AAEjB;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA,cAAc;;AAEd,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kEAAkE,+BAA+B;AACjG;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA,YAAY,QAAQ,GAAG;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS,2EAA2E;AACpF,SAAS,8DAA8D;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,IAAI;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA,2CAA2C,OAAO;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,OAAO;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,mDAAmD,0BAA0B,EAAE,EAAE,EAAE,yBAAyB,mBAAmB,EAAE,oBAAoB,mBAAmB,EAAE;AAC7O;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,OAAO;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA,KAAK;AACL;AACA;AACA,sCAAsC;AACtC;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gBAAgB,aAAa;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,aAAa;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,qBAAqB,EAAE;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,2BAA2B,wCAAwC;AACnE,CAAC;AACD;AACA;AACA,2BAA2B,qBAAqB,EAAE;AAClD,oCAAoC,2BAA2B,EAAE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,sDAAsD,0CAA0C,EAAE,IAAI;AACtG;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,IAAI;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,IAAI;AACL;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA,aAAa,EAAE;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,IAAI;AACL;AACA;AACA;;AAEA,gBAAgB;AAChB,sBAAsB,YAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,OAAO,oEAAoE;AAC1H;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,0CAA0C;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,uBAAuB,mBAAmB;AAC/D;AACA,iBAAiB;AACjB;AACA;AACA;AACA,6BAA6B,6BAA6B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,SAAS;AACT;AACA;AACA;AACA,wBAAwB;AACxB;AACA,0BAA0B;AAC1B;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA,uBAAuB;AACvB,uBAAuB;AACvB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,kCAAkC;AAClC;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,MAAM;AACpE;AACA,SAAS;AACT;AACA;AACA;AACA,0EAA0E,MAAM;AAChF;AACA,aAAa;AACb,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,qDAAqD,4CAA4C,EAAE;AACnG;AACA,aAAa;AACb;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA,aAAa,UAAU,EAAE;AACzB,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,yCAAyC,qDAAqD,EAAE;AAChG,SAAS;AACT,KAAK;AACL;AACA,0BAA0B,YAAY,EAAE;AACxC,+BAA+B,oBAAoB;AACnD,KAAK;AACL,oBAAoB,qBAAqB;AACzC,aAAa,cAAc;AAC3B;AACA;AACA;AACA,0BAA0B,eAAe,EAAE;AAC3C,+BAA+B,gBAAgB;AAC/C,KAAK;AACL;AACA,0BAA0B,wBAAwB,EAAE;AACpD,+BAA+B,yBAAyB,EAAE;AAC1D,KAAK;AACL;AACA;AACA;AACA;AACA,oCAAoC;AACpC,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA,aAAa;AACb,SAAS;AACT;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,uCAAuC;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,SAAS;AACpD;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,4CAA4C,oCAAoC,EAAE;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,+BAA+B;AAC3C,oBAAoB;AACpB,mBAAmB;AACnB,mBAAmB;AACnB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,oBAAoB;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA,gCAAgC,sBAAsB,EAAE;AACxD;AACA,CAAC;AACD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,OAAO;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,gFAAgF,kBAAkB,EAAE;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,8BAA8B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,QAAQ,GAAG;AACvB;AACA;AACA;AACA;AACA;AACA,sBAAsB,QAAQ;AAC9B;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA,CAAC,EAAE;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,kDAAkD;AAChG,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4FAA4F,cAAc,EAAE;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,yCAAyC,EAAE;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,sBAAsB;AACtB;AACA;AACA,sBAAsB,EAAE;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,6BAA6B;AAChD,wCAAwC,UAAU;AAClD;AACA,yBAAyB,+BAA+B,iBAAiB,gBAAgB;AACzF;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,mDAAmD;AACnD;AACA;AACA;AACA;AACA,oEAAoE;AACpE;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gHAAgH;AAChH,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gHAAgH,WAAW,EAAE;AAC7H,qBAAqB;AACrB;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,4CAA4C,mCAAmC,EAAE;AACjF;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,mEAAmE,4CAA4C,EAAE;AACjH;AACA;AACA;AACA;AACA,sDAAsD,oCAAoC,EAAE;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,wDAAwD,IAAI,8BAA8B;AAC1K,wCAAwC,sBAAsB,EAAE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,uBAAuB,yCAAyC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,4CAA4C;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA,oDAAoD,8CAA8C,EAAE;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,qCAAqC,aAAa;AAClD;AACA;AACA,0BAA0B;AAC1B,sBAAsB;AACtB;AACA,2DAA2D,eAAe,EAAE;AAC5E,aAAa,EAAE,kBAAkB;AACjC;AACA;AACA,aAAa,EAAE;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,kDAAkD,EAAE;AACxG,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,kBAAkB,EAAE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD,mDAAmD;AACnD;AACA;AACA,sEAAsE;AACtE;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,uFAAuF;AACvF;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA,qBAAqB;AACrB;AACA,+CAA+C,eAAe;AAC9D;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,uBAAuB;AACvB,kCAAkC;AAClC,uBAAuB;AACvB;AACA,8BAA8B;AAC9B;AACA,SAAS;AACT;AACA,6BAA6B;AAC7B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,wBAAwB,EAAE;AACtF;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,oEAAoE,gCAAgC;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,WAAW,EAAE;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,6CAA6C,EAAE;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,oEAAoE;AACpE;AACA,kIAAkI,EAAE;AACpI,wDAAwD,oBAAoB,EAAE;AAC9E;AACA;AACA;AACA;AACA;AACA,+DAA+D,UAAU,EAAE;AAC3E,iBAAiB;AACjB,qCAAqC;AACrC;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,SAAS;AACxC;AACA;AACA;AACA,0DAA0D,kBAAkB,EAAE;AAC9E;AACA;AACA;AACA;AACA;AACA,mCAAmC,SAAS;AAC5C,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,8CAA8C,EAAE,GAAG,gDAAgD;AAC7I;AACA,SAAS;AACT;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gDAAgD,gB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,yCAAyC,EAAE;AAClG,yDAAyD,uCAAuC,EAAE;AAClG,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,qEAAqE,wBAAwB,EAAE;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA,gDAAgD;AAChD,kDAAkD,EAAE;AACpD;AACA,cAAc,EAAE;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,0IAA0I,IAAI;AAC9I;AACA;AACA;AACA,0DAA0D,iDAAiD;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,qDAAqD,kBAAkB;AACjI;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,EAAE,EAAE;AAC3C;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,OAAO;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iGAAiG,0CAA0C,EAAE;AAC7I,wCAAwC;AACxC,wGAAwG,yCAAyC,EAAE;AACnJ;AACA;AACA;AACA;AACA;AACA,sFAAsF,oBAAoB,EAAE;AAC5G;AACA,8DAA8D;AAC9D,yBAAyB;AACzB,mDAAmD;AACnD,yBAAyB;AACzB;AACA;AACA;AACA,kEAAkE,QAAQ;AAC1E;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,2FAA2F;AAC3F;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa,YAAY;AACzB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,OAAO;AAClE,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,OAAO;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA,wFAAwF;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,yBAAyB,yDAAyD,EAAE;AACzG,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,SAAS;AACT;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,kGAAkG,IAAI;AACtG,+FAA+F,IAAI;AACnG;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,2CAA2C,wBAAwB,EAAE;AACrE;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,gBAAgB,EAAE;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,6CAA6C,+DAA+D,EAAE,kBAAkB,8DAA8D,EAAE;AAChM;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,+DAA+D,kBAAkB,EAAE;AACnF,SAAS;AACT;AACA,uCAAuC;AACvC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,6BAA6B,EAAE;AAC3F;AACA;AACA,kDAAkD,wBAAwB,EAAE,iBAAiB,wBAAwB;AACrH;AACA;AACA,kDAAkD,wBAAwB,EAAE,iBAAiB,wBAAwB;AACrH;AACA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,8BAA8B,EAAE;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,iBAAiB;AACjB;AACA,iBAAiB;AACjB,+DAA+D,iBAAiB,EAAE;AAClF,+DAA+D,iBAAiB,EAAE;AAClF;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,gBAAgB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,uDAAuD,EAAE;AACtG;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD,qDAAqD;AACrD;AACA;AACA;AACA,qDAAqD;AACrD,6DAA6D,sEAAsE,EAAE;AACrI;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,yDAAyD,gCAAgC,EAAE;AAC3F,aAAa;AACb;AACA,yDAAyD,4CAA4C,EAAE;AACvG,aAAa;AACb;AACA,yDAAyD,sCAAsC,EAAE;AACjG,aAAa;AACb;AACA,yDAAyD,4CAA4C,EAAE;AACvG,aAAa;AACb;AACA,yDAAyD,sCAAsC,EAAE;AACjG,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,qEAAqE,8BAA8B,EAAE;AACrG,aAAa;AACb;AACA;AACA,qEAAqE,mBAAmB,EAAE;AAC1F,aAAa;AACb;AACA;AACA;AACA;AACA,qEAAqE,4BAA4B,EAAE;AACnG,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,uDAAuD,EAAE;AACnH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,yBAAyB,EAAE;AACxE;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA,4EAA4E,6CAA6C;AACzH,aAAa;AACb;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,4EAA4E,EAAE;AAC3I;AACA,gDAAgD,6CAA6C;AAC7F,aAAa;AACb;AACA;AACA;AACA,mFAAmF,YAAY;AAC/F;AACA,sBAAsB,+BAA+B;AACrD,uBAAuB,gDAAgD;AACvE;AACA;AACA;AACA;AACA,oDAAoD,+FAA+F,EAAE;AACrJ;AACA;AACA,gFAAgF;AAChF,8EAA8E;AAC9E;AACA,sDAAsD,OAAO;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,kCAAkC;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,sCAAsC,EAAE;AAC5E,oCAAoC,uCAAuC;AAC3E;AACA,oCAAoC,uCAAuC,EAAE;AAC7E,oCAAoC,wCAAwC;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA,6CAA6C,8BAA8B,EAAE;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,gCAAgC;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,mCAAmC,EAAE;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA,mEAAmE;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iEAAiE;AACjE,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,mCAAmC;AACjE;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,+CAA+C,SAAS,cAAc,EAAE,eAAe,gBAAgB,EAAE;AACzG,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,mDAAmD,cAAc,EAAE;AACnE;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,4CAA4C,2BAA2B;AACvE,qBAAqB;AACrB;AACA;AACA,aAAa;AACb;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA,6CAA6C;AAC7C,6CAA6C;AAC7C;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA,2DAA2D,aAAa,EAAE;AAC1E,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA,iFAAiF,kBAAkB;AACnG;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,yDAAyD,wBAAwB,EAAE;AACnF,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,yDAAyD,+BAA+B,EAAE;AAC1F,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA,wDAAwD,aAAa,EAAE;AACvE,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA,8DAA8D;AAC9D;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,uEAAuE,2CAA2C;AAClH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oGAAoG,YAAY,mBAAmB;AACnI,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,eAAe;AAC/D;AACA;AACA;AACA;AACA,2CAA2C,aAAa;AACxD;AACA;AACA,qEAAqE,YAAY,mBAAmB;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,eAAe;AAC/D;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,uBAAuB;AACvF,6BAA6B,kBAAkB,oBAAoB,EAAE;AACrE;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA,+DAA+D,8BAA8B,EAAE;AAC/F;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA,iBAAiB;AACjB;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,mBAAmB,8BAA8B,EAAE,EAAE;AACtG;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,yDAAyD,iCAAiC,EAAE;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,mBAAmB;AAC5D,4DAA4D,cAAc,EAAE;AAC5E,6EAA6E,cAAc,EAAE;AAC7F;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,yCAAyC,mBAAmB;AAC5D,yEAAyE,cAAc,EAAE;AACzF;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,yEAAyE,EAAE;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,2BAA2B,6BAA6B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,qFAAqF;AACrF,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA,2BAA2B,6BAA6B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,sDAAsD,EAAE;AAC1F,+BAA+B,uCAAuC,EAAE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA,oCAAoC,GAAG;AACvC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,8BAA8B,EAAE,8BAA8B,8BAA8B,EAAE;AACpI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,4BAA4B,EAAE;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,qCAAqC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,gDAAgD,cAAc,EAAE;AACzE,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,oFAAoF,aAAa,mBAAmB,mBAAmB;AACvI;AACA;AACA,sDAAsD,qDAAqD,kBAAkB;AAC7H;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,0BAA0B,0BAA0B;AACpD,KAAK;AACL;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,cAAc,EAAE;AAC1C;AACA,6DAA6D,aAAa,EAAE;AAC5E;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,2BAA2B,oBAAoB,EAAE;AACjD,oCAAoC,sCAAsC,EAAE;AAC5E;AACA;AACA;AACA;AACA;AACA,mCAAmC,MAAM;AACzC;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,6BAA6B,kBAAkB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,+BAA+B,aAAa,aAAa,EAAE;AACrG;AACA;AACA,oBAAoB;AACpB,CAAC;;AAED;AACA;;AAEA,4BAA4B;;AAE5B,OAAO;AACP;AACA;;AAEA,kBAAkB;;AAElB,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;;AAGA,OAAO;AACP;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA,mDAAmD;AACnD;AACA,uCAAuC;AACvC;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,sBAAsB;AAChF,gFAAgF,sBAAsB;AACtG;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,QAAQ,GAAG;AACvB;AACA;AACA;AACA;AACA;AACA;;;;AAIA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,iDAAiD;AACjD;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,wGAAwG;AACxG;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA,eAAe,OAAO;AACtB,gBAAgB,2DAA2D,aAAa,gBAAgB;AACxG;AACA;AACA;AACA;AACA;AACA,iEAAiE,0DAA0D;AAC3H;AACA;AACA;AACA;AACA,oCAAoC;AACpC,mBAAmB;AACnB,oFAAoF;AACpF;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,yEAAyE;AACzE,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,4EAA4E,EAAE;AAC3H,0CAA0C,0DAA0D,EAAE;AACtG,aAAa;AACb,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,sCAAsC;AAClF,qDAAqD,4BAA4B,EAAE;AACnF,wFAAwF,eAAe,EAAE;AACzG,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,iBAAiB,eAAe,oBAAoB;AAC3G;AACA;AACA,uDAAuD,0BAA0B,eAAe,qCAAqC;AACrI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF,EAAE;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA,4CAA4C,4CAA4C,EAAE;AAC1F;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,QAAQ,GAAG;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,8BAA8B;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,0BAA0B,wBAAwB;AAClD,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+HAA+H;AAC/H;AACA,oDAAoD;AACpD;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,gGAAgG;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT,KAAK,QAAQ;AACb;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD,gDAAgD;AAChD;AACA,aAAa,oBAAoB,2BAA2B,EAAE;AAC9D,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,sBAAsB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA,aAAa;AACb,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iGAAiG,6BAA6B,EAAE;AAChI;AACA;AACA;AACA,0GAA0G,8BAA8B,EAAE;AAC1I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,cAAc;AACzE;AACA;AACA;AACA;AACA,yCAAyC,2BAA2B;AACpE;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA,2CAA2C;AAC3C,0CAA0C;AAC1C;AACA;AACA,uHAAuH;AACvH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,uCAAuC;AACrF,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,kKAAkK;AAClK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA,OAAO;AACP;AACA;;AAEA,kBAAkB;;AAElB,OAAO;AACP;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,iHAAiH,mBAAmB,EAAE,mBAAmB,4JAA4J;;AAErT,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA,CAAC;AACD;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,yBAAyB,kBAAkB,EAAE;;AAE7C;AACA;AACA;AACA;AACA,GAAG,UAAU;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA,qEAAqE,gBAAgB,UAAU,GAAG;AAClG,CAAC;;AAED,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,aAAa;;AAEzC;AACA;AACA;AACA;AACA;AACA,wCAAwC,oCAAoC;AAC5E,4CAA4C,oCAAoC;AAChF,KAAK,2BAA2B,oCAAoC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAmB;AACnC;AACA;AACA,iCAAiC,2BAA2B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG,UAAU;AACb;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA,mDAAmD,OAAO,EAAE;AAC5D;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;;AAEA,OAAO;AACP;AACA;;;;AAIA,OAAO;AACP;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,6BAA6B;AAC7B,cAAc;AACd;AACA,CAAC;AACD;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA,UAAU;AACV,CAAC;;AAED,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,wGAAwG,OAAO;AAC/G;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;;AAEA;AACA;AACA,4CAA4C;;AAE5C;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,8BAA8B,iBAAiB;AAC/C;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;AACL;;AAEA,UAAU;AACV;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB;;AAEnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,8BAA8B;AACrD,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,SAAS;AACT;AACA;AACA,qBAAqB,8BAA8B;AACnD;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;;AAEA,gQAAgQ,iCAAiC;;AAEjS;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;;AAEP,8DAA8D,mDAAmD;;AAEjH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,4GAA4G;;AAE5G;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,iBAAiB;AACjB,eAAe;AACf;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA,kCAAkC,YAAY;AAC9C;;AAEA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA,gLAAgL;AAChL,GAAG,IAAI;;AAEP;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,QAAQ,GAAG;AACvB;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kBAAkB,kBAAkB;AACzD,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,WAAW;AACzD;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,qBAAqB;AACrB;AACA,8EAA8E;AAC9E;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA,4BAA4B;AAC5B,aAAa;AACb,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,yCAAyC,cAAc,EAAE;AACzD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,4DAA4D,uCAAuC,EAAE;AACrG;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,cAAc,EAAE;AAC3E,iDAAiD,cAAc,EAAE;AACjE;AACA;AACA;AACA,sEAAsE,cAAc,EAAE;AACtF;AACA,6CAA6C,iCAAiC,EAAE;AAChF;AACA;;AAEA;AACA;AACA;AACA;AACA,wEAAwE;AACxE;AACA,oCAAoC,EAAE;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,+CAA+C,sDAAsD;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,OAAO;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,QAAQ;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oGAAoG;AACpG;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA,oGAAoG;AACpG;AACA;AACA;AACA,mEAAmE,gDAAgD,EAAE;AACrH;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,6CAA6C,EAAE;AAC/G;AACA,SAAS;AACT,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA,0EAA0E;AAC1E;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA,0EAA0E;AAC1E;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA,sCAAsC;AACtC;AACA,sCAAsC;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA,yFAAyF;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA,yCAAyC,2BAA2B;AACpE,SAAS;AACT;AACA;;AAEA;AACA;AACA,wCAAwC,gFAAgF;AACxH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA,gDAAgD,uBAAuB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6GAA6G;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA,wHAAwH,GAAG;AAC3H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,iCAAiC;AAC1G,iBAAiB;AACjB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,6BAA6B;AAC7B;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,6BAA6B;AAC7B;AACA;AACA,oDAAoD;AACpD;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,QAAQ,GAAG;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kGAAkG;AAClG,4CAA4C,iBAAiB;AAC7D,6CAA6C,yCAAyC,EAAE;AACxF,8DAA8D;AAC9D;AACA;AACA,qBAAqB;AACrB,iBAAiB,GAAG,EAAE;AACtB,aAAa,EAAE,EAAE,4CAA4C,EAAE;AAC/D;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,yCAAyC,EAAE;AACjF;AACA;AACA,8DAA8D;AAC9D,wCAAwC,EAAE,EAAE,EAAE;AAC9C;AACA,aAAa,4CAA4C,EAAE;AAC3D;AACA,KAAK,QAAQ;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,8CAA8C,iBAAiB,EAAE;AACjE,aAAa;AACb,SAAS;AACT;AACA,wFAAwF,wBAAwB;AAChH;AACA;AACA;AACA;AACA,2EAA2E,yBAAyB,EAAE;AACtG;AACA,qBAAqB;AACrB;AACA;AACA;AACA,wEAAwE,WAAW,kBAAkB,kBAAkB;AACvH,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,mCAAmC,gBAAgB,EAAE,EAAE,EAAE;AACxG;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA,OAAO;AACP;AACA;;AAEA,kBAAkB;;AAElB,OAAO;AACP;AACA;;AAEA,kBAAkB;;AAElB,OAAO;AACP;AACA;;AAEA,kBAAkB;;AAElB,OAAO;AACP;AACA;;AAEA,kBAAkB;;AAElB,OAAO;AACP;AACA;;AAEA,kBAAkB;;AAElB,OAAO;AACP;AACA;;AAEA,kBAAkB;;AAElB,OAAO;AACP;AACA;;AAEA,kBAAkB;;AAElB,OAAO;AACP;AACA;;AAEA,kBAAkB;;AAElB,OAAO;AACP;AACA;;AAEA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED,OAAO;AACP;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;;AAEA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;;AAEA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA,uCAAuC,0BAA0B;AACjE,wCAAwC;AACxC;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA,4BAA4B;;AAE5B,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,WAAW,eAAe;AAC/B;AACA,KAAK;AACL;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,iBAAiB,EAAE;AACxD;AACA;AACA;AACA;AACA;AACA,gEAAgE,gBAAgB;AAChF;AACA;AACA,GAAG,2CAA2C,gCAAgC;AAC9E;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,yFAAyF,aAAa,EAAE;;AAExG;AACA,qDAAqD,0BAA0B;AAC/E;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;AACA,+BAA+B,qBAAqB;AACpD,+BAA+B,SAAS,EAAE;AAC1C,CAAC,UAAU;;AAEX;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,SAAS,mBAAmB;AACvD,+BAA+B,aAAa;AAC5C;AACA,GAAG,UAAU;AACb;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA,UAAU;AACV;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD,CAAC;AACD;AACA,qBAAqB;AACrB;AACA,SAAS;AACT,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,uCAAuC,oBAAoB,EAAE;AAC7D;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,UAAU,EAAE;AAC9C,mBAAmB,sCAAsC;AACzD,CAAC,oCAAoC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;;AAED,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;;AAElB;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA,OAAO,UAAU,cAAc;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,GAAG;AACR;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,aAAa;AACjC,GAAG;AACH;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,cAAc;AACd,iBAAiB;AACjB;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;;AAEA;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA,0CAA0C,iCAAiC;;AAE3E,OAAO;AACP;AACA;;AAEA;AACA;AACA,8BAA8B,gCAAgC;;AAE9D,OAAO;AACP;AACA;;AAEA;AACA;AACA,oEAAoE,yCAAyC;;AAE7G,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED,OAAO;AACP;AACA;;AAEA;AACA;AACA,8BAA8B,6CAA6C;;AAE3E,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;;AAEA;AACA;AACA;AACA;AACA,+CAA+C,sDAAsD,oBAAoB;AACzH;AACA;AACA,GAAG,UAAU;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,mBAAmB,gCAAgC;AACnD,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,eAAe,qCAAqC;AACpD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA,uBAAuB,wBAAwB;AAC/C;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH,kBAAkB,uBAAuB,KAAK;AAC9C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,iBAAiB;AACjB,wBAAwB;AACxB,gBAAgB;AAChB,oBAAoB;AACpB,wBAAwB;AACxB,gBAAgB;AAChB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D,kBAAkB;AAC5E;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA,CAAC;;AAED,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB;AACtB,oBAAoB,uBAAuB,SAAS,IAAI;AACxD,GAAG;AACH,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;AACD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA,KAAK;AACL;AACA,sBAAsB,iCAAiC;AACvD,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,8BAA8B;AAC5F;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,0DAA0D,gBAAgB;;AAE1E;AACA;AACA;AACA,oBAAoB,oBAAoB;;AAExC,0CAA0C,oBAAoB;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH,wBAAwB,eAAe,EAAE;AACzC,wBAAwB,gBAAgB;AACxC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,KAAK,QAAQ,iCAAiC;AAClG,CAAC;AACD;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,2BAA2B;AAC3B;AACA;AACA;AACA,4BAA4B,UAAU;;;AAGtC,OAAO;AACP;AACA;;AAEA,uDAAuD;AACvD;;AAEA;AACA;AACA;;AAEA,uBAAuB;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,0CAA0C,sBAAsB,EAAE;AAClE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;;AAEA,KAAK;AACL;AACA;;AAEA,KAAK;AACL;AACA;;AAEA,KAAK;AACL;AACA;;AAEA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,CAAC;;AAED,4BAA4B;;AAE5B,OAAO;AACP;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;;AAGA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAO;;AAEP,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wCAAwC,mBAAmB;AAC3D;AACA;;AAEA;AACA;AACA,kCAAkC,oBAAoB;AACtD;AACA;;AAEA;AACA;AACA,wCAAwC,4BAA4B;AACpE;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA,uDAAuD;AACvD,SAAS;AACT;AACA,SAAS;AACT,8EAA8E;AAC9E;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,8BAA8B,uBAAuB;AACrD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA,uCAAuC,0BAA0B;AACjE;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,+BAA+B,0BAA0B,eAAe;AACxE;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,OAAO;;AAEP;AACA,KAAK;AACL;AACA;AACA,CAAC;;;AAGD,OAAO;AACP;AACA;;AAEA;AACA,0DAA0D,cAAc;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AAUA;AACA;AACA;;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED,OAAO;AACP;AACA,uC;;;;;;;ACr0UA;AACA;;AAEA;AACA;AACA;;AAEA,uBAAuB;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,0CAA0C,sBAAsB,EAAE;AAClE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;;AAEA,KAAK;AACL;AACA;;AAEA,KAAK;AACL;AACA;;AAEA,KAAK;AACL;AACA;;AAEA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,CAAC;;;;;;;;ACzLD;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;;AAEA;AACA;AACA,4CAA4C;;AAE5C;;;;;;;ACpBA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qCAAqC;;AAErC;AACA;AACA;;AAEA,2BAA2B;AAC3B;AACA;AACA;AACA,4BAA4B,UAAU","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap ce05a5aa1304474f1ba3","var apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\nexports.setImmediate = setImmediate;\nexports.clearImmediate = clearImmediate;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Daniel/AppData/Local/Yarn/config/global/node_modules/timers-browserify/main.js\n// module id = 0\n// module chunks = 0","import SyncClient from 'sync-client';\r\n\r\nlet db;\r\nlet id;\r\nconst DB_NAME = 'aaa';\r\n\r\nconst versions = [{\r\n    version: 1,\r\n    stores: { // Has the same format as https://github.com/dfahlander/Dexie.js/wiki/Version.stores()\r\n        test: '$$id,json'\r\n    },\r\n}];\r\n\r\nasync function opendb() {\r\n    db = new SyncClient(DB_NAME, versions);\r\n    db.connect(\"http://localhost:3001\");\r\n    db.open();\r\n}\r\n\r\nasync function add() {\r\n    try {\r\n        //  id = db.getID();\r\n        // or make a new one\r\n        await db.test.add({\r\n            json: {\"this\":\"is\",\"some\":\"test\",\"json\":\"info\"}\r\n        });\r\n\r\n        //The each function is usually from jquery but in this case it is just built into dexie, it is not native\r\n        //foreach is but you have to make this .toArray()\r\n\r\n        // let friends = await db.test\r\n        //     .where('age')\r\n        //     .below(75);\r\n\r\n        // friends.each (function (friend) {\r\n        //     console.log (friend.name);\r\n        // })\r\n// or toArray\r\n\r\n        let friends = await db.test.toArray()\r\n\r\n        for (let friend of friends) {\r\n            console.log(friend);\r\n        }\r\n\r\n    }\r\n    catch (e) {\r\n        alert(e)\r\n    }\r\n}\r\n\r\nasync function edit() {\r\n    try {\r\n\r\n        let friends = await db.test\r\n            .where(\"id\").equalsIgnoreCase(\"1\").toArray()\r\n        for (let friend of friends) {\r\n            let result = await db.test.put({id:friend.id,name: \"dan\", shoeSize: 22, age:43})\r\n            console.log('New id ' + result);\r\n            let updated = await db.test.get(result);\r\n            console.log(updated)\r\n        }\r\n    }\r\n    catch (e) {\r\n        alert(e)\r\n    }\r\n}\r\n\r\nasync function get() {\r\n    try {\r\n        let friends = await db.test.toArray()\r\n\r\n        for (let friend of friends) {\r\n            console.log(friend);\r\n        }\r\n    }\r\n    catch (e) {\r\n        alert(e)\r\n    }\r\n}\r\nasync function cleartable() {\r\n    let result = await db.test.clear()\r\n    console.log(result)\r\n}\r\nasync function deletedb() {\r\n    db.remove(\"http://localhost:3001\");\r\n    //let result = await db.delete()\r\n   // console.log(result)\r\n}\r\n\r\nfunction isonline(){\r\n    console.log(window.navigator.onLine)\r\n}\r\n\r\ndocument.querySelector('#opendb').addEventListener(\"click\", function () {\r\n    opendb();\r\n});\r\ndocument.querySelector('#add').addEventListener(\"click\", function () {\r\n    add()\r\n});\r\ndocument.querySelector('#edit').addEventListener(\"click\", function () {\r\n    edit()\r\n});\r\ndocument.querySelector('#get').addEventListener(\"click\", function () {\r\n    get()\r\n});\r\ndocument.querySelector('#cleartable').addEventListener(\"click\", function () {\r\n    cleartable();\r\n});\r\ndocument.querySelector('#deletedb').addEventListener(\"click\", function () {\r\n    deletedb();\r\n});\r\ndocument.querySelector('#isonline').addEventListener(\"click\", function () {\r\n    isonline();\r\n});\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 126);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\nvar core = module.exports = {version: '2.4.0'};\nif(typeof __e == 'number')__e = core; // eslint-disable-line no-undef\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar store      = __webpack_require__(31)('wks')\n  , uid        = __webpack_require__(21)\n  , Symbol     = __webpack_require__(2).Symbol\n  , USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function(name){\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\nif(typeof __g == 'number')__g = global; // eslint-disable-line no-undef\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar isObject = __webpack_require__(11);\nmodule.exports = function(it){\n  if(!isObject(it))throw TypeError(it + ' is not an object!');\n  return it;\n};\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// Thank's IE8 for his funny defineProperty\nmodule.exports = !__webpack_require__(10)(function(){\n  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;\n});\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global    = __webpack_require__(2)\n  , core      = __webpack_require__(0)\n  , ctx       = __webpack_require__(14)\n  , hide      = __webpack_require__(8)\n  , PROTOTYPE = 'prototype';\n\nvar $export = function(type, name, source){\n  var IS_FORCED = type & $export.F\n    , IS_GLOBAL = type & $export.G\n    , IS_STATIC = type & $export.S\n    , IS_PROTO  = type & $export.P\n    , IS_BIND   = type & $export.B\n    , IS_WRAP   = type & $export.W\n    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})\n    , expProto  = exports[PROTOTYPE]\n    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]\n    , key, own, out;\n  if(IS_GLOBAL)source = name;\n  for(key in source){\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    if(own && key in exports)continue;\n    // export native or passed\n    out = own ? target[key] : source[key];\n    // prevent global pollution for namespaces\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n    // bind timers to global for call from export context\n    : IS_BIND && own ? ctx(out, global)\n    // wrap global constructors for prevent change them in library\n    : IS_WRAP && target[key] == out ? (function(C){\n      var F = function(a, b, c){\n        if(this instanceof C){\n          switch(arguments.length){\n            case 0: return new C;\n            case 1: return new C(a);\n            case 2: return new C(a, b);\n          } return new C(a, b, c);\n        } return C.apply(this, arguments);\n      };\n      F[PROTOTYPE] = C[PROTOTYPE];\n      return F;\n    // make static versions for prototype methods\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%\n    if(IS_PROTO){\n      (exports.virtual || (exports.virtual = {}))[key] = out;\n      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%\n      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);\n    }\n  }\n};\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library` \nmodule.exports = $export;\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar anObject       = __webpack_require__(3)\n  , IE8_DOM_DEFINE = __webpack_require__(41)\n  , toPrimitive    = __webpack_require__(33)\n  , dP             = Object.defineProperty;\n\nexports.f = __webpack_require__(4) ? Object.defineProperty : function defineProperty(O, P, Attributes){\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if(IE8_DOM_DEFINE)try {\n    return dP(O, P, Attributes);\n  } catch(e){ /* empty */ }\n  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');\n  if('value' in Attributes)O[P] = Attributes.value;\n  return O;\n};\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports) {\n\nvar hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function(it, key){\n  return hasOwnProperty.call(it, key);\n};\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar dP         = __webpack_require__(6)\n  , createDesc = __webpack_require__(18);\nmodule.exports = __webpack_require__(4) ? function(object, key, value){\n  return dP.f(object, key, createDesc(1, value));\n} : function(object, key, value){\n  object[key] = value;\n  return object;\n};\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = __webpack_require__(42)\n  , defined = __webpack_require__(25);\nmodule.exports = function(it){\n  return IObject(defined(it));\n};\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports) {\n\nmodule.exports = function(exec){\n  try {\n    return !!exec();\n  } catch(e){\n    return true;\n  }\n};\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports) {\n\nmodule.exports = function(it){\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys       = __webpack_require__(47)\n  , enumBugKeys = __webpack_require__(27);\n\nmodule.exports = Object.keys || function keys(O){\n  return $keys(O, enumBugKeys);\n};\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports) {\n\nvar toString = {}.toString;\n\nmodule.exports = function(it){\n  return toString.call(it).slice(8, -1);\n};\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// optional / simple context binding\nvar aFunction = __webpack_require__(24);\nmodule.exports = function(fn, that, length){\n  aFunction(fn);\n  if(that === undefined)return fn;\n  switch(length){\n    case 1: return function(a){\n      return fn.call(that, a);\n    };\n    case 2: return function(a, b){\n      return fn.call(that, a, b);\n    };\n    case 3: return function(a, b, c){\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function(/* ...args */){\n    return fn.apply(that, arguments);\n  };\n};\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports) {\n\nmodule.exports = {};\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports) {\n\nmodule.exports = true;\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports) {\n\nexports.f = {}.propertyIsEnumerable;\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports) {\n\nmodule.exports = function(bitmap, value){\n  return {\n    enumerable  : !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable    : !(bitmap & 4),\n    value       : value\n  };\n};\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar def = __webpack_require__(6).f\n  , has = __webpack_require__(7)\n  , TAG = __webpack_require__(1)('toStringTag');\n\nmodule.exports = function(it, tag, stat){\n  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});\n};\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// 7.1.13 ToObject(argument)\nvar defined = __webpack_require__(25);\nmodule.exports = function(it){\n  return Object(defined(it));\n};\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports) {\n\nvar id = 0\n  , px = Math.random();\nmodule.exports = function(key){\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n\n/***/ }),\n/* 22 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global, setImmediate) {/*\r\n * Dexie.js - a minimalistic wrapper for IndexedDB\r\n * ===============================================\r\n *\r\n * By David Fahlander, david.fahlander@gmail.com\r\n *\r\n * Version {version}, {date}\r\n *\r\n * http://dexie.org\r\n *\r\n * Apache License Version 2.0, January 2004, http://www.apache.org/licenses/\r\n */\r\n \nvar keys = Object.keys;\r\nvar isArray = Array.isArray;\r\nvar _global = typeof self !== 'undefined' ? self :\r\n    typeof window !== 'undefined' ? window :\r\n        global;\r\nfunction extend(obj, extension) {\r\n    if (typeof extension !== 'object')\r\n        return obj;\r\n    keys(extension).forEach(function (key) {\r\n        obj[key] = extension[key];\r\n    });\r\n    return obj;\r\n}\r\nvar getProto = Object.getPrototypeOf;\r\nvar _hasOwn = {}.hasOwnProperty;\r\nfunction hasOwn(obj, prop) {\r\n    return _hasOwn.call(obj, prop);\r\n}\r\nfunction props(proto, extension) {\r\n    if (typeof extension === 'function')\r\n        extension = extension(getProto(proto));\r\n    keys(extension).forEach(function (key) {\r\n        setProp(proto, key, extension[key]);\r\n    });\r\n}\r\nvar defineProperty = Object.defineProperty;\r\nfunction setProp(obj, prop, functionOrGetSet, options) {\r\n    defineProperty(obj, prop, extend(functionOrGetSet && hasOwn(functionOrGetSet, \"get\") && typeof functionOrGetSet.get === 'function' ?\r\n        { get: functionOrGetSet.get, set: functionOrGetSet.set, configurable: true } :\r\n        { value: functionOrGetSet, configurable: true, writable: true }, options));\r\n}\r\nfunction derive(Child) {\r\n    return {\r\n        from: function (Parent) {\r\n            Child.prototype = Object.create(Parent.prototype);\r\n            setProp(Child.prototype, \"constructor\", Child);\r\n            return {\r\n                extend: props.bind(null, Child.prototype)\r\n            };\r\n        }\r\n    };\r\n}\r\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\r\nfunction getPropertyDescriptor(obj, prop) {\r\n    var pd = getOwnPropertyDescriptor(obj, prop), proto;\r\n    return pd || (proto = getProto(obj)) && getPropertyDescriptor(proto, prop);\r\n}\r\nvar _slice = [].slice;\r\nfunction slice(args, start, end) {\r\n    return _slice.call(args, start, end);\r\n}\r\nfunction override(origFunc, overridedFactory) {\r\n    return overridedFactory(origFunc);\r\n}\r\nfunction doFakeAutoComplete(fn) {\r\n    var to = setTimeout(fn, 1000);\r\n    clearTimeout(to);\r\n}\r\nfunction assert(b) {\r\n    if (!b)\r\n        throw new Error(\"Assertion Failed\");\r\n}\r\nfunction asap(fn) {\r\n    if (_global.setImmediate)\r\n        setImmediate(fn);\r\n    else\r\n        setTimeout(fn, 0);\r\n}\r\n\r\n/** Generate an object (hash map) based on given array.\r\n * @param extractor Function taking an array item and its index and returning an array of 2 items ([key, value]) to\r\n *        instert on the resulting object for each item in the array. If this function returns a falsy value, the\r\n *        current item wont affect the resulting object.\r\n */\r\nfunction arrayToObject(array, extractor) {\r\n    return array.reduce(function (result, item, i) {\r\n        var nameAndValue = extractor(item, i);\r\n        if (nameAndValue)\r\n            result[nameAndValue[0]] = nameAndValue[1];\r\n        return result;\r\n    }, {});\r\n}\r\nfunction trycatcher(fn, reject) {\r\n    return function () {\r\n        try {\r\n            fn.apply(this, arguments);\r\n        }\r\n        catch (e) {\r\n            reject(e);\r\n        }\r\n    };\r\n}\r\nfunction tryCatch(fn, onerror, args) {\r\n    try {\r\n        fn.apply(null, args);\r\n    }\r\n    catch (ex) {\r\n        onerror && onerror(ex);\r\n    }\r\n}\r\nfunction getByKeyPath(obj, keyPath) {\r\n    // http://www.w3.org/TR/IndexedDB/#steps-for-extracting-a-key-from-a-value-using-a-key-path\r\n    if (hasOwn(obj, keyPath))\r\n        return obj[keyPath]; // This line is moved from last to first for optimization purpose.\r\n    if (!keyPath)\r\n        return obj;\r\n    if (typeof keyPath !== 'string') {\r\n        var rv = [];\r\n        for (var i = 0, l = keyPath.length; i < l; ++i) {\r\n            var val = getByKeyPath(obj, keyPath[i]);\r\n            rv.push(val);\r\n        }\r\n        return rv;\r\n    }\r\n    var period = keyPath.indexOf('.');\r\n    if (period !== -1) {\r\n        var innerObj = obj[keyPath.substr(0, period)];\r\n        return innerObj === undefined ? undefined : getByKeyPath(innerObj, keyPath.substr(period + 1));\r\n    }\r\n    return undefined;\r\n}\r\nfunction setByKeyPath(obj, keyPath, value) {\r\n    if (!obj || keyPath === undefined)\r\n        return;\r\n    if ('isFrozen' in Object && Object.isFrozen(obj))\r\n        return;\r\n    if (typeof keyPath !== 'string' && 'length' in keyPath) {\r\n        assert(typeof value !== 'string' && 'length' in value);\r\n        for (var i = 0, l = keyPath.length; i < l; ++i) {\r\n            setByKeyPath(obj, keyPath[i], value[i]);\r\n        }\r\n    }\r\n    else {\r\n        var period = keyPath.indexOf('.');\r\n        if (period !== -1) {\r\n            var currentKeyPath = keyPath.substr(0, period);\r\n            var remainingKeyPath = keyPath.substr(period + 1);\r\n            if (remainingKeyPath === \"\")\r\n                if (value === undefined)\r\n                    delete obj[currentKeyPath];\r\n                else\r\n                    obj[currentKeyPath] = value;\r\n            else {\r\n                var innerObj = obj[currentKeyPath];\r\n                if (!innerObj)\r\n                    innerObj = (obj[currentKeyPath] = {});\r\n                setByKeyPath(innerObj, remainingKeyPath, value);\r\n            }\r\n        }\r\n        else {\r\n            if (value === undefined)\r\n                delete obj[keyPath];\r\n            else\r\n                obj[keyPath] = value;\r\n        }\r\n    }\r\n}\r\nfunction delByKeyPath(obj, keyPath) {\r\n    if (typeof keyPath === 'string')\r\n        setByKeyPath(obj, keyPath, undefined);\r\n    else if ('length' in keyPath)\r\n        [].map.call(keyPath, function (kp) {\r\n            setByKeyPath(obj, kp, undefined);\r\n        });\r\n}\r\nfunction shallowClone(obj) {\r\n    var rv = {};\r\n    for (var m in obj) {\r\n        if (hasOwn(obj, m))\r\n            rv[m] = obj[m];\r\n    }\r\n    return rv;\r\n}\r\nvar concat = [].concat;\r\nfunction flatten(a) {\r\n    return concat.apply([], a);\r\n}\r\n//https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\r\nvar intrinsicTypes = \"Boolean,String,Date,RegExp,Blob,File,FileList,ArrayBuffer,DataView,Uint8ClampedArray,ImageData,Map,Set\"\r\n    .split(',').concat(flatten([8, 16, 32, 64].map(function (num) { return [\"Int\", \"Uint\", \"Float\"].map(function (t) { return t + num + \"Array\"; }); }))).filter(function (t) { return _global[t]; }).map(function (t) { return _global[t]; });\r\nfunction deepClone(any) {\r\n    if (!any || typeof any !== 'object')\r\n        return any;\r\n    var rv;\r\n    if (isArray(any)) {\r\n        rv = [];\r\n        for (var i = 0, l = any.length; i < l; ++i) {\r\n            rv.push(deepClone(any[i]));\r\n        }\r\n    }\r\n    else if (intrinsicTypes.indexOf(any.constructor) >= 0) {\r\n        rv = any;\r\n    }\r\n    else {\r\n        rv = any.constructor ? Object.create(any.constructor.prototype) : {};\r\n        for (var prop in any) {\r\n            if (hasOwn(any, prop)) {\r\n                rv[prop] = deepClone(any[prop]);\r\n            }\r\n        }\r\n    }\r\n    return rv;\r\n}\r\nfunction getObjectDiff(a, b, rv, prfx) {\r\n    // Compares objects a and b and produces a diff object.\r\n    rv = rv || {};\r\n    prfx = prfx || '';\r\n    keys(a).forEach(function (prop) {\r\n        if (!hasOwn(b, prop))\r\n            rv[prfx + prop] = undefined; // Property removed\r\n        else {\r\n            var ap = a[prop], bp = b[prop];\r\n            if (typeof ap === 'object' && typeof bp === 'object' &&\r\n                ap && bp &&\r\n                ap.constructor === bp.constructor)\r\n                // Same type of object but its properties may have changed\r\n                getObjectDiff(ap, bp, rv, prfx + prop + \".\");\r\n            else if (ap !== bp)\r\n                rv[prfx + prop] = b[prop]; // Primitive value changed\r\n        }\r\n    });\r\n    keys(b).forEach(function (prop) {\r\n        if (!hasOwn(a, prop)) {\r\n            rv[prfx + prop] = b[prop]; // Property added\r\n        }\r\n    });\r\n    return rv;\r\n}\r\n// If first argument is iterable or array-like, return it as an array\r\nvar iteratorSymbol = typeof Symbol !== 'undefined' && Symbol.iterator;\r\nvar getIteratorOf = iteratorSymbol ? function (x) {\r\n    var i;\r\n    return x != null && (i = x[iteratorSymbol]) && i.apply(x);\r\n} : function () { return null; };\r\nvar NO_CHAR_ARRAY = {};\r\n// Takes one or several arguments and returns an array based on the following criteras:\r\n// * If several arguments provided, return arguments converted to an array in a way that\r\n//   still allows javascript engine to optimize the code.\r\n// * If single argument is an array, return a clone of it.\r\n// * If this-pointer equals NO_CHAR_ARRAY, don't accept strings as valid iterables as a special\r\n//   case to the two bullets below.\r\n// * If single argument is an iterable, convert it to an array and return the resulting array.\r\n// * If single argument is array-like (has length of type number), convert it to an array.\r\nfunction getArrayOf(arrayLike) {\r\n    var i, a, x, it;\r\n    if (arguments.length === 1) {\r\n        if (isArray(arrayLike))\r\n            return arrayLike.slice();\r\n        if (this === NO_CHAR_ARRAY && typeof arrayLike === 'string')\r\n            return [arrayLike];\r\n        if ((it = getIteratorOf(arrayLike))) {\r\n            a = [];\r\n            while ((x = it.next()), !x.done)\r\n                a.push(x.value);\r\n            return a;\r\n        }\r\n        if (arrayLike == null)\r\n            return [arrayLike];\r\n        i = arrayLike.length;\r\n        if (typeof i === 'number') {\r\n            a = new Array(i);\r\n            while (i--)\r\n                a[i] = arrayLike[i];\r\n            return a;\r\n        }\r\n        return [arrayLike];\r\n    }\r\n    i = arguments.length;\r\n    a = new Array(i);\r\n    while (i--)\r\n        a[i] = arguments[i];\r\n    return a;\r\n}\n\n// By default, debug will be true only if platform is a web platform and its page is served from localhost.\r\n// When debug = true, error's stacks will contain asyncronic long stacks.\r\n// By default, debug will be true only if platform is a web platform and its page is served from localhost.\r\nvar debug = typeof location !== 'undefined' &&\r\n    // By default, use debug mode if served from localhost.\r\n    /^(http|https):\\/\\/(localhost|127\\.0\\.0\\.1)/.test(location.href);\r\nfunction setDebug(value, filter) {\r\n    debug = value;\r\n    libraryFilter = filter;\r\n}\r\nvar libraryFilter = function () { return true; };\r\nvar NEEDS_THROW_FOR_STACK = !new Error(\"\").stack;\r\nfunction getErrorWithStack() {\r\n    \"use strict\";\r\n    if (NEEDS_THROW_FOR_STACK)\r\n        try {\r\n            // Doing something naughty in strict mode here to trigger a specific error\r\n            // that can be explicitely ignored in debugger's exception settings.\r\n            // If we'd just throw new Error() here, IE's debugger's exception settings\r\n            // will just consider it as \"exception thrown by javascript code\" which is\r\n            // something you wouldn't want it to ignore.\r\n            getErrorWithStack.arguments;\r\n            throw new Error(); // Fallback if above line don't throw.\r\n        }\r\n        catch (e) {\r\n            return e;\r\n        }\r\n    return new Error();\r\n}\r\nfunction prettyStack(exception, numIgnoredFrames) {\r\n    var stack = exception.stack;\r\n    if (!stack)\r\n        return \"\";\r\n    numIgnoredFrames = (numIgnoredFrames || 0);\r\n    if (stack.indexOf(exception.name) === 0)\r\n        numIgnoredFrames += (exception.name + exception.message).split('\\n').length;\r\n    return stack.split('\\n')\r\n        .slice(numIgnoredFrames)\r\n        .filter(libraryFilter)\r\n        .map(function (frame) { return \"\\n\" + frame; })\r\n        .join('');\r\n}\r\nfunction deprecated(what, fn) {\r\n    return function () {\r\n        console.warn(what + \" is deprecated. See https://github.com/dfahlander/Dexie.js/wiki/Deprecations. \" + prettyStack(getErrorWithStack(), 1));\r\n        return fn.apply(this, arguments);\r\n    };\r\n}\n\nvar dexieErrorNames = [\r\n    'Modify',\r\n    'Bulk',\r\n    'OpenFailed',\r\n    'VersionChange',\r\n    'Schema',\r\n    'Upgrade',\r\n    'InvalidTable',\r\n    'MissingAPI',\r\n    'NoSuchDatabase',\r\n    'InvalidArgument',\r\n    'SubTransaction',\r\n    'Unsupported',\r\n    'Internal',\r\n    'DatabaseClosed',\r\n    'PrematureCommit',\r\n    'ForeignAwait'\r\n];\r\nvar idbDomErrorNames = [\r\n    'Unknown',\r\n    'Constraint',\r\n    'Data',\r\n    'TransactionInactive',\r\n    'ReadOnly',\r\n    'Version',\r\n    'NotFound',\r\n    'InvalidState',\r\n    'InvalidAccess',\r\n    'Abort',\r\n    'Timeout',\r\n    'QuotaExceeded',\r\n    'Syntax',\r\n    'DataClone'\r\n];\r\nvar errorList = dexieErrorNames.concat(idbDomErrorNames);\r\nvar defaultTexts = {\r\n    VersionChanged: \"Database version changed by other database connection\",\r\n    DatabaseClosed: \"Database has been closed\",\r\n    Abort: \"Transaction aborted\",\r\n    TransactionInactive: \"Transaction has already completed or failed\"\r\n};\r\n//\r\n// DexieError - base class of all out exceptions.\r\n//\r\nfunction DexieError(name, msg) {\r\n    // Reason we don't use ES6 classes is because:\r\n    // 1. It bloats transpiled code and increases size of minified code.\r\n    // 2. It doesn't give us much in this case.\r\n    // 3. It would require sub classes to call super(), which\r\n    //    is not needed when deriving from Error.\r\n    this._e = getErrorWithStack();\r\n    this.name = name;\r\n    this.message = msg;\r\n}\r\nderive(DexieError).from(Error).extend({\r\n    stack: {\r\n        get: function () {\r\n            return this._stack ||\r\n                (this._stack = this.name + \": \" + this.message + prettyStack(this._e, 2));\r\n        }\r\n    },\r\n    toString: function () { return this.name + \": \" + this.message; }\r\n});\r\nfunction getMultiErrorMessage(msg, failures) {\r\n    return msg + \". Errors: \" + failures\r\n        .map(function (f) { return f.toString(); })\r\n        .filter(function (v, i, s) { return s.indexOf(v) === i; }) // Only unique error strings\r\n        .join('\\n');\r\n}\r\n//\r\n// ModifyError - thrown in Collection.modify()\r\n// Specific constructor because it contains members failures and failedKeys.\r\n//\r\nfunction ModifyError(msg, failures, successCount, failedKeys) {\r\n    this._e = getErrorWithStack();\r\n    this.failures = failures;\r\n    this.failedKeys = failedKeys;\r\n    this.successCount = successCount;\r\n}\r\nderive(ModifyError).from(DexieError);\r\nfunction BulkError(msg, failures) {\r\n    this._e = getErrorWithStack();\r\n    this.name = \"BulkError\";\r\n    this.failures = failures;\r\n    this.message = getMultiErrorMessage(msg, failures);\r\n}\r\nderive(BulkError).from(DexieError);\r\n//\r\n//\r\n// Dynamically generate error names and exception classes based\r\n// on the names in errorList.\r\n//\r\n//\r\n// Map of {ErrorName -> ErrorName + \"Error\"}\r\nvar errnames = errorList.reduce(function (obj, name) { return (obj[name] = name + \"Error\", obj); }, {});\r\n// Need an alias for DexieError because we're gonna create subclasses with the same name.\r\nvar BaseException = DexieError;\r\n// Map of {ErrorName -> exception constructor}\r\nvar exceptions = errorList.reduce(function (obj, name) {\r\n    // Let the name be \"DexieError\" because this name may\r\n    // be shown in call stack and when debugging. DexieError is\r\n    // the most true name because it derives from DexieError,\r\n    // and we cannot change Function.name programatically without\r\n    // dynamically create a Function object, which would be considered\r\n    // 'eval-evil'.\r\n    var fullName = name + \"Error\";\r\n    function DexieError(msgOrInner, inner) {\r\n        this._e = getErrorWithStack();\r\n        this.name = fullName;\r\n        if (!msgOrInner) {\r\n            this.message = defaultTexts[name] || fullName;\r\n            this.inner = null;\r\n        }\r\n        else if (typeof msgOrInner === 'string') {\r\n            this.message = msgOrInner;\r\n            this.inner = inner || null;\r\n        }\r\n        else if (typeof msgOrInner === 'object') {\r\n            this.message = msgOrInner.name + \" \" + msgOrInner.message;\r\n            this.inner = msgOrInner;\r\n        }\r\n    }\r\n    derive(DexieError).from(BaseException);\r\n    obj[name] = DexieError;\r\n    return obj;\r\n}, {});\r\n// Use ECMASCRIPT standard exceptions where applicable:\r\nexceptions.Syntax = SyntaxError;\r\nexceptions.Type = TypeError;\r\nexceptions.Range = RangeError;\r\nvar exceptionMap = idbDomErrorNames.reduce(function (obj, name) {\r\n    obj[name + \"Error\"] = exceptions[name];\r\n    return obj;\r\n}, {});\r\nfunction mapError(domError, message) {\r\n    if (!domError || domError instanceof DexieError || domError instanceof TypeError || domError instanceof SyntaxError || !domError.name || !exceptionMap[domError.name])\r\n        return domError;\r\n    var rv = new exceptionMap[domError.name](message || domError.message, domError);\r\n    if (\"stack\" in domError) {\r\n        // Derive stack from inner exception if it has a stack\r\n        setProp(rv, \"stack\", { get: function () {\r\n                return this.inner.stack;\r\n            } });\r\n    }\r\n    return rv;\r\n}\r\nvar fullNameExceptions = errorList.reduce(function (obj, name) {\r\n    if ([\"Syntax\", \"Type\", \"Range\"].indexOf(name) === -1)\r\n        obj[name + \"Error\"] = exceptions[name];\r\n    return obj;\r\n}, {});\r\nfullNameExceptions.ModifyError = ModifyError;\r\nfullNameExceptions.DexieError = DexieError;\r\nfullNameExceptions.BulkError = BulkError;\n\nfunction nop() { }\r\nfunction mirror(val) { return val; }\r\nfunction pureFunctionChain(f1, f2) {\r\n    // Enables chained events that takes ONE argument and returns it to the next function in chain.\r\n    // This pattern is used in the hook(\"reading\") event.\r\n    if (f1 == null || f1 === mirror)\r\n        return f2;\r\n    return function (val) {\r\n        return f2(f1(val));\r\n    };\r\n}\r\nfunction callBoth(on1, on2) {\r\n    return function () {\r\n        on1.apply(this, arguments);\r\n        on2.apply(this, arguments);\r\n    };\r\n}\r\nfunction hookCreatingChain(f1, f2) {\r\n    // Enables chained events that takes several arguments and may modify first argument by making a modification and then returning the same instance.\r\n    // This pattern is used in the hook(\"creating\") event.\r\n    if (f1 === nop)\r\n        return f2;\r\n    return function () {\r\n        var res = f1.apply(this, arguments);\r\n        if (res !== undefined)\r\n            arguments[0] = res;\r\n        var onsuccess = this.onsuccess, // In case event listener has set this.onsuccess\r\n        onerror = this.onerror; // In case event listener has set this.onerror\r\n        this.onsuccess = null;\r\n        this.onerror = null;\r\n        var res2 = f2.apply(this, arguments);\r\n        if (onsuccess)\r\n            this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;\r\n        if (onerror)\r\n            this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;\r\n        return res2 !== undefined ? res2 : res;\r\n    };\r\n}\r\nfunction hookDeletingChain(f1, f2) {\r\n    if (f1 === nop)\r\n        return f2;\r\n    return function () {\r\n        f1.apply(this, arguments);\r\n        var onsuccess = this.onsuccess, // In case event listener has set this.onsuccess\r\n        onerror = this.onerror; // In case event listener has set this.onerror\r\n        this.onsuccess = this.onerror = null;\r\n        f2.apply(this, arguments);\r\n        if (onsuccess)\r\n            this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;\r\n        if (onerror)\r\n            this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;\r\n    };\r\n}\r\nfunction hookUpdatingChain(f1, f2) {\r\n    if (f1 === nop)\r\n        return f2;\r\n    return function (modifications) {\r\n        var res = f1.apply(this, arguments);\r\n        extend(modifications, res); // If f1 returns new modifications, extend caller's modifications with the result before calling next in chain.\r\n        var onsuccess = this.onsuccess, // In case event listener has set this.onsuccess\r\n        onerror = this.onerror; // In case event listener has set this.onerror\r\n        this.onsuccess = null;\r\n        this.onerror = null;\r\n        var res2 = f2.apply(this, arguments);\r\n        if (onsuccess)\r\n            this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;\r\n        if (onerror)\r\n            this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;\r\n        return res === undefined ?\r\n            (res2 === undefined ? undefined : res2) :\r\n            (extend(res, res2));\r\n    };\r\n}\r\nfunction reverseStoppableEventChain(f1, f2) {\r\n    if (f1 === nop)\r\n        return f2;\r\n    return function () {\r\n        if (f2.apply(this, arguments) === false)\r\n            return false;\r\n        return f1.apply(this, arguments);\r\n    };\r\n}\r\n\r\nfunction promisableChain(f1, f2) {\r\n    if (f1 === nop)\r\n        return f2;\r\n    return function () {\r\n        var res = f1.apply(this, arguments);\r\n        if (res && typeof res.then === 'function') {\r\n            var thiz = this, i = arguments.length, args = new Array(i);\r\n            while (i--)\r\n                args[i] = arguments[i];\r\n            return res.then(function () {\r\n                return f2.apply(thiz, args);\r\n            });\r\n        }\r\n        return f2.apply(this, arguments);\r\n    };\r\n}\n\n//\r\n// Promise and Zone (PSD) for Dexie library\r\n//\r\n// I started out writing this Promise class by copying promise-light (https://github.com/taylorhakes/promise-light) by\r\n// https://github.com/taylorhakes - an A+ and ECMASCRIPT 6 compliant Promise implementation.\r\n//\r\n// In previous versions this was fixed by not calling setTimeout when knowing that the resolve() or reject() came from another\r\n// tick. In Dexie v1.4.0, I've rewritten the Promise class entirely. Just some fragments of promise-light is left. I use\r\n// another strategy now that simplifies everything a lot: to always execute callbacks in a new micro-task, but have an own micro-task\r\n// engine that is indexedDB compliant across all browsers.\r\n// Promise class has also been optimized a lot with inspiration from bluebird - to avoid closures as much as possible.\r\n// Also with inspiration from bluebird, asyncronic stacks in debug mode.\r\n//\r\n// Specific non-standard features of this Promise class:\r\n// * Custom zone support (a.k.a. PSD) with ability to keep zones also when using native promises as well as\r\n//   native async / await.\r\n// * Promise.follow() method built upon the custom zone engine, that allows user to track all promises created from current stack frame\r\n//   and below + all promises that those promises creates or awaits.\r\n// * Detect any unhandled promise in a PSD-scope (PSD.onunhandled). \r\n//\r\n// David Fahlander, https://github.com/dfahlander\r\n//\r\n// Just a pointer that only this module knows about.\r\n// Used in Promise constructor to emulate a private constructor.\r\nvar INTERNAL = {};\r\n// Async stacks (long stacks) must not grow infinitely.\r\nvar LONG_STACKS_CLIP_LIMIT = 100;\nvar MAX_LONG_STACKS = 20;\nvar ZONE_ECHO_LIMIT = 7;\nvar nativePromiseInstanceAndProto = (function () {\r\n    try {\r\n        // Be able to patch native async functions\r\n        return new Function(\"let F=async ()=>{},p=F();return [p,Object.getPrototypeOf(p),Promise.resolve(),F.constructor];\")();\r\n    }\r\n    catch (e) {\r\n        var P = _global.Promise;\r\n        return P ?\r\n            [P.resolve(), P.prototype, P.resolve()] :\r\n            [];\r\n    }\r\n})();\nvar resolvedNativePromise = nativePromiseInstanceAndProto[0];\nvar nativePromiseProto = nativePromiseInstanceAndProto[1];\nvar resolvedGlobalPromise = nativePromiseInstanceAndProto[2];\nvar nativePromiseThen = nativePromiseProto && nativePromiseProto.then;\r\nvar NativePromise = resolvedNativePromise && resolvedNativePromise.constructor;\r\nvar AsyncFunction = nativePromiseInstanceAndProto[3];\r\nvar patchGlobalPromise = !!resolvedGlobalPromise;\r\nvar stack_being_generated = false;\r\n/* The default function used only for the very first promise in a promise chain.\r\n   As soon as then promise is resolved or rejected, all next tasks will be executed in micro ticks\r\n   emulated in this module. For indexedDB compatibility, this means that every method needs to\r\n   execute at least one promise before doing an indexedDB operation. Dexie will always call\r\n   db.ready().then() for every operation to make sure the indexedDB event is started in an\r\n   indexedDB-compatible emulated micro task loop.\r\n*/\r\nvar schedulePhysicalTick = resolvedGlobalPromise ?\r\n    function () { resolvedGlobalPromise.then(physicalTick); }\r\n    :\r\n        _global.setImmediate ?\r\n            // setImmediate supported. Those modern platforms also supports Function.bind().\r\n            setImmediate.bind(null, physicalTick) :\r\n            _global.MutationObserver ?\r\n                // MutationObserver supported\r\n                function () {\r\n                    var hiddenDiv = document.createElement(\"div\");\r\n                    (new MutationObserver(function () {\r\n                        physicalTick();\r\n                        hiddenDiv = null;\r\n                    })).observe(hiddenDiv, { attributes: true });\r\n                    hiddenDiv.setAttribute('i', '1');\r\n                } :\r\n                // No support for setImmediate or MutationObserver. No worry, setTimeout is only called\r\n                // once time. Every tick that follows will be our emulated micro tick.\r\n                // Could have uses setTimeout.bind(null, 0, physicalTick) if it wasnt for that FF13 and below has a bug \r\n                function () { setTimeout(physicalTick, 0); };\r\n// Configurable through Promise.scheduler.\r\n// Don't export because it would be unsafe to let unknown\r\n// code call it unless they do try..catch within their callback.\r\n// This function can be retrieved through getter of Promise.scheduler though,\r\n// but users must not do Promise.scheduler = myFuncThatThrowsException\r\nvar asap$1 = function (callback, args) {\r\n    microtickQueue.push([callback, args]);\r\n    if (needsNewPhysicalTick) {\r\n        schedulePhysicalTick();\r\n        needsNewPhysicalTick = false;\r\n    }\r\n};\r\nvar isOutsideMicroTick = true;\nvar needsNewPhysicalTick = true;\nvar unhandledErrors = [];\nvar rejectingErrors = [];\nvar currentFulfiller = null;\nvar rejectionMapper = mirror; // Remove in next major when removing error mapping of DOMErrors and DOMExceptions\r\n// Remove in next major when removing error mapping of DOMErrors and DOMExceptions\r\nvar globalPSD = {\r\n    id: 'global',\r\n    global: true,\r\n    ref: 0,\r\n    unhandleds: [],\r\n    onunhandled: globalError,\r\n    pgp: false,\r\n    env: {},\r\n    finalize: function () {\r\n        this.unhandleds.forEach(function (uh) {\r\n            try {\r\n                globalError(uh[0], uh[1]);\r\n            }\r\n            catch (e) { }\r\n        });\r\n    }\r\n};\r\nvar PSD = globalPSD;\r\nvar microtickQueue = []; // Callbacks to call in this or next physical tick.\r\n// Callbacks to call in this or next physical tick.\r\nvar numScheduledCalls = 0; // Number of listener-calls left to do in this physical tick.\r\n// Number of listener-calls left to do in this physical tick.\r\nvar tickFinalizers = []; // Finalizers to call when there are no more async calls scheduled within current physical tick.\r\n// Finalizers to call when there are no more async calls scheduled within current physical tick.\r\nfunction Promise(fn) {\r\n    if (typeof this !== 'object')\r\n        throw new TypeError('Promises must be constructed via new');\r\n    this._listeners = [];\r\n    this.onuncatched = nop; // Deprecate in next major. Not needed. Better to use global error handler.\r\n    // A library may set `promise._lib = true;` after promise is created to make resolve() or reject()\r\n    // execute the microtask engine implicitely within the call to resolve() or reject().\r\n    // To remain A+ compliant, a library must only set `_lib=true` if it can guarantee that the stack\r\n    // only contains library code when calling resolve() or reject().\r\n    // RULE OF THUMB: ONLY set _lib = true for promises explicitely resolving/rejecting directly from\r\n    // global scope (event handler, timer etc)!\r\n    this._lib = false;\r\n    // Current async scope\r\n    var psd = (this._PSD = PSD);\r\n    if (debug) {\r\n        this._stackHolder = getErrorWithStack();\r\n        this._prev = null;\r\n        this._numPrev = 0; // Number of previous promises (for long stacks)\r\n    }\r\n    if (typeof fn !== 'function') {\r\n        if (fn !== INTERNAL)\r\n            throw new TypeError('Not a function');\r\n        // Private constructor (INTERNAL, state, value).\r\n        // Used internally by Promise.resolve() and Promise.reject().\r\n        this._state = arguments[1];\r\n        this._value = arguments[2];\r\n        if (this._state === false)\r\n            handleRejection(this, this._value); // Map error, set stack and addPossiblyUnhandledError().\r\n        return;\r\n    }\r\n    this._state = null; // null (=pending), false (=rejected) or true (=resolved)\r\n    this._value = null; // error or result\r\n    ++psd.ref; // Refcounting current scope\r\n    executePromiseTask(this, fn);\r\n}\r\n// Prepare a property descriptor to put onto Promise.prototype.then\r\nvar thenProp = {\r\n    get: function () {\r\n        var psd = PSD, microTaskId = totalEchoes;\r\n        function then(onFulfilled, onRejected) {\r\n            var _this = this;\r\n            var possibleAwait = !psd.global && (psd !== PSD || microTaskId !== totalEchoes);\r\n            if (possibleAwait)\r\n                decrementExpectedAwaits();\r\n            var rv = new Promise(function (resolve, reject) {\r\n                propagateToListener(_this, new Listener(nativeAwaitCompatibleWrap(onFulfilled, psd, possibleAwait), nativeAwaitCompatibleWrap(onRejected, psd, possibleAwait), resolve, reject, psd));\r\n            });\r\n            debug && linkToPreviousPromise(rv, this);\r\n            return rv;\r\n        }\r\n        then.prototype = INTERNAL; // For idempotense, see setter below.\r\n        return then;\r\n    },\r\n    // Be idempotent and allow another framework (such as zone.js or another instance of a Dexie.Promise module) to replace Promise.prototype.then\r\n    // and when that framework wants to restore the original property, we must identify that and restore the original property descriptor.\r\n    set: function (value) {\r\n        setProp(this, 'then', value && value.prototype === INTERNAL ?\r\n            thenProp :\r\n            {\r\n                get: function () {\r\n                    return value; // Getter returning provided value (behaves like value is just changed)\r\n                },\r\n                set: thenProp.set // Keep a setter that is prepared to restore original.\r\n            });\r\n    }\r\n};\r\nprops(Promise.prototype, {\r\n    then: thenProp,\r\n    _then: function (onFulfilled, onRejected) {\r\n        // A little tinier version of then() that don't have to create a resulting promise.\r\n        propagateToListener(this, new Listener(null, null, onFulfilled, onRejected, PSD));\r\n    },\r\n    catch: function (onRejected) {\r\n        if (arguments.length === 1)\r\n            return this.then(null, onRejected);\r\n        // First argument is the Error type to catch\r\n        var type = arguments[0], handler = arguments[1];\r\n        return typeof type === 'function' ? this.then(null, function (err) {\r\n            // Catching errors by its constructor type (similar to java / c++ / c#)\r\n            // Sample: promise.catch(TypeError, function (e) { ... });\r\n            return err instanceof type ? handler(err) : PromiseReject(err);\r\n        })\r\n            : this.then(null, function (err) {\r\n                // Catching errors by the error.name property. Makes sense for indexedDB where error type\r\n                // is always DOMError but where e.name tells the actual error type.\r\n                // Sample: promise.catch('ConstraintError', function (e) { ... });\r\n                return err && err.name === type ? handler(err) : PromiseReject(err);\r\n            });\r\n    },\r\n    finally: function (onFinally) {\r\n        return this.then(function (value) {\r\n            onFinally();\r\n            return value;\r\n        }, function (err) {\r\n            onFinally();\r\n            return PromiseReject(err);\r\n        });\r\n    },\r\n    stack: {\r\n        get: function () {\r\n            if (this._stack)\r\n                return this._stack;\r\n            try {\r\n                stack_being_generated = true;\r\n                var stacks = getStack(this, [], MAX_LONG_STACKS);\r\n                var stack = stacks.join(\"\\nFrom previous: \");\r\n                if (this._state !== null)\r\n                    this._stack = stack; // Stack may be updated on reject.\r\n                return stack;\r\n            }\r\n            finally {\r\n                stack_being_generated = false;\r\n            }\r\n        }\r\n    },\r\n    timeout: function (ms, msg) {\r\n        var _this = this;\r\n        return ms < Infinity ?\r\n            new Promise(function (resolve, reject) {\r\n                var handle = setTimeout(function () { return reject(new exceptions.Timeout(msg)); }, ms);\r\n                _this.then(resolve, reject).finally(clearTimeout.bind(null, handle));\r\n            }) : this;\r\n    }\r\n});\r\nif (typeof Symbol !== 'undefined' && Symbol.toStringTag)\r\n    setProp(Promise.prototype, Symbol.toStringTag, 'Promise');\r\n// Now that Promise.prototype is defined, we have all it takes to set globalPSD.env.\r\n// Environment globals snapshotted on leaving global zone\r\nglobalPSD.env = snapShot();\r\nfunction Listener(onFulfilled, onRejected, resolve, reject, zone) {\r\n    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;\r\n    this.onRejected = typeof onRejected === 'function' ? onRejected : null;\r\n    this.resolve = resolve;\r\n    this.reject = reject;\r\n    this.psd = zone;\r\n}\r\n// Promise Static Properties\r\nprops(Promise, {\r\n    all: function () {\r\n        var values = getArrayOf.apply(null, arguments) // Supports iterables, implicit arguments and array-like.\r\n            .map(onPossibleParallellAsync); // Handle parallell async/awaits \r\n        return new Promise(function (resolve, reject) {\r\n            if (values.length === 0)\r\n                resolve([]);\r\n            var remaining = values.length;\r\n            values.forEach(function (a, i) { return Promise.resolve(a).then(function (x) {\r\n                values[i] = x;\r\n                if (!--remaining)\r\n                    resolve(values);\r\n            }, reject); });\r\n        });\r\n    },\r\n    resolve: function (value) {\r\n        if (value instanceof Promise)\r\n            return value;\r\n        if (value && typeof value.then === 'function')\r\n            return new Promise(function (resolve, reject) {\r\n                value.then(resolve, reject);\r\n            });\r\n        var rv = new Promise(INTERNAL, true, value);\r\n        linkToPreviousPromise(rv, currentFulfiller);\r\n        return rv;\r\n    },\r\n    reject: PromiseReject,\r\n    race: function () {\r\n        var values = getArrayOf.apply(null, arguments).map(onPossibleParallellAsync);\r\n        return new Promise(function (resolve, reject) {\r\n            values.map(function (value) { return Promise.resolve(value).then(resolve, reject); });\r\n        });\r\n    },\r\n    PSD: {\r\n        get: function () { return PSD; },\r\n        set: function (value) { return PSD = value; }\r\n    },\r\n    //totalEchoes: {get: ()=>totalEchoes},\r\n    //task: {get: ()=>task},\r\n    newPSD: newScope,\r\n    usePSD: usePSD,\r\n    scheduler: {\r\n        get: function () { return asap$1; },\r\n        set: function (value) { asap$1 = value; }\r\n    },\r\n    rejectionMapper: {\r\n        get: function () { return rejectionMapper; },\r\n        set: function (value) { rejectionMapper = value; } // Map reject failures\r\n    },\r\n    follow: function (fn, zoneProps) {\r\n        return new Promise(function (resolve, reject) {\r\n            return newScope(function (resolve, reject) {\r\n                var psd = PSD;\r\n                psd.unhandleds = []; // For unhandled standard- or 3rd party Promises. Checked at psd.finalize()\r\n                psd.onunhandled = reject; // Triggered directly on unhandled promises of this library.\r\n                psd.finalize = callBoth(function () {\r\n                    var _this = this;\r\n                    // Unhandled standard or 3rd part promises are put in PSD.unhandleds and\r\n                    // examined upon scope completion while unhandled rejections in this Promise\r\n                    // will trigger directly through psd.onunhandled\r\n                    run_at_end_of_this_or_next_physical_tick(function () {\r\n                        _this.unhandleds.length === 0 ? resolve() : reject(_this.unhandleds[0]);\r\n                    });\r\n                }, psd.finalize);\r\n                fn();\r\n            }, zoneProps, resolve, reject);\r\n        });\r\n    }\r\n});\r\n/**\r\n* Take a potentially misbehaving resolver function and make sure\r\n* onFulfilled and onRejected are only called once.\r\n*\r\n* Makes no guarantees about asynchrony.\r\n*/\r\nfunction executePromiseTask(promise, fn) {\r\n    // Promise Resolution Procedure:\r\n    // https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\r\n    try {\r\n        fn(function (value) {\r\n            if (promise._state !== null)\r\n                return; // Already settled\r\n            if (value === promise)\r\n                throw new TypeError('A promise cannot be resolved with itself.');\r\n            var shouldExecuteTick = promise._lib && beginMicroTickScope();\r\n            if (value && typeof value.then === 'function') {\r\n                executePromiseTask(promise, function (resolve, reject) {\r\n                    value instanceof Promise ?\r\n                        value._then(resolve, reject) :\r\n                        value.then(resolve, reject);\r\n                });\r\n            }\r\n            else {\r\n                promise._state = true;\r\n                promise._value = value;\r\n                propagateAllListeners(promise);\r\n            }\r\n            if (shouldExecuteTick)\r\n                endMicroTickScope();\r\n        }, handleRejection.bind(null, promise)); // If Function.bind is not supported. Exception is handled in catch below\r\n    }\r\n    catch (ex) {\r\n        handleRejection(promise, ex);\r\n    }\r\n}\r\nfunction handleRejection(promise, reason) {\r\n    rejectingErrors.push(reason);\r\n    if (promise._state !== null)\r\n        return;\r\n    var shouldExecuteTick = promise._lib && beginMicroTickScope();\r\n    reason = rejectionMapper(reason);\r\n    promise._state = false;\r\n    promise._value = reason;\r\n    debug && reason !== null && typeof reason === 'object' && !reason._promise && tryCatch(function () {\r\n        var origProp = getPropertyDescriptor(reason, \"stack\");\r\n        reason._promise = promise;\r\n        setProp(reason, \"stack\", {\r\n            get: function () {\r\n                return stack_being_generated ?\r\n                    origProp && (origProp.get ?\r\n                        origProp.get.apply(reason) :\r\n                        origProp.value) :\r\n                    promise.stack;\r\n            }\r\n        });\r\n    });\r\n    // Add the failure to a list of possibly uncaught errors\r\n    addPossiblyUnhandledError(promise);\r\n    propagateAllListeners(promise);\r\n    if (shouldExecuteTick)\r\n        endMicroTickScope();\r\n}\r\nfunction propagateAllListeners(promise) {\r\n    //debug && linkToPreviousPromise(promise);\r\n    var listeners = promise._listeners;\r\n    promise._listeners = [];\r\n    for (var i = 0, len = listeners.length; i < len; ++i) {\r\n        propagateToListener(promise, listeners[i]);\r\n    }\r\n    var psd = promise._PSD;\r\n    --psd.ref || psd.finalize(); // if psd.ref reaches zero, call psd.finalize();\r\n    if (numScheduledCalls === 0) {\r\n        // If numScheduledCalls is 0, it means that our stack is not in a callback of a scheduled call,\r\n        // and that no deferreds where listening to this rejection or success.\r\n        // Since there is a risk that our stack can contain application code that may\r\n        // do stuff after this code is finished that may generate new calls, we cannot\r\n        // call finalizers here.\r\n        ++numScheduledCalls;\r\n        asap$1(function () {\r\n            if (--numScheduledCalls === 0)\r\n                finalizePhysicalTick(); // Will detect unhandled errors\r\n        }, []);\r\n    }\r\n}\r\nfunction propagateToListener(promise, listener) {\r\n    if (promise._state === null) {\r\n        promise._listeners.push(listener);\r\n        return;\r\n    }\r\n    var cb = promise._state ? listener.onFulfilled : listener.onRejected;\r\n    if (cb === null) {\r\n        // This Listener doesnt have a listener for the event being triggered (onFulfilled or onReject) so lets forward the event to any eventual listeners on the Promise instance returned by then() or catch()\r\n        return (promise._state ? listener.resolve : listener.reject)(promise._value);\r\n    }\r\n    ++listener.psd.ref;\r\n    ++numScheduledCalls;\r\n    asap$1(callListener, [cb, promise, listener]);\r\n}\r\nfunction callListener(cb, promise, listener) {\r\n    try {\r\n        // Set static variable currentFulfiller to the promise that is being fullfilled,\r\n        // so that we connect the chain of promises (for long stacks support)\r\n        currentFulfiller = promise;\r\n        // Call callback and resolve our listener with it's return value.\r\n        var ret, value = promise._value;\r\n        if (promise._state) {\r\n            // cb is onResolved\r\n            ret = cb(value);\r\n        }\r\n        else {\r\n            // cb is onRejected\r\n            if (rejectingErrors.length)\r\n                rejectingErrors = [];\r\n            ret = cb(value);\r\n            if (rejectingErrors.indexOf(value) === -1)\r\n                markErrorAsHandled(promise); // Callback didnt do Promise.reject(err) nor reject(err) onto another promise.\r\n        }\r\n        listener.resolve(ret);\r\n    }\r\n    catch (e) {\r\n        // Exception thrown in callback. Reject our listener.\r\n        listener.reject(e);\r\n    }\r\n    finally {\r\n        // Restore env and currentFulfiller.\r\n        currentFulfiller = null;\r\n        if (--numScheduledCalls === 0)\r\n            finalizePhysicalTick();\r\n        --listener.psd.ref || listener.psd.finalize();\r\n    }\r\n}\r\nfunction getStack(promise, stacks, limit) {\r\n    if (stacks.length === limit)\r\n        return stacks;\r\n    var stack = \"\";\r\n    if (promise._state === false) {\r\n        var failure = promise._value, errorName, message;\r\n        if (failure != null) {\r\n            errorName = failure.name || \"Error\";\r\n            message = failure.message || failure;\r\n            stack = prettyStack(failure, 0);\r\n        }\r\n        else {\r\n            errorName = failure; // If error is undefined or null, show that.\r\n            message = \"\";\r\n        }\r\n        stacks.push(errorName + (message ? \": \" + message : \"\") + stack);\r\n    }\r\n    if (debug) {\r\n        stack = prettyStack(promise._stackHolder, 2);\r\n        if (stack && stacks.indexOf(stack) === -1)\r\n            stacks.push(stack);\r\n        if (promise._prev)\r\n            getStack(promise._prev, stacks, limit);\r\n    }\r\n    return stacks;\r\n}\r\nfunction linkToPreviousPromise(promise, prev) {\r\n    // Support long stacks by linking to previous completed promise.\r\n    var numPrev = prev ? prev._numPrev + 1 : 0;\r\n    if (numPrev < LONG_STACKS_CLIP_LIMIT) {\r\n        promise._prev = prev;\r\n        promise._numPrev = numPrev;\r\n    }\r\n}\r\n/* The callback to schedule with setImmediate() or setTimeout().\r\n   It runs a virtual microtick and executes any callback registered in microtickQueue.\r\n */\r\nfunction physicalTick() {\r\n    beginMicroTickScope() && endMicroTickScope();\r\n}\r\nfunction beginMicroTickScope() {\r\n    var wasRootExec = isOutsideMicroTick;\r\n    isOutsideMicroTick = false;\r\n    needsNewPhysicalTick = false;\r\n    return wasRootExec;\r\n}\r\n/* Executes micro-ticks without doing try..catch.\r\n   This can be possible because we only use this internally and\r\n   the registered functions are exception-safe (they do try..catch\r\n   internally before calling any external method). If registering\r\n   functions in the microtickQueue that are not exception-safe, this\r\n   would destroy the framework and make it instable. So we don't export\r\n   our asap method.\r\n*/\r\nfunction endMicroTickScope() {\r\n    var callbacks, i, l;\r\n    do {\r\n        while (microtickQueue.length > 0) {\r\n            callbacks = microtickQueue;\r\n            microtickQueue = [];\r\n            l = callbacks.length;\r\n            for (i = 0; i < l; ++i) {\r\n                var item = callbacks[i];\r\n                item[0].apply(null, item[1]);\r\n            }\r\n        }\r\n    } while (microtickQueue.length > 0);\r\n    isOutsideMicroTick = true;\r\n    needsNewPhysicalTick = true;\r\n}\r\nfunction finalizePhysicalTick() {\r\n    var unhandledErrs = unhandledErrors;\r\n    unhandledErrors = [];\r\n    unhandledErrs.forEach(function (p) {\r\n        p._PSD.onunhandled.call(null, p._value, p);\r\n    });\r\n    var finalizers = tickFinalizers.slice(0); // Clone first because finalizer may remove itself from list.\r\n    var i = finalizers.length;\r\n    while (i)\r\n        finalizers[--i]();\r\n}\r\nfunction run_at_end_of_this_or_next_physical_tick(fn) {\r\n    function finalizer() {\r\n        fn();\r\n        tickFinalizers.splice(tickFinalizers.indexOf(finalizer), 1);\r\n    }\r\n    tickFinalizers.push(finalizer);\r\n    ++numScheduledCalls;\r\n    asap$1(function () {\r\n        if (--numScheduledCalls === 0)\r\n            finalizePhysicalTick();\r\n    }, []);\r\n}\r\nfunction addPossiblyUnhandledError(promise) {\r\n    // Only add to unhandledErrors if not already there. The first one to add to this list\r\n    // will be upon the first rejection so that the root cause (first promise in the\r\n    // rejection chain) is the one listed.\r\n    if (!unhandledErrors.some(function (p) { return p._value === promise._value; }))\r\n        unhandledErrors.push(promise);\r\n}\r\nfunction markErrorAsHandled(promise) {\r\n    // Called when a reject handled is actually being called.\r\n    // Search in unhandledErrors for any promise whos _value is this promise_value (list\r\n    // contains only rejected promises, and only one item per error)\r\n    var i = unhandledErrors.length;\r\n    while (i)\r\n        if (unhandledErrors[--i]._value === promise._value) {\r\n            // Found a promise that failed with this same error object pointer,\r\n            // Remove that since there is a listener that actually takes care of it.\r\n            unhandledErrors.splice(i, 1);\r\n            return;\r\n        }\r\n}\r\nfunction PromiseReject(reason) {\r\n    return new Promise(INTERNAL, false, reason);\r\n}\r\nfunction wrap(fn, errorCatcher) {\r\n    var psd = PSD;\r\n    return function () {\r\n        var wasRootExec = beginMicroTickScope(), outerScope = PSD;\r\n        try {\r\n            switchToZone(psd, true);\r\n            return fn.apply(this, arguments);\r\n        }\r\n        catch (e) {\r\n            errorCatcher && errorCatcher(e);\r\n        }\r\n        finally {\r\n            switchToZone(outerScope, false);\r\n            if (wasRootExec)\r\n                endMicroTickScope();\r\n        }\r\n    };\r\n}\r\n//\r\n// variables used for native await support\r\n//\r\nvar task = { awaits: 0, echoes: 0, id: 0 }; // The ongoing macro-task when using zone-echoing.\r\nvar taskCounter = 0; // ID counter for macro tasks.\r\nvar zoneStack = []; // Stack of left zones to restore asynchronically.\r\nvar zoneEchoes = 0; // zoneEchoes is a must in order to persist zones between native await expressions.\r\nvar totalEchoes = 0; // ID counter for micro-tasks. Used to detect possible native await in our Promise.prototype.then.\r\nvar zone_id_counter = 0;\r\nfunction newScope(fn, props$$1, a1, a2) {\r\n    var parent = PSD, psd = Object.create(parent);\r\n    psd.parent = parent;\r\n    psd.ref = 0;\r\n    psd.global = false;\r\n    psd.id = ++zone_id_counter;\r\n    // Prepare for promise patching (done in usePSD):\r\n    var globalEnv = globalPSD.env;\r\n    psd.env = patchGlobalPromise ? {\r\n        Promise: Promise,\r\n        all: Promise.all,\r\n        race: Promise.race,\r\n        resolve: Promise.resolve,\r\n        reject: Promise.reject,\r\n        nthen: getPatchedPromiseThen(globalEnv.nthen, psd),\r\n        gthen: getPatchedPromiseThen(globalEnv.gthen, psd) // global then\r\n    } : {};\r\n    if (props$$1)\r\n        extend(psd, props$$1);\r\n    // unhandleds and onunhandled should not be specifically set here.\r\n    // Leave them on parent prototype.\r\n    // unhandleds.push(err) will push to parent's prototype\r\n    // onunhandled() will call parents onunhandled (with this scope's this-pointer though!)\r\n    ++parent.ref;\r\n    psd.finalize = function () {\r\n        --this.parent.ref || this.parent.finalize();\r\n    };\r\n    var rv = usePSD(psd, fn, a1, a2);\r\n    if (psd.ref === 0)\r\n        psd.finalize();\r\n    return rv;\r\n}\r\n// Function to call if scopeFunc returns NativePromise\r\n// Also for each NativePromise in the arguments to Promise.all()\r\nfunction incrementExpectedAwaits() {\r\n    if (!task.id)\r\n        task.id = ++taskCounter;\r\n    ++task.awaits;\r\n    task.echoes += ZONE_ECHO_LIMIT;\r\n    return task.id;\r\n}\r\n// Function to call when 'then' calls back on a native promise where onAwaitExpected() had been called.\r\n// Also call this when a native await calls then method on a promise. In that case, don't supply\r\n// sourceTaskId because we already know it refers to current task.\r\nfunction decrementExpectedAwaits(sourceTaskId) {\r\n    if (!task.awaits || (sourceTaskId && sourceTaskId !== task.id))\r\n        return;\r\n    if (--task.awaits === 0)\r\n        task.id = 0;\r\n    task.echoes = task.awaits * ZONE_ECHO_LIMIT; // Will reset echoes to 0 if awaits is 0.\r\n}\r\n// Call from Promise.all() and Promise.race()\r\nfunction onPossibleParallellAsync(possiblePromise) {\r\n    if (task.echoes && possiblePromise && possiblePromise.constructor === NativePromise) {\r\n        incrementExpectedAwaits();\r\n        return possiblePromise.then(function (x) {\r\n            decrementExpectedAwaits();\r\n            return x;\r\n        }, function (e) {\r\n            decrementExpectedAwaits();\r\n            return rejection(e);\r\n        });\r\n    }\r\n    return possiblePromise;\r\n}\r\nfunction zoneEnterEcho(targetZone) {\r\n    ++totalEchoes;\r\n    if (!task.echoes || --task.echoes === 0) {\r\n        task.echoes = task.id = 0; // Cancel zone echoing.\r\n    }\r\n    zoneStack.push(PSD);\r\n    switchToZone(targetZone, true);\r\n}\r\nfunction zoneLeaveEcho() {\r\n    var zone = zoneStack[zoneStack.length - 1];\r\n    zoneStack.pop();\r\n    switchToZone(zone, false);\r\n}\r\nfunction switchToZone(targetZone, bEnteringZone) {\r\n    var currentZone = PSD;\r\n    if (bEnteringZone ? task.echoes && (!zoneEchoes++ || targetZone !== PSD) : zoneEchoes && (!--zoneEchoes || targetZone !== PSD)) {\r\n        // Enter or leave zone asynchronically as well, so that tasks initiated during current tick\r\n        // will be surrounded by the zone when they are invoked.\r\n        enqueueNativeMicroTask(bEnteringZone ? zoneEnterEcho.bind(null, targetZone) : zoneLeaveEcho);\r\n    }\r\n    if (targetZone === PSD)\r\n        return;\r\n    PSD = targetZone; // The actual zone switch occurs at this line.\r\n    // Snapshot on every leave from global zone.\r\n    if (currentZone === globalPSD)\r\n        globalPSD.env = snapShot();\r\n    if (patchGlobalPromise) {\r\n        // Let's patch the global and native Promises (may be same or may be different)\r\n        var GlobalPromise = globalPSD.env.Promise;\r\n        // Swich environments (may be PSD-zone or the global zone. Both apply.)\r\n        var targetEnv = targetZone.env;\r\n        // Change Promise.prototype.then for native and global Promise (they MAY differ on polyfilled environments, but both can be accessed)\r\n        // Must be done on each zone change because the patched method contains targetZone in its closure.\r\n        nativePromiseProto.then = targetEnv.nthen;\r\n        GlobalPromise.prototype.then = targetEnv.gthen;\r\n        if (currentZone.global || targetZone.global) {\r\n            // Leaving or entering global zone. It's time to patch / restore global Promise.\r\n            // Set this Promise to window.Promise so that transiled async functions will work on Firefox, Safari and IE, as well as with Zonejs and angular.\r\n            _global.Promise = targetEnv.Promise;\r\n            // Support Promise.all() etc to work indexedDB-safe also when people are including es6-promise as a module (they might\r\n            // not be accessing global.Promise but a local reference to it)\r\n            GlobalPromise.all = targetEnv.all;\r\n            GlobalPromise.race = targetEnv.race;\r\n            GlobalPromise.resolve = targetEnv.resolve;\r\n            GlobalPromise.reject = targetEnv.reject;\r\n        }\r\n    }\r\n}\r\nfunction snapShot() {\r\n    var GlobalPromise = _global.Promise;\r\n    return patchGlobalPromise ? {\r\n        Promise: GlobalPromise,\r\n        all: GlobalPromise.all,\r\n        race: GlobalPromise.race,\r\n        resolve: GlobalPromise.resolve,\r\n        reject: GlobalPromise.reject,\r\n        nthen: nativePromiseProto.then,\r\n        gthen: GlobalPromise.prototype.then\r\n    } : {};\r\n}\r\nfunction usePSD(psd, fn, a1, a2, a3) {\r\n    var outerScope = PSD;\r\n    try {\r\n        switchToZone(psd, true);\r\n        return fn(a1, a2, a3);\r\n    }\r\n    finally {\r\n        switchToZone(outerScope, false);\r\n    }\r\n}\r\nfunction enqueueNativeMicroTask(job) {\r\n    //\r\n    // Precondition: nativePromiseThen !== undefined\r\n    //\r\n    nativePromiseThen.call(resolvedNativePromise, job);\r\n}\r\nfunction nativeAwaitCompatibleWrap(fn, zone, possibleAwait) {\r\n    return typeof fn !== 'function' ? fn : function () {\r\n        var outerZone = PSD;\r\n        if (possibleAwait)\r\n            incrementExpectedAwaits();\r\n        switchToZone(zone, true);\r\n        try {\r\n            return fn.apply(this, arguments);\r\n        }\r\n        finally {\r\n            switchToZone(outerZone, false);\r\n        }\r\n    };\r\n}\r\nfunction getPatchedPromiseThen(origThen, zone) {\r\n    return function (onResolved, onRejected) {\r\n        return origThen.call(this, nativeAwaitCompatibleWrap(onResolved, zone, false), nativeAwaitCompatibleWrap(onRejected, zone, false));\r\n    };\r\n}\r\nvar UNHANDLEDREJECTION = \"unhandledrejection\";\r\nfunction globalError(err, promise) {\r\n    var rv;\r\n    try {\r\n        rv = promise.onuncatched(err);\r\n    }\r\n    catch (e) { }\r\n    if (rv !== false)\r\n        try {\r\n            var event, eventData = { promise: promise, reason: err };\r\n            if (_global.document && document.createEvent) {\r\n                event = document.createEvent('Event');\r\n                event.initEvent(UNHANDLEDREJECTION, true, true);\r\n                extend(event, eventData);\r\n            }\r\n            else if (_global.CustomEvent) {\r\n                event = new CustomEvent(UNHANDLEDREJECTION, { detail: eventData });\r\n                extend(event, eventData);\r\n            }\r\n            if (event && _global.dispatchEvent) {\r\n                dispatchEvent(event);\r\n                if (!_global.PromiseRejectionEvent && _global.onunhandledrejection)\r\n                    // No native support for PromiseRejectionEvent but user has set window.onunhandledrejection. Manually call it.\r\n                    try {\r\n                        _global.onunhandledrejection(event);\r\n                    }\r\n                    catch (_) { }\r\n            }\r\n            if (!event.defaultPrevented) {\r\n                console.warn(\"Unhandled rejection: \" + (err.stack || err));\r\n            }\r\n        }\r\n        catch (e) { }\r\n}\r\ndoFakeAutoComplete(function () {\r\n    // Simplify the job for VS Intellisense. This piece of code is one of the keys to the new marvellous intellisense support in Dexie.\r\n    asap$1 = function (fn, args) {\r\n        setTimeout(function () { fn.apply(null, args); }, 0);\r\n    };\r\n});\r\nvar rejection = Promise.reject;\n\nfunction Events(ctx) {\r\n    var evs = {};\r\n    var rv = function (eventName, subscriber) {\r\n        if (subscriber) {\r\n            // Subscribe. If additional arguments than just the subscriber was provided, forward them as well.\r\n            var i = arguments.length, args = new Array(i - 1);\r\n            while (--i)\r\n                args[i - 1] = arguments[i];\r\n            evs[eventName].subscribe.apply(null, args);\r\n            return ctx;\r\n        }\r\n        else if (typeof (eventName) === 'string') {\r\n            // Return interface allowing to fire or unsubscribe from event\r\n            return evs[eventName];\r\n        }\r\n    };\r\n    rv.addEventType = add;\r\n    for (var i = 1, l = arguments.length; i < l; ++i) {\r\n        add(arguments[i]);\r\n    }\r\n    return rv;\r\n    function add(eventName, chainFunction, defaultFunction) {\r\n        if (typeof eventName === 'object')\r\n            return addConfiguredEvents(eventName);\r\n        if (!chainFunction)\r\n            chainFunction = reverseStoppableEventChain;\r\n        if (!defaultFunction)\r\n            defaultFunction = nop;\r\n        var context = {\r\n            subscribers: [],\r\n            fire: defaultFunction,\r\n            subscribe: function (cb) {\r\n                if (context.subscribers.indexOf(cb) === -1) {\r\n                    context.subscribers.push(cb);\r\n                    context.fire = chainFunction(context.fire, cb);\r\n                }\r\n            },\r\n            unsubscribe: function (cb) {\r\n                context.subscribers = context.subscribers.filter(function (fn) { return fn !== cb; });\r\n                context.fire = context.subscribers.reduce(chainFunction, defaultFunction);\r\n            }\r\n        };\r\n        evs[eventName] = rv[eventName] = context;\r\n        return context;\r\n    }\r\n    function addConfiguredEvents(cfg) {\r\n        // events(this, {reading: [functionChain, nop]});\r\n        keys(cfg).forEach(function (eventName) {\r\n            var args = cfg[eventName];\r\n            if (isArray(args)) {\r\n                add(eventName, cfg[eventName][0], cfg[eventName][1]);\r\n            }\r\n            else if (args === 'asap') {\r\n                // Rather than approaching event subscription using a functional approach, we here do it in a for-loop where subscriber is executed in its own stack\r\n                // enabling that any exception that occur wont disturb the initiator and also not nescessary be catched and forgotten.\r\n                var context = add(eventName, mirror, function fire() {\r\n                    // Optimazation-safe cloning of arguments into args.\r\n                    var i = arguments.length, args = new Array(i);\r\n                    while (i--)\r\n                        args[i] = arguments[i];\r\n                    // All each subscriber:\r\n                    context.subscribers.forEach(function (fn) {\r\n                        asap(function fireEvent() {\r\n                            fn.apply(null, args);\r\n                        });\r\n                    });\r\n                });\r\n            }\r\n            else\r\n                throw new exceptions.InvalidArgument(\"Invalid event config\");\r\n        });\r\n    }\r\n}\n\n/*\r\n * Dexie.js - a minimalistic wrapper for IndexedDB\r\n * ===============================================\r\n *\r\n * By David Fahlander, david.fahlander@gmail.com\r\n *\r\n * Version {version}, {date}\r\n *\r\n * http://dexie.org\r\n *\r\n * Apache License Version 2.0, January 2004, http://www.apache.org/licenses/\r\n */\r\nvar DEXIE_VERSION = '{version}';\nvar maxString = String.fromCharCode(65535);\nvar maxKey = (function () { try {\r\n    IDBKeyRange.only([[]]);\r\n    return [[]];\r\n}\r\ncatch (e) {\r\n    return maxString;\r\n} })();\nvar minKey = -Infinity;\nvar INVALID_KEY_ARGUMENT = \"Invalid key provided. Keys must be of type string, number, Date or Array<string | number | Date>.\";\nvar STRING_EXPECTED = \"String expected.\";\nvar connections = [];\nvar isIEOrEdge = typeof navigator !== 'undefined' && /(MSIE|Trident|Edge)/.test(navigator.userAgent);\nvar hasIEDeleteObjectStoreBug = isIEOrEdge;\nvar hangsOnDeleteLargeKeyRange = isIEOrEdge;\nvar dexieStackFrameFilter = function (frame) { return !/(dexie\\.js|dexie\\.min\\.js)/.test(frame); };\nvar dbNamesDB; // Global database for backing Dexie.getDatabaseNames() on browser without indexedDB.webkitGetDatabaseNames() \r\n// Init debug\r\nsetDebug(debug, dexieStackFrameFilter);\r\nfunction Dexie(dbName, options) {\r\n    /// <param name=\"options\" type=\"Object\" optional=\"true\">Specify only if you wich to control which addons that should run on this instance</param>\r\n    var deps = Dexie.dependencies;\r\n    var opts = extend({\r\n        // Default Options\r\n        addons: Dexie.addons,\r\n        autoOpen: true,\r\n        indexedDB: deps.indexedDB,\r\n        IDBKeyRange: deps.IDBKeyRange // Backend IDBKeyRange api. Default to IDBShim or browser env.\r\n    }, options);\r\n    var addons = opts.addons, autoOpen = opts.autoOpen, indexedDB = opts.indexedDB, IDBKeyRange = opts.IDBKeyRange;\r\n    var globalSchema = this._dbSchema = {};\r\n    var versions = [];\r\n    var dbStoreNames = [];\r\n    var allTables = {};\r\n    ///<var type=\"IDBDatabase\" />\r\n    var idbdb = null; // Instance of IDBDatabase\r\n    var dbOpenError = null;\r\n    var isBeingOpened = false;\r\n    var onReadyBeingFired = null;\r\n    var openComplete = false;\r\n    var READONLY = \"readonly\", READWRITE = \"readwrite\";\r\n    var db = this;\r\n    var dbReadyResolve, dbReadyPromise = new Promise(function (resolve) {\r\n        dbReadyResolve = resolve;\r\n    }), cancelOpen, openCanceller = new Promise(function (_, reject) {\r\n        cancelOpen = reject;\r\n    });\r\n    var autoSchema = true;\r\n    var hasNativeGetDatabaseNames = !!getNativeGetDatabaseNamesFn(indexedDB), hasGetAll;\r\n    function init() {\r\n        // Default subscribers to \"versionchange\" and \"blocked\".\r\n        // Can be overridden by custom handlers. If custom handlers return false, these default\r\n        // behaviours will be prevented.\r\n        db.on(\"versionchange\", function (ev) {\r\n            // Default behavior for versionchange event is to close database connection.\r\n            // Caller can override this behavior by doing db.on(\"versionchange\", function(){ return false; });\r\n            // Let's not block the other window from making it's delete() or open() call.\r\n            // NOTE! This event is never fired in IE,Edge or Safari.\r\n            if (ev.newVersion > 0)\r\n                console.warn(\"Another connection wants to upgrade database '\" + db.name + \"'. Closing db now to resume the upgrade.\");\r\n            else\r\n                console.warn(\"Another connection wants to delete database '\" + db.name + \"'. Closing db now to resume the delete request.\");\r\n            db.close();\r\n            // In many web applications, it would be recommended to force window.reload()\r\n            // when this event occurs. To do that, subscribe to the versionchange event\r\n            // and call window.location.reload(true) if ev.newVersion > 0 (not a deletion)\r\n            // The reason for this is that your current web app obviously has old schema code that needs\r\n            // to be updated. Another window got a newer version of the app and needs to upgrade DB but\r\n            // your window is blocking it unless we close it here.\r\n        });\r\n        db.on(\"blocked\", function (ev) {\r\n            if (!ev.newVersion || ev.newVersion < ev.oldVersion)\r\n                console.warn(\"Dexie.delete('\" + db.name + \"') was blocked\");\r\n            else\r\n                console.warn(\"Upgrade '\" + db.name + \"' blocked by other connection holding version \" + ev.oldVersion / 10);\r\n        });\r\n    }\r\n    //\r\n    //\r\n    //\r\n    // ------------------------- Versioning Framework---------------------------\r\n    //\r\n    //\r\n    //\r\n    this.version = function (versionNumber) {\r\n        /// <param name=\"versionNumber\" type=\"Number\"></param>\r\n        /// <returns type=\"Version\"></returns>\r\n        if (idbdb || isBeingOpened)\r\n            throw new exceptions.Schema(\"Cannot add version when database is open\");\r\n        this.verno = Math.max(this.verno, versionNumber);\r\n        var versionInstance = versions.filter(function (v) { return v._cfg.version === versionNumber; })[0];\r\n        if (versionInstance)\r\n            return versionInstance;\r\n        versionInstance = new Version(versionNumber);\r\n        versions.push(versionInstance);\r\n        versions.sort(lowerVersionFirst);\r\n        // Disable autoschema mode, as at least one version is specified.\r\n        autoSchema = false;\r\n        return versionInstance;\r\n    };\r\n    function Version(versionNumber) {\r\n        this._cfg = {\r\n            version: versionNumber,\r\n            storesSource: null,\r\n            dbschema: {},\r\n            tables: {},\r\n            contentUpgrade: null\r\n        };\r\n        this.stores({}); // Derive earlier schemas by default.\r\n    }\r\n    extend(Version.prototype, {\r\n        stores: function (stores) {\r\n            /// <summary>\r\n            ///   Defines the schema for a particular version\r\n            /// </summary>\r\n            /// <param name=\"stores\" type=\"Object\">\r\n            /// Example: <br/>\r\n            ///   {users: \"id++,first,last,&amp;username,*email\", <br/>\r\n            ///   passwords: \"id++,&amp;username\"}<br/>\r\n            /// <br/>\r\n            /// Syntax: {Table: \"[primaryKey][++],[&amp;][*]index1,[&amp;][*]index2,...\"}<br/><br/>\r\n            /// Special characters:<br/>\r\n            ///  \"&amp;\"  means unique key, <br/>\r\n            ///  \"*\"  means value is multiEntry, <br/>\r\n            ///  \"++\" means auto-increment and only applicable for primary key <br/>\r\n            /// </param>\r\n            this._cfg.storesSource = this._cfg.storesSource ? extend(this._cfg.storesSource, stores) : stores;\r\n            // Derive stores from earlier versions if they are not explicitely specified as null or a new syntax.\r\n            var storesSpec = {};\r\n            versions.forEach(function (version) {\r\n                extend(storesSpec, version._cfg.storesSource);\r\n            });\r\n            var dbschema = (this._cfg.dbschema = {});\r\n            this._parseStoresSpec(storesSpec, dbschema);\r\n            // Update the latest schema to this version\r\n            // Update API\r\n            globalSchema = db._dbSchema = dbschema;\r\n            removeTablesApi([allTables, db, Transaction.prototype]); // Keep Transaction.prototype even though it should be depr.\r\n            setApiOnPlace([allTables, db, Transaction.prototype, this._cfg.tables], keys(dbschema), dbschema);\r\n            dbStoreNames = keys(dbschema);\r\n            return this;\r\n        },\r\n        upgrade: function (upgradeFunction) {\r\n            /// <param name=\"upgradeFunction\" optional=\"true\">Function that performs upgrading actions.</param>\r\n            var self = this;\r\n            fakeAutoComplete(function () {\r\n                upgradeFunction(db._createTransaction(READWRITE, keys(self._cfg.dbschema), self._cfg.dbschema)); // BUGBUG: No code completion for prev version's tables wont appear.\r\n            });\r\n            this._cfg.contentUpgrade = upgradeFunction;\r\n            return this;\r\n        },\r\n        _parseStoresSpec: function (stores, outSchema) {\r\n            keys(stores).forEach(function (tableName) {\r\n                if (stores[tableName] !== null) {\r\n                    var instanceTemplate = {};\r\n                    var indexes = parseIndexSyntax(stores[tableName]);\r\n                    var primKey = indexes.shift();\r\n                    if (primKey.multi)\r\n                        throw new exceptions.Schema(\"Primary key cannot be multi-valued\");\r\n                    if (primKey.keyPath)\r\n                        setByKeyPath(instanceTemplate, primKey.keyPath, primKey.auto ? 0 : primKey.keyPath);\r\n                    indexes.forEach(function (idx) {\r\n                        if (idx.auto)\r\n                            throw new exceptions.Schema(\"Only primary key can be marked as autoIncrement (++)\");\r\n                        if (!idx.keyPath)\r\n                            throw new exceptions.Schema(\"Index must have a name and cannot be an empty string\");\r\n                        setByKeyPath(instanceTemplate, idx.keyPath, idx.compound ? idx.keyPath.map(function () { return \"\"; }) : \"\");\r\n                    });\r\n                    outSchema[tableName] = new TableSchema(tableName, primKey, indexes, instanceTemplate);\r\n                }\r\n            });\r\n        }\r\n    });\r\n    function runUpgraders(oldVersion, idbtrans, reject) {\r\n        var trans = db._createTransaction(READWRITE, dbStoreNames, globalSchema);\r\n        trans.create(idbtrans);\r\n        trans._completion.catch(reject);\r\n        var rejectTransaction = trans._reject.bind(trans);\r\n        newScope(function () {\r\n            PSD.trans = trans;\r\n            if (oldVersion === 0) {\r\n                // Create tables:\r\n                keys(globalSchema).forEach(function (tableName) {\r\n                    createTable(idbtrans, tableName, globalSchema[tableName].primKey, globalSchema[tableName].indexes);\r\n                });\r\n                Promise.follow(function () { return db.on.populate.fire(trans); }).catch(rejectTransaction);\r\n            }\r\n            else\r\n                updateTablesAndIndexes(oldVersion, trans, idbtrans).catch(rejectTransaction);\r\n        });\r\n    }\r\n    function updateTablesAndIndexes(oldVersion, trans, idbtrans) {\r\n        // Upgrade version to version, step-by-step from oldest to newest version.\r\n        // Each transaction object will contain the table set that was current in that version (but also not-yet-deleted tables from its previous version)\r\n        var queue = [];\r\n        var oldVersionStruct = versions.filter(function (version) { return version._cfg.version === oldVersion; })[0];\r\n        if (!oldVersionStruct)\r\n            throw new exceptions.Upgrade(\"Dexie specification of currently installed DB version is missing\");\r\n        globalSchema = db._dbSchema = oldVersionStruct._cfg.dbschema;\r\n        var anyContentUpgraderHasRun = false;\r\n        var versToRun = versions.filter(function (v) { return v._cfg.version > oldVersion; });\r\n        versToRun.forEach(function (version) {\r\n            /// <param name=\"version\" type=\"Version\"></param>\r\n            queue.push(function () {\r\n                var oldSchema = globalSchema;\r\n                var newSchema = version._cfg.dbschema;\r\n                adjustToExistingIndexNames(oldSchema, idbtrans);\r\n                adjustToExistingIndexNames(newSchema, idbtrans);\r\n                globalSchema = db._dbSchema = newSchema;\r\n                var diff = getSchemaDiff(oldSchema, newSchema);\r\n                // Add tables           \r\n                diff.add.forEach(function (tuple) {\r\n                    createTable(idbtrans, tuple[0], tuple[1].primKey, tuple[1].indexes);\r\n                });\r\n                // Change tables\r\n                diff.change.forEach(function (change) {\r\n                    if (change.recreate) {\r\n                        throw new exceptions.Upgrade(\"Not yet support for changing primary key\");\r\n                    }\r\n                    else {\r\n                        var store = idbtrans.objectStore(change.name);\r\n                        // Add indexes\r\n                        change.add.forEach(function (idx) {\r\n                            addIndex(store, idx);\r\n                        });\r\n                        // Update indexes\r\n                        change.change.forEach(function (idx) {\r\n                            store.deleteIndex(idx.name);\r\n                            addIndex(store, idx);\r\n                        });\r\n                        // Delete indexes\r\n                        change.del.forEach(function (idxName) {\r\n                            store.deleteIndex(idxName);\r\n                        });\r\n                    }\r\n                });\r\n                if (version._cfg.contentUpgrade) {\r\n                    anyContentUpgraderHasRun = true;\r\n                    return Promise.follow(function () {\r\n                        version._cfg.contentUpgrade(trans);\r\n                    });\r\n                }\r\n            });\r\n            queue.push(function (idbtrans) {\r\n                if (!anyContentUpgraderHasRun || !hasIEDeleteObjectStoreBug) {\r\n                    var newSchema = version._cfg.dbschema;\r\n                    // Delete old tables\r\n                    deleteRemovedTables(newSchema, idbtrans);\r\n                }\r\n            });\r\n        });\r\n        // Now, create a queue execution engine\r\n        function runQueue() {\r\n            return queue.length ? Promise.resolve(queue.shift()(trans.idbtrans)).then(runQueue) :\r\n                Promise.resolve();\r\n        }\r\n        return runQueue().then(function () {\r\n            createMissingTables(globalSchema, idbtrans); // At last, make sure to create any missing tables. (Needed by addons that add stores to DB without specifying version)\r\n        });\r\n    }\r\n    function getSchemaDiff(oldSchema, newSchema) {\r\n        var diff = {\r\n            del: [],\r\n            add: [],\r\n            change: [] // Array of {name: tableName, recreate: newDefinition, del: delIndexNames, add: newIndexDefs, change: changedIndexDefs}\r\n        };\r\n        for (var table in oldSchema) {\r\n            if (!newSchema[table])\r\n                diff.del.push(table);\r\n        }\r\n        for (table in newSchema) {\r\n            var oldDef = oldSchema[table], newDef = newSchema[table];\r\n            if (!oldDef) {\r\n                diff.add.push([table, newDef]);\r\n            }\r\n            else {\r\n                var change = {\r\n                    name: table,\r\n                    def: newDef,\r\n                    recreate: false,\r\n                    del: [],\r\n                    add: [],\r\n                    change: []\r\n                };\r\n                if (oldDef.primKey.src !== newDef.primKey.src) {\r\n                    // Primary key has changed. Remove and re-add table.\r\n                    change.recreate = true;\r\n                    diff.change.push(change);\r\n                }\r\n                else {\r\n                    // Same primary key. Just find out what differs:\r\n                    var oldIndexes = oldDef.idxByName;\r\n                    var newIndexes = newDef.idxByName;\r\n                    for (var idxName in oldIndexes) {\r\n                        if (!newIndexes[idxName])\r\n                            change.del.push(idxName);\r\n                    }\r\n                    for (idxName in newIndexes) {\r\n                        var oldIdx = oldIndexes[idxName], newIdx = newIndexes[idxName];\r\n                        if (!oldIdx)\r\n                            change.add.push(newIdx);\r\n                        else if (oldIdx.src !== newIdx.src)\r\n                            change.change.push(newIdx);\r\n                    }\r\n                    if (change.del.length > 0 || change.add.length > 0 || change.change.length > 0) {\r\n                        diff.change.push(change);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return diff;\r\n    }\r\n    function createTable(idbtrans, tableName, primKey, indexes) {\r\n        /// <param name=\"idbtrans\" type=\"IDBTransaction\"></param>\r\n        var store = idbtrans.db.createObjectStore(tableName, primKey.keyPath ? { keyPath: primKey.keyPath, autoIncrement: primKey.auto } : { autoIncrement: primKey.auto });\r\n        indexes.forEach(function (idx) { addIndex(store, idx); });\r\n        return store;\r\n    }\r\n    function createMissingTables(newSchema, idbtrans) {\r\n        keys(newSchema).forEach(function (tableName) {\r\n            if (!idbtrans.db.objectStoreNames.contains(tableName)) {\r\n                createTable(idbtrans, tableName, newSchema[tableName].primKey, newSchema[tableName].indexes);\r\n            }\r\n        });\r\n    }\r\n    function deleteRemovedTables(newSchema, idbtrans) {\r\n        for (var i = 0; i < idbtrans.db.objectStoreNames.length; ++i) {\r\n            var storeName = idbtrans.db.objectStoreNames[i];\r\n            if (newSchema[storeName] == null) {\r\n                idbtrans.db.deleteObjectStore(storeName);\r\n            }\r\n        }\r\n    }\r\n    function addIndex(store, idx) {\r\n        store.createIndex(idx.name, idx.keyPath, { unique: idx.unique, multiEntry: idx.multi });\r\n    }\r\n    //\r\n    //\r\n    //      Dexie Protected API\r\n    //\r\n    //\r\n    this._allTables = allTables;\r\n    this._createTransaction = function (mode, storeNames, dbschema, parentTransaction) {\r\n        return new Transaction(mode, storeNames, dbschema, parentTransaction);\r\n    };\r\n    /* Generate a temporary transaction when db operations are done outside a transactino scope.\r\n    */\r\n    function tempTransaction(mode, storeNames, fn) {\r\n        if (!openComplete && (!PSD.letThrough)) {\r\n            if (!isBeingOpened) {\r\n                if (!autoOpen)\r\n                    return rejection(new exceptions.DatabaseClosed());\r\n                db.open().catch(nop); // Open in background. If if fails, it will be catched by the final promise anyway.\r\n            }\r\n            return dbReadyPromise.then(function () { return tempTransaction(mode, storeNames, fn); });\r\n        }\r\n        else {\r\n            var trans = db._createTransaction(mode, storeNames, globalSchema);\r\n            try {\r\n                trans.create();\r\n            }\r\n            catch (ex) {\r\n                return rejection(ex);\r\n            }\r\n            return trans._promise(mode, function (resolve, reject) {\r\n                return newScope(function () {\r\n                    PSD.trans = trans;\r\n                    return fn(resolve, reject, trans);\r\n                });\r\n            }).then(function (result) {\r\n                // Instead of resolving value directly, wait with resolving it until transaction has completed.\r\n                // Otherwise the data would not be in the DB if requesting it in the then() operation.\r\n                // Specifically, to ensure that the following expression will work:\r\n                //\r\n                //   db.friends.put({name: \"Arne\"}).then(function () {\r\n                //       db.friends.where(\"name\").equals(\"Arne\").count(function(count) {\r\n                //           assert (count === 1);\r\n                //       });\r\n                //   });\r\n                //\r\n                return trans._completion.then(function () { return result; });\r\n            }); /*.catch(err => { // Don't do this as of now. If would affect bulk- and modify methods in a way that could be more intuitive. But wait! Maybe change in next major.\r\n                trans._reject(err);\r\n                return rejection(err);\r\n            });*/\r\n        }\r\n    }\r\n    this._whenReady = function (fn) {\r\n        return fake || openComplete || PSD.letThrough ? fn() : new Promise(function (resolve, reject) {\r\n            if (!isBeingOpened) {\r\n                if (!autoOpen) {\r\n                    reject(new exceptions.DatabaseClosed());\r\n                    return;\r\n                }\r\n                db.open().catch(nop); // Open in background. If if fails, it will be catched by the final promise anyway.\r\n            }\r\n            dbReadyPromise.then(resolve, reject);\r\n        }).then(fn);\r\n    };\r\n    //\r\n    //\r\n    //\r\n    //\r\n    //      Dexie API\r\n    //\r\n    //\r\n    //\r\n    this.verno = 0;\r\n    this.open = function () {\r\n        if (isBeingOpened || idbdb)\r\n            return dbReadyPromise.then(function () { return dbOpenError ? rejection(dbOpenError) : db; });\r\n        debug && (openCanceller._stackHolder = getErrorWithStack()); // Let stacks point to when open() was called rather than where new Dexie() was called.\r\n        isBeingOpened = true;\r\n        dbOpenError = null;\r\n        openComplete = false;\r\n        // Function pointers to call when the core opening process completes.\r\n        var resolveDbReady = dbReadyResolve, \r\n        // upgradeTransaction to abort on failure.\r\n        upgradeTransaction = null;\r\n        return Promise.race([openCanceller, new Promise(function (resolve, reject) {\r\n                doFakeAutoComplete(function () { return resolve(); });\r\n                // Multiply db.verno with 10 will be needed to workaround upgrading bug in IE:\r\n                // IE fails when deleting objectStore after reading from it.\r\n                // A future version of Dexie.js will stopover an intermediate version to workaround this.\r\n                // At that point, we want to be backward compatible. Could have been multiplied with 2, but by using 10, it is easier to map the number to the real version number.\r\n                // If no API, throw!\r\n                if (!indexedDB)\r\n                    throw new exceptions.MissingAPI(\"indexedDB API not found. If using IE10+, make sure to run your code on a server URL \" +\r\n                        \"(not locally). If using old Safari versions, make sure to include indexedDB polyfill.\");\r\n                var req = autoSchema ? indexedDB.open(dbName) : indexedDB.open(dbName, Math.round(db.verno * 10));\r\n                if (!req)\r\n                    throw new exceptions.MissingAPI(\"IndexedDB API not available\"); // May happen in Safari private mode, see https://github.com/dfahlander/Dexie.js/issues/134\r\n                req.onerror = eventRejectHandler(reject);\r\n                req.onblocked = wrap(fireOnBlocked);\r\n                req.onupgradeneeded = wrap(function (e) {\r\n                    upgradeTransaction = req.transaction;\r\n                    if (autoSchema && !db._allowEmptyDB) {\r\n                        // Caller did not specify a version or schema. Doing that is only acceptable for opening alread existing databases.\r\n                        // If onupgradeneeded is called it means database did not exist. Reject the open() promise and make sure that we\r\n                        // do not create a new database by accident here.\r\n                        req.onerror = preventDefault; // Prohibit onabort error from firing before we're done!\r\n                        upgradeTransaction.abort(); // Abort transaction (would hope that this would make DB disappear but it doesnt.)\r\n                        // Close database and delete it.\r\n                        req.result.close();\r\n                        var delreq = indexedDB.deleteDatabase(dbName); // The upgrade transaction is atomic, and javascript is single threaded - meaning that there is no risk that we delete someone elses database here!\r\n                        delreq.onsuccess = delreq.onerror = wrap(function () {\r\n                            reject(new exceptions.NoSuchDatabase(\"Database \" + dbName + \" doesnt exist\"));\r\n                        });\r\n                    }\r\n                    else {\r\n                        upgradeTransaction.onerror = eventRejectHandler(reject);\r\n                        var oldVer = e.oldVersion > Math.pow(2, 62) ? 0 : e.oldVersion; // Safari 8 fix.\r\n                        runUpgraders(oldVer / 10, upgradeTransaction, reject, req);\r\n                    }\r\n                }, reject);\r\n                req.onsuccess = wrap(function () {\r\n                    // Core opening procedure complete. Now let's just record some stuff.\r\n                    upgradeTransaction = null;\r\n                    idbdb = req.result;\r\n                    connections.push(db); // Used for emulating versionchange event on IE/Edge/Safari.\r\n                    if (autoSchema)\r\n                        readGlobalSchema();\r\n                    else if (idbdb.objectStoreNames.length > 0) {\r\n                        try {\r\n                            adjustToExistingIndexNames(globalSchema, idbdb.transaction(safariMultiStoreFix(idbdb.objectStoreNames), READONLY));\r\n                        }\r\n                        catch (e) {\r\n                        }\r\n                    }\r\n                    idbdb.onversionchange = wrap(function (ev) {\r\n                        db._vcFired = true; // detect implementations that not support versionchange (IE/Edge/Safari)\r\n                        db.on(\"versionchange\").fire(ev);\r\n                    });\r\n                    if (!hasNativeGetDatabaseNames && dbName !== '__dbnames') {\r\n                        dbNamesDB.dbnames.put({ name: dbName }).catch(nop);\r\n                    }\r\n                    resolve();\r\n                }, reject);\r\n            })]).then(function () {\r\n            // Before finally resolving the dbReadyPromise and this promise,\r\n            // call and await all on('ready') subscribers:\r\n            // Dexie.vip() makes subscribers able to use the database while being opened.\r\n            // This is a must since these subscribers take part of the opening procedure.\r\n            onReadyBeingFired = [];\r\n            return Promise.resolve(Dexie.vip(db.on.ready.fire)).then(function fireRemainders() {\r\n                if (onReadyBeingFired.length > 0) {\r\n                    // In case additional subscribers to db.on('ready') were added during the time db.on.ready.fire was executed.\r\n                    var remainders = onReadyBeingFired.reduce(promisableChain, nop);\r\n                    onReadyBeingFired = [];\r\n                    return Promise.resolve(Dexie.vip(remainders)).then(fireRemainders);\r\n                }\r\n            });\r\n        }).finally(function () {\r\n            onReadyBeingFired = null;\r\n        }).then(function () {\r\n            // Resolve the db.open() with the db instance.\r\n            isBeingOpened = false;\r\n            return db;\r\n        }).catch(function (err) {\r\n            try {\r\n                // Did we fail within onupgradeneeded? Make sure to abort the upgrade transaction so it doesnt commit.\r\n                upgradeTransaction && upgradeTransaction.abort();\r\n            }\r\n            catch (e) { }\r\n            isBeingOpened = false; // Set before calling db.close() so that it doesnt reject openCanceller again (leads to unhandled rejection event).\r\n            db.close(); // Closes and resets idbdb, removes connections, resets dbReadyPromise and openCanceller so that a later db.open() is fresh.\r\n            // A call to db.close() may have made on-ready subscribers fail. Use dbOpenError if set, since err could be a follow-up error on that.\r\n            dbOpenError = err; // Record the error. It will be used to reject further promises of db operations.\r\n            return rejection(dbOpenError);\r\n        }).finally(function () {\r\n            openComplete = true;\r\n            resolveDbReady(); // dbReadyPromise is resolved no matter if open() rejects or resolved. It's just to wake up waiters.\r\n        });\r\n    };\r\n    this.close = function () {\r\n        var idx = connections.indexOf(db);\r\n        if (idx >= 0)\r\n            connections.splice(idx, 1);\r\n        if (idbdb) {\r\n            try {\r\n                idbdb.close();\r\n            }\r\n            catch (e) { }\r\n            idbdb = null;\r\n        }\r\n        autoOpen = false;\r\n        dbOpenError = new exceptions.DatabaseClosed();\r\n        if (isBeingOpened)\r\n            cancelOpen(dbOpenError);\r\n        // Reset dbReadyPromise promise:\r\n        dbReadyPromise = new Promise(function (resolve) {\r\n            dbReadyResolve = resolve;\r\n        });\r\n        openCanceller = new Promise(function (_, reject) {\r\n            cancelOpen = reject;\r\n        });\r\n    };\r\n    this.delete = function () {\r\n        var hasArguments = arguments.length > 0;\r\n        return new Promise(function (resolve, reject) {\r\n            if (hasArguments)\r\n                throw new exceptions.InvalidArgument(\"Arguments not allowed in db.delete()\");\r\n            if (isBeingOpened) {\r\n                dbReadyPromise.then(doDelete);\r\n            }\r\n            else {\r\n                doDelete();\r\n            }\r\n            function doDelete() {\r\n                db.close();\r\n                var req = indexedDB.deleteDatabase(dbName);\r\n                req.onsuccess = wrap(function () {\r\n                    if (!hasNativeGetDatabaseNames) {\r\n                        dbNamesDB.dbnames.delete(dbName).catch(nop);\r\n                    }\r\n                    resolve();\r\n                });\r\n                req.onerror = eventRejectHandler(reject);\r\n                req.onblocked = fireOnBlocked;\r\n            }\r\n        });\r\n    };\r\n    this.backendDB = function () {\r\n        return idbdb;\r\n    };\r\n    this.isOpen = function () {\r\n        return idbdb !== null;\r\n    };\r\n    this.hasBeenClosed = function () {\r\n        return dbOpenError && (dbOpenError instanceof exceptions.DatabaseClosed);\r\n    };\r\n    this.hasFailed = function () {\r\n        return dbOpenError !== null;\r\n    };\r\n    this.dynamicallyOpened = function () {\r\n        return autoSchema;\r\n    };\r\n    //\r\n    // Properties\r\n    //\r\n    this.name = dbName;\r\n    // db.tables - an array of all Table instances.\r\n    props(this, {\r\n        tables: {\r\n            get: function () {\r\n                /// <returns type=\"Array\" elementType=\"Table\" />\r\n                return keys(allTables).map(function (name) { return allTables[name]; });\r\n            }\r\n        }\r\n    });\r\n    //\r\n    // Events\r\n    //\r\n    this.on = Events(this, \"populate\", \"blocked\", \"versionchange\", { ready: [promisableChain, nop] });\r\n    this.on.ready.subscribe = override(this.on.ready.subscribe, function (subscribe) {\r\n        return function (subscriber, bSticky) {\r\n            Dexie.vip(function () {\r\n                if (openComplete) {\r\n                    // Database already open. Call subscriber asap.\r\n                    if (!dbOpenError)\r\n                        Promise.resolve().then(subscriber);\r\n                    // bSticky: Also subscribe to future open sucesses (after close / reopen) \r\n                    if (bSticky)\r\n                        subscribe(subscriber);\r\n                }\r\n                else if (onReadyBeingFired) {\r\n                    // db.on('ready') subscribers are currently being executed and have not yet resolved or rejected\r\n                    onReadyBeingFired.push(subscriber);\r\n                    if (bSticky)\r\n                        subscribe(subscriber);\r\n                }\r\n                else {\r\n                    // Database not yet open. Subscribe to it.\r\n                    subscribe(subscriber);\r\n                    // If bSticky is falsy, make sure to unsubscribe subscriber when fired once.\r\n                    if (!bSticky)\r\n                        subscribe(function unsubscribe() {\r\n                            db.on.ready.unsubscribe(subscriber);\r\n                            db.on.ready.unsubscribe(unsubscribe);\r\n                        });\r\n                }\r\n            });\r\n        };\r\n    });\r\n    fakeAutoComplete(function () {\r\n        db.on(\"populate\").fire(db._createTransaction(READWRITE, dbStoreNames, globalSchema));\r\n    });\r\n    this.transaction = function () {\r\n        /// <summary>\r\n        ///\r\n        /// </summary>\r\n        /// <param name=\"mode\" type=\"String\">\"r\" for readonly, or \"rw\" for readwrite</param>\r\n        /// <param name=\"tableInstances\">Table instance, Array of Table instances, String or String Array of object stores to include in the transaction</param>\r\n        /// <param name=\"scopeFunc\" type=\"Function\">Function to execute with transaction</param>\r\n        var args = extractTransactionArgs.apply(this, arguments);\r\n        return this._transaction.apply(this, args);\r\n    };\r\n    function extractTransactionArgs(mode, _tableArgs_, scopeFunc) {\r\n        // Let table arguments be all arguments between mode and last argument.\r\n        var i = arguments.length;\r\n        if (i < 2)\r\n            throw new exceptions.InvalidArgument(\"Too few arguments\");\r\n        // Prevent optimzation killer (https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#32-leaking-arguments)\r\n        // and clone arguments except the first one into local var 'args'.\r\n        var args = new Array(i - 1);\r\n        while (--i)\r\n            args[i - 1] = arguments[i];\r\n        // Let scopeFunc be the last argument and pop it so that args now only contain the table arguments.\r\n        scopeFunc = args.pop();\r\n        var tables = flatten(args); // Support using array as middle argument, or a mix of arrays and non-arrays.\r\n        return [mode, tables, scopeFunc];\r\n    }\r\n    this._transaction = function (mode, tables, scopeFunc) {\r\n        var parentTransaction = PSD.trans;\r\n        // Check if parent transactions is bound to this db instance, and if caller wants to reuse it\r\n        if (!parentTransaction || parentTransaction.db !== db || mode.indexOf('!') !== -1)\r\n            parentTransaction = null;\r\n        var onlyIfCompatible = mode.indexOf('?') !== -1;\r\n        mode = mode.replace('!', '').replace('?', ''); // Ok. Will change arguments[0] as well but we wont touch arguments henceforth.\r\n        try {\r\n            //\r\n            // Get storeNames from arguments. Either through given table instances, or through given table names.\r\n            //\r\n            var storeNames = tables.map(function (table) {\r\n                var storeName = table instanceof Table ? table.name : table;\r\n                if (typeof storeName !== 'string')\r\n                    throw new TypeError(\"Invalid table argument to Dexie.transaction(). Only Table or String are allowed\");\r\n                return storeName;\r\n            });\r\n            //\r\n            // Resolve mode. Allow shortcuts \"r\" and \"rw\".\r\n            //\r\n            if (mode == \"r\" || mode == READONLY)\r\n                mode = READONLY;\r\n            else if (mode == \"rw\" || mode == READWRITE)\r\n                mode = READWRITE;\r\n            else\r\n                throw new exceptions.InvalidArgument(\"Invalid transaction mode: \" + mode);\r\n            if (parentTransaction) {\r\n                // Basic checks\r\n                if (parentTransaction.mode === READONLY && mode === READWRITE) {\r\n                    if (onlyIfCompatible) {\r\n                        // Spawn new transaction instead.\r\n                        parentTransaction = null;\r\n                    }\r\n                    else\r\n                        throw new exceptions.SubTransaction(\"Cannot enter a sub-transaction with READWRITE mode when parent transaction is READONLY\");\r\n                }\r\n                if (parentTransaction) {\r\n                    storeNames.forEach(function (storeName) {\r\n                        if (parentTransaction && parentTransaction.storeNames.indexOf(storeName) === -1) {\r\n                            if (onlyIfCompatible) {\r\n                                // Spawn new transaction instead.\r\n                                parentTransaction = null;\r\n                            }\r\n                            else\r\n                                throw new exceptions.SubTransaction(\"Table \" + storeName +\r\n                                    \" not included in parent transaction.\");\r\n                        }\r\n                    });\r\n                }\r\n                if (onlyIfCompatible && parentTransaction && !parentTransaction.active) {\r\n                    // '?' mode should not keep using an inactive transaction.\r\n                    parentTransaction = null;\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            return parentTransaction ?\r\n                parentTransaction._promise(null, function (_, reject) { reject(e); }) :\r\n                rejection(e);\r\n        }\r\n        // If this is a sub-transaction, lock the parent and then launch the sub-transaction.\r\n        return (parentTransaction ?\r\n            parentTransaction._promise(mode, enterTransactionScope, \"lock\") :\r\n            PSD.trans ?\r\n                // no parent transaction despite PSD.trans exists. Make sure also\r\n                // that the zone we create is not a sub-zone of current, because\r\n                // Promise.follow() should not wait for it if so.\r\n                usePSD(PSD.transless, function () { return db._whenReady(enterTransactionScope); }) :\r\n                db._whenReady(enterTransactionScope));\r\n        function enterTransactionScope() {\r\n            return Promise.resolve().then(function () {\r\n                // Keep a pointer to last non-transactional PSD to use if someone calls Dexie.ignoreTransaction().\r\n                var transless = PSD.transless || PSD;\r\n                // Our transaction.\r\n                //return new Promise((resolve, reject) => {\r\n                var trans = db._createTransaction(mode, storeNames, globalSchema, parentTransaction);\r\n                // Let the transaction instance be part of a Promise-specific data (PSD) value.\r\n                var zoneProps = {\r\n                    trans: trans,\r\n                    transless: transless\r\n                };\r\n                if (parentTransaction) {\r\n                    // Emulate transaction commit awareness for inner transaction (must 'commit' when the inner transaction has no more operations ongoing)\r\n                    trans.idbtrans = parentTransaction.idbtrans;\r\n                }\r\n                else {\r\n                    trans.create(); // Create the backend transaction so that complete() or error() will trigger even if no operation is made upon it.\r\n                }\r\n                // Support for native async await.\r\n                if (scopeFunc.constructor === AsyncFunction) {\r\n                    incrementExpectedAwaits();\r\n                }\r\n                var returnValue;\r\n                var promiseFollowed = Promise.follow(function () {\r\n                    // Finally, call the scope function with our table and transaction arguments.\r\n                    returnValue = scopeFunc.call(trans, trans);\r\n                    if (returnValue) {\r\n                        if (returnValue.constructor === NativePromise) {\r\n                            var decrementor = decrementExpectedAwaits.bind(null, null);\r\n                            returnValue.then(decrementor, decrementor);\r\n                        }\r\n                        else if (typeof returnValue.next === 'function' && typeof returnValue.throw === 'function') {\r\n                            // scopeFunc returned an iterator with throw-support. Handle yield as await.\r\n                            returnValue = awaitIterator(returnValue);\r\n                        }\r\n                    }\r\n                }, zoneProps);\r\n                return (returnValue && typeof returnValue.then === 'function' ?\r\n                    // Promise returned. User uses promise-style transactions.\r\n                    Promise.resolve(returnValue).then(function (x) { return trans.active ?\r\n                        x // Transaction still active. Continue.\r\n                        : rejection(new exceptions.PrematureCommit(\"Transaction committed too early. See http://bit.ly/2eVASrf\")); })\r\n                    : promiseFollowed.then(function () { return returnValue; })).then(function (x) {\r\n                    // sub transactions don't react to idbtrans.oncomplete. We must trigger a completion:\r\n                    if (parentTransaction)\r\n                        trans._resolve();\r\n                    // wait for trans._completion\r\n                    // (if root transaction, this means 'complete' event. If sub-transaction, we've just fired it ourselves)\r\n                    return trans._completion.then(function () { return x; });\r\n                }).catch(function (e) {\r\n                    trans._reject(e); // Yes, above then-handler were maybe not called because of an unhandled rejection in scopeFunc!\r\n                    return rejection(e);\r\n                });\r\n            });\r\n        }\r\n    };\r\n    this.table = function (tableName) {\r\n        /// <returns type=\"Table\"></returns>\r\n        if (fake && autoSchema)\r\n            return new Table(tableName);\r\n        if (!hasOwn(allTables, tableName)) {\r\n            throw new exceptions.InvalidTable(\"Table \" + tableName + \" does not exist\");\r\n        }\r\n        return allTables[tableName];\r\n    };\r\n    //\r\n    //\r\n    //\r\n    // Table Class\r\n    //\r\n    //\r\n    //\r\n    function Table(name, tableSchema, optionalTrans) {\r\n        /// <param name=\"name\" type=\"String\"></param>\r\n        this.name = name;\r\n        this.schema = tableSchema;\r\n        this._tx = optionalTrans;\r\n        this.hook = allTables[name] ? allTables[name].hook : Events(null, {\r\n            \"creating\": [hookCreatingChain, nop],\r\n            \"reading\": [pureFunctionChain, mirror],\r\n            \"updating\": [hookUpdatingChain, nop],\r\n            \"deleting\": [hookDeletingChain, nop]\r\n        });\r\n    }\r\n    function BulkErrorHandlerCatchAll(errorList, done, supportHooks) {\r\n        return (supportHooks ? hookedEventRejectHandler : eventRejectHandler)(function (e) {\r\n            errorList.push(e);\r\n            done && done();\r\n        });\r\n    }\r\n    function bulkDelete(idbstore, trans, keysOrTuples, hasDeleteHook, deletingHook) {\r\n        // If hasDeleteHook, keysOrTuples must be an array of tuples: [[key1, value2],[key2,value2],...],\r\n        // else keysOrTuples must be just an array of keys: [key1, key2, ...].\r\n        return new Promise(function (resolve, reject) {\r\n            var len = keysOrTuples.length, lastItem = len - 1;\r\n            if (len === 0)\r\n                return resolve();\r\n            if (!hasDeleteHook) {\r\n                for (var i = 0; i < len; ++i) {\r\n                    var req = idbstore.delete(keysOrTuples[i]);\r\n                    req.onerror = eventRejectHandler(reject);\r\n                    if (i === lastItem)\r\n                        req.onsuccess = wrap(function () { return resolve(); });\r\n                }\r\n            }\r\n            else {\r\n                var hookCtx, errorHandler = hookedEventRejectHandler(reject), successHandler = hookedEventSuccessHandler(null);\r\n                tryCatch(function () {\r\n                    for (var i = 0; i < len; ++i) {\r\n                        hookCtx = { onsuccess: null, onerror: null };\r\n                        var tuple = keysOrTuples[i];\r\n                        deletingHook.call(hookCtx, tuple[0], tuple[1], trans);\r\n                        var req = idbstore.delete(tuple[0]);\r\n                        req._hookCtx = hookCtx;\r\n                        req.onerror = errorHandler;\r\n                        if (i === lastItem)\r\n                            req.onsuccess = hookedEventSuccessHandler(resolve);\r\n                        else\r\n                            req.onsuccess = successHandler;\r\n                    }\r\n                }, function (err) {\r\n                    hookCtx.onerror && hookCtx.onerror(err);\r\n                    throw err;\r\n                });\r\n            }\r\n        });\r\n    }\r\n    props(Table.prototype, {\r\n        //\r\n        // Table Protected Methods\r\n        //\r\n        _trans: function getTransaction(mode, fn, writeLocked) {\r\n            var trans = this._tx || PSD.trans;\r\n            return trans && trans.db === db ?\r\n                trans === PSD.trans ?\r\n                    trans._promise(mode, fn, writeLocked) :\r\n                    newScope(function () { return trans._promise(mode, fn, writeLocked); }, { trans: trans, transless: PSD.transless || PSD }) :\r\n                tempTransaction(mode, [this.name], fn);\r\n        },\r\n        _idbstore: function getIDBObjectStore(mode, fn, writeLocked) {\r\n            if (fake)\r\n                return new Promise(fn); // Simplify the work for Intellisense/Code completion.\r\n            var tableName = this.name;\r\n            function supplyIdbStore(resolve, reject, trans) {\r\n                if (trans.storeNames.indexOf(tableName) === -1)\r\n                    throw new exceptions.NotFound(\"Table\" + tableName + \" not part of transaction\");\r\n                return fn(resolve, reject, trans.idbtrans.objectStore(tableName), trans);\r\n            }\r\n            return this._trans(mode, supplyIdbStore, writeLocked);\r\n        },\r\n        //\r\n        // Table Public Methods\r\n        //\r\n        get: function (keyOrCrit, cb) {\r\n            if (keyOrCrit && keyOrCrit.constructor === Object)\r\n                return this.where(keyOrCrit).first(cb);\r\n            var self = this;\r\n            return this._idbstore(READONLY, function (resolve, reject, idbstore) {\r\n                fake && resolve(self.schema.instanceTemplate);\r\n                var req = idbstore.get(keyOrCrit);\r\n                req.onerror = eventRejectHandler(reject);\r\n                req.onsuccess = wrap(function () {\r\n                    resolve(self.hook.reading.fire(req.result));\r\n                }, reject);\r\n            }).then(cb);\r\n        },\r\n        where: function (indexOrCrit) {\r\n            if (typeof indexOrCrit === 'string')\r\n                return new WhereClause(this, indexOrCrit);\r\n            if (isArray(indexOrCrit))\r\n                return new WhereClause(this, \"[\" + indexOrCrit.join('+') + \"]\");\r\n            // indexOrCrit is an object map of {[keyPath]:value} \r\n            var keyPaths = keys(indexOrCrit);\r\n            if (keyPaths.length === 1)\r\n                // Only one critera. This was the easy case:\r\n                return this\r\n                    .where(keyPaths[0])\r\n                    .equals(indexOrCrit[keyPaths[0]]);\r\n            // Multiple criterias.\r\n            // Let's try finding a compound index that matches all keyPaths in\r\n            // arbritary order:\r\n            var compoundIndex = this.schema.indexes.concat(this.schema.primKey).filter(function (ix) {\r\n                return ix.compound &&\r\n                    keyPaths.every(function (keyPath) { return ix.keyPath.indexOf(keyPath) >= 0; }) &&\r\n                    ix.keyPath.every(function (keyPath) { return keyPaths.indexOf(keyPath) >= 0; });\r\n            })[0];\r\n            if (compoundIndex && maxKey !== maxString)\r\n                // Cool! We found such compound index\r\n                // and this browser supports compound indexes (maxKey !== maxString)!\r\n                return this\r\n                    .where(compoundIndex.name)\r\n                    .equals(compoundIndex.keyPath.map(function (kp) { return indexOrCrit[kp]; }));\r\n            if (!compoundIndex)\r\n                console.warn(\"The query \" + JSON.stringify(indexOrCrit) + \" on \" + this.name + \" would benefit of a \" +\r\n                    (\"compound index [\" + keyPaths.join('+') + \"]\"));\r\n            // Ok, now let's fallback to finding at least one matching index\r\n            // and filter the rest.\r\n            var idxByName = this.schema.idxByName;\r\n            var simpleIndex = keyPaths.reduce(function (r, keyPath) { return [\r\n                r[0] || idxByName[keyPath],\r\n                r[0] || !idxByName[keyPath] ?\r\n                    combine(r[1], function (x) { return '' + getByKeyPath(x, keyPath) ==\r\n                        '' + indexOrCrit[keyPath]; })\r\n                    : r[1]\r\n            ]; }, [null, null]);\r\n            var idx = simpleIndex[0];\r\n            return idx ?\r\n                this.where(idx.name).equals(indexOrCrit[idx.keyPath])\r\n                    .filter(simpleIndex[1]) :\r\n                compoundIndex ?\r\n                    this.filter(simpleIndex[1]) :\r\n                    this.where(keyPaths).equals(''); // No index at all. Fail lazily.\r\n        },\r\n        count: function (cb) {\r\n            return this.toCollection().count(cb);\r\n        },\r\n        offset: function (offset) {\r\n            return this.toCollection().offset(offset);\r\n        },\r\n        limit: function (numRows) {\r\n            return this.toCollection().limit(numRows);\r\n        },\r\n        reverse: function () {\r\n            return this.toCollection().reverse();\r\n        },\r\n        filter: function (filterFunction) {\r\n            return this.toCollection().and(filterFunction);\r\n        },\r\n        each: function (fn) {\r\n            return this.toCollection().each(fn);\r\n        },\r\n        toArray: function (cb) {\r\n            return this.toCollection().toArray(cb);\r\n        },\r\n        orderBy: function (index) {\r\n            return new Collection(new WhereClause(this, isArray(index) ?\r\n                \"[\" + index.join('+') + \"]\" :\r\n                index));\r\n        },\r\n        toCollection: function () {\r\n            return new Collection(new WhereClause(this));\r\n        },\r\n        mapToClass: function (constructor, structure) {\r\n            /// <summary>\r\n            ///     Map table to a javascript constructor function. Objects returned from the database will be instances of this class, making\r\n            ///     it possible to the instanceOf operator as well as extending the class using constructor.prototype.method = function(){...}.\r\n            /// </summary>\r\n            /// <param name=\"constructor\">Constructor function representing the class.</param>\r\n            /// <param name=\"structure\" optional=\"true\">Helps IDE code completion by knowing the members that objects contain and not just the indexes. Also\r\n            /// know what type each member has. Example: {name: String, emailAddresses: [String], password}</param>\r\n            this.schema.mappedClass = constructor;\r\n            var instanceTemplate = Object.create(constructor.prototype);\r\n            if (structure) {\r\n                // structure and instanceTemplate is for IDE code competion only while constructor.prototype is for actual inheritance.\r\n                applyStructure(instanceTemplate, structure);\r\n            }\r\n            this.schema.instanceTemplate = instanceTemplate;\r\n            // Now, subscribe to the when(\"reading\") event to make all objects that come out from this table inherit from given class\r\n            // no matter which method to use for reading (Table.get() or Table.where(...)... )\r\n            var readHook = function (obj) {\r\n                if (!obj)\r\n                    return obj; // No valid object. (Value is null). Return as is.\r\n                // Create a new object that derives from constructor:\r\n                var res = Object.create(constructor.prototype);\r\n                // Clone members:\r\n                for (var m in obj)\r\n                    if (hasOwn(obj, m))\r\n                        try {\r\n                            res[m] = obj[m];\r\n                        }\r\n                        catch (_) { }\r\n                return res;\r\n            };\r\n            if (this.schema.readHook) {\r\n                this.hook.reading.unsubscribe(this.schema.readHook);\r\n            }\r\n            this.schema.readHook = readHook;\r\n            this.hook(\"reading\", readHook);\r\n            return constructor;\r\n        },\r\n        defineClass: function (structure) {\r\n            /// <summary>\r\n            ///     Define all members of the class that represents the table. This will help code completion of when objects are read from the database\r\n            ///     as well as making it possible to extend the prototype of the returned constructor function.\r\n            /// </summary>\r\n            /// <param name=\"structure\">Helps IDE code completion by knowing the members that objects contain and not just the indexes. Also\r\n            /// know what type each member has. Example: {name: String, emailAddresses: [String], properties: {shoeSize: Number}}</param>\r\n            return this.mapToClass(Dexie.defineClass(structure), structure);\r\n        },\r\n        bulkDelete: function (keys$$1) {\r\n            if (this.hook.deleting.fire === nop) {\r\n                return this._idbstore(READWRITE, function (resolve, reject, idbstore, trans) {\r\n                    resolve(bulkDelete(idbstore, trans, keys$$1, false, nop));\r\n                });\r\n            }\r\n            else {\r\n                return this\r\n                    .where(':id')\r\n                    .anyOf(keys$$1)\r\n                    .delete()\r\n                    .then(function () { }); // Resolve with undefined.\r\n            }\r\n        },\r\n        bulkPut: function (objects, keys$$1) {\r\n            var _this = this;\r\n            return this._idbstore(READWRITE, function (resolve, reject, idbstore) {\r\n                if (!idbstore.keyPath && !_this.schema.primKey.auto && !keys$$1)\r\n                    throw new exceptions.InvalidArgument(\"bulkPut() with non-inbound keys requires keys array in second argument\");\r\n                if (idbstore.keyPath && keys$$1)\r\n                    throw new exceptions.InvalidArgument(\"bulkPut(): keys argument invalid on tables with inbound keys\");\r\n                if (keys$$1 && keys$$1.length !== objects.length)\r\n                    throw new exceptions.InvalidArgument(\"Arguments objects and keys must have the same length\");\r\n                if (objects.length === 0)\r\n                    return resolve(); // Caller provided empty list.\r\n                var done = function (result) {\r\n                    if (errorList.length === 0)\r\n                        resolve(result);\r\n                    else\r\n                        reject(new BulkError(_this.name + \".bulkPut(): \" + errorList.length + \" of \" + numObjs + \" operations failed\", errorList));\r\n                };\r\n                var req, errorList = [], errorHandler, numObjs = objects.length, table = _this;\r\n                if (_this.hook.creating.fire === nop && _this.hook.updating.fire === nop) {\r\n                    //\r\n                    // Standard Bulk (no 'creating' or 'updating' hooks to care about)\r\n                    //\r\n                    errorHandler = BulkErrorHandlerCatchAll(errorList);\r\n                    for (var i = 0, l = objects.length; i < l; ++i) {\r\n                        req = keys$$1 ? idbstore.put(objects[i], keys$$1[i]) : idbstore.put(objects[i]);\r\n                        req.onerror = errorHandler;\r\n                    }\r\n                    // Only need to catch success or error on the last operation\r\n                    // according to the IDB spec.\r\n                    req.onerror = BulkErrorHandlerCatchAll(errorList, done);\r\n                    req.onsuccess = eventSuccessHandler(done);\r\n                }\r\n                else {\r\n                    var effectiveKeys = keys$$1 || idbstore.keyPath && objects.map(function (o) { return getByKeyPath(o, idbstore.keyPath); });\r\n                    // Generate map of {[key]: object}\r\n                    var objectLookup = effectiveKeys && arrayToObject(effectiveKeys, function (key, i) { return key != null && [key, objects[i]]; });\r\n                    var promise = !effectiveKeys ?\r\n                        // Auto-incremented key-less objects only without any keys argument.\r\n                        table.bulkAdd(objects) :\r\n                        // Keys provided. Either as inbound in provided objects, or as a keys argument.\r\n                        // Begin with updating those that exists in DB:\r\n                        table.where(':id').anyOf(effectiveKeys.filter(function (key) { return key != null; })).modify(function () {\r\n                            this.value = objectLookup[this.primKey];\r\n                            objectLookup[this.primKey] = null; // Mark as \"don't add this\"\r\n                        }).catch(ModifyError, function (e) {\r\n                            errorList = e.failures; // No need to concat here. These are the first errors added.\r\n                        }).then(function () {\r\n                            // Now, let's examine which items didnt exist so we can add them:\r\n                            var objsToAdd = [], keysToAdd = keys$$1 && [];\r\n                            // Iterate backwards. Why? Because if same key was used twice, just add the last one.\r\n                            for (var i = effectiveKeys.length - 1; i >= 0; --i) {\r\n                                var key = effectiveKeys[i];\r\n                                if (key == null || objectLookup[key]) {\r\n                                    objsToAdd.push(objects[i]);\r\n                                    keys$$1 && keysToAdd.push(key);\r\n                                    if (key != null)\r\n                                        objectLookup[key] = null; // Mark as \"dont add again\"\r\n                                }\r\n                            }\r\n                            // The items are in reverse order so reverse them before adding.\r\n                            // Could be important in order to get auto-incremented keys the way the caller\r\n                            // would expect. Could have used unshift instead of push()/reverse(),\r\n                            // but: http://jsperf.com/unshift-vs-reverse\r\n                            objsToAdd.reverse();\r\n                            keys$$1 && keysToAdd.reverse();\r\n                            return table.bulkAdd(objsToAdd, keysToAdd);\r\n                        }).then(function (lastAddedKey) {\r\n                            // Resolve with key of the last object in given arguments to bulkPut():\r\n                            var lastEffectiveKey = effectiveKeys[effectiveKeys.length - 1]; // Key was provided.\r\n                            return lastEffectiveKey != null ? lastEffectiveKey : lastAddedKey;\r\n                        });\r\n                    promise.then(done).catch(BulkError, function (e) {\r\n                        // Concat failure from ModifyError and reject using our 'done' method.\r\n                        errorList = errorList.concat(e.failures);\r\n                        done();\r\n                    }).catch(reject);\r\n                }\r\n            }, \"locked\"); // If called from transaction scope, lock transaction til all steps are done.\r\n        },\r\n        bulkAdd: function (objects, keys$$1) {\r\n            var self = this, creatingHook = this.hook.creating.fire;\r\n            return this._idbstore(READWRITE, function (resolve, reject, idbstore, trans) {\r\n                if (!idbstore.keyPath && !self.schema.primKey.auto && !keys$$1)\r\n                    throw new exceptions.InvalidArgument(\"bulkAdd() with non-inbound keys requires keys array in second argument\");\r\n                if (idbstore.keyPath && keys$$1)\r\n                    throw new exceptions.InvalidArgument(\"bulkAdd(): keys argument invalid on tables with inbound keys\");\r\n                if (keys$$1 && keys$$1.length !== objects.length)\r\n                    throw new exceptions.InvalidArgument(\"Arguments objects and keys must have the same length\");\r\n                if (objects.length === 0)\r\n                    return resolve(); // Caller provided empty list.\r\n                function done(result) {\r\n                    if (errorList.length === 0)\r\n                        resolve(result);\r\n                    else\r\n                        reject(new BulkError(self.name + \".bulkAdd(): \" + errorList.length + \" of \" + numObjs + \" operations failed\", errorList));\r\n                }\r\n                var req, errorList = [], errorHandler, successHandler, numObjs = objects.length;\r\n                if (creatingHook !== nop) {\r\n                    //\r\n                    // There are subscribers to hook('creating')\r\n                    // Must behave as documented.\r\n                    //\r\n                    var keyPath = idbstore.keyPath, hookCtx;\r\n                    errorHandler = BulkErrorHandlerCatchAll(errorList, null, true);\r\n                    successHandler = hookedEventSuccessHandler(null);\r\n                    tryCatch(function () {\r\n                        for (var i = 0, l = objects.length; i < l; ++i) {\r\n                            hookCtx = { onerror: null, onsuccess: null };\r\n                            var key = keys$$1 && keys$$1[i];\r\n                            var obj = objects[i], effectiveKey = keys$$1 ? key : keyPath ? getByKeyPath(obj, keyPath) : undefined, keyToUse = creatingHook.call(hookCtx, effectiveKey, obj, trans);\r\n                            if (effectiveKey == null && keyToUse != null) {\r\n                                if (keyPath) {\r\n                                    obj = deepClone(obj);\r\n                                    setByKeyPath(obj, keyPath, keyToUse);\r\n                                }\r\n                                else {\r\n                                    key = keyToUse;\r\n                                }\r\n                            }\r\n                            req = key != null ? idbstore.add(obj, key) : idbstore.add(obj);\r\n                            req._hookCtx = hookCtx;\r\n                            if (i < l - 1) {\r\n                                req.onerror = errorHandler;\r\n                                if (hookCtx.onsuccess)\r\n                                    req.onsuccess = successHandler;\r\n                            }\r\n                        }\r\n                    }, function (err) {\r\n                        hookCtx.onerror && hookCtx.onerror(err);\r\n                        throw err;\r\n                    });\r\n                    req.onerror = BulkErrorHandlerCatchAll(errorList, done, true);\r\n                    req.onsuccess = hookedEventSuccessHandler(done);\r\n                }\r\n                else {\r\n                    //\r\n                    // Standard Bulk (no 'creating' hook to care about)\r\n                    //\r\n                    errorHandler = BulkErrorHandlerCatchAll(errorList);\r\n                    for (var i = 0, l = objects.length; i < l; ++i) {\r\n                        req = keys$$1 ? idbstore.add(objects[i], keys$$1[i]) : idbstore.add(objects[i]);\r\n                        req.onerror = errorHandler;\r\n                    }\r\n                    // Only need to catch success or error on the last operation\r\n                    // according to the IDB spec.\r\n                    req.onerror = BulkErrorHandlerCatchAll(errorList, done);\r\n                    req.onsuccess = eventSuccessHandler(done);\r\n                }\r\n            });\r\n        },\r\n        add: function (obj, key) {\r\n            /// <summary>\r\n            ///   Add an object to the database. In case an object with same primary key already exists, the object will not be added.\r\n            /// </summary>\r\n            /// <param name=\"obj\" type=\"Object\">A javascript object to insert</param>\r\n            /// <param name=\"key\" optional=\"true\">Primary key</param>\r\n            var creatingHook = this.hook.creating.fire;\r\n            return this._idbstore(READWRITE, function (resolve, reject, idbstore, trans) {\r\n                var hookCtx = { onsuccess: null, onerror: null };\r\n                if (creatingHook !== nop) {\r\n                    var effectiveKey = (key != null) ? key : (idbstore.keyPath ? getByKeyPath(obj, idbstore.keyPath) : undefined);\r\n                    var keyToUse = creatingHook.call(hookCtx, effectiveKey, obj, trans); // Allow subscribers to when(\"creating\") to generate the key.\r\n                    if (effectiveKey == null && keyToUse != null) {\r\n                        if (idbstore.keyPath)\r\n                            setByKeyPath(obj, idbstore.keyPath, keyToUse);\r\n                        else\r\n                            key = keyToUse;\r\n                    }\r\n                }\r\n                try {\r\n                    var req = key != null ? idbstore.add(obj, key) : idbstore.add(obj);\r\n                    req._hookCtx = hookCtx;\r\n                    req.onerror = hookedEventRejectHandler(reject);\r\n                    req.onsuccess = hookedEventSuccessHandler(function (result) {\r\n                        // TODO: Remove these two lines in next major release (2.0?)\r\n                        // It's no good practice to have side effects on provided parameters\r\n                        var keyPath = idbstore.keyPath;\r\n                        if (keyPath)\r\n                            setByKeyPath(obj, keyPath, result);\r\n                        resolve(result);\r\n                    });\r\n                }\r\n                catch (e) {\r\n                    if (hookCtx.onerror)\r\n                        hookCtx.onerror(e);\r\n                    throw e;\r\n                }\r\n            });\r\n        },\r\n        put: function (obj, key) {\r\n            var _this = this;\r\n            /// <summary>\r\n            ///   Add an object to the database but in case an object with same primary key alread exists, the existing one will get updated.\r\n            /// </summary>\r\n            /// <param name=\"obj\" type=\"Object\">A javascript object to insert or update</param>\r\n            /// <param name=\"key\" optional=\"true\">Primary key</param>\r\n            var creatingHook = this.hook.creating.fire, updatingHook = this.hook.updating.fire;\r\n            if (creatingHook !== nop || updatingHook !== nop) {\r\n                //\r\n                // People listens to when(\"creating\") or when(\"updating\") events!\r\n                // We must know whether the put operation results in an CREATE or UPDATE.\r\n                //\r\n                var keyPath = this.schema.primKey.keyPath;\r\n                var effectiveKey = (key !== undefined) ? key : (keyPath && getByKeyPath(obj, keyPath));\r\n                if (effectiveKey == null)\r\n                    return this.add(obj);\r\n                // Since key is optional, make sure we get it from obj if not provided\r\n                // Primary key exist. Lock transaction and try modifying existing. If nothing modified, call add().\r\n                // clone obj before this async call. If caller modifies obj the line after put(), the IDB spec requires that it should not affect operation.\r\n                obj = deepClone(obj);\r\n                return this._trans(READWRITE, function () {\r\n                    return _this.where(\":id\").equals(effectiveKey).modify(function () {\r\n                        // Replace extisting value with our object\r\n                        // CRUD event firing handled in Collection.modify()\r\n                        this.value = obj;\r\n                    }).then(function (count) { return count === 0 ? _this.add(obj, key) : effectiveKey; });\r\n                }, \"locked\"); // Lock needed because operation is splitted into modify() and add().\r\n            }\r\n            else {\r\n                // Use the standard IDB put() method.\r\n                return this._idbstore(READWRITE, function (resolve, reject, idbstore) {\r\n                    var req = key !== undefined ? idbstore.put(obj, key) : idbstore.put(obj);\r\n                    req.onerror = eventRejectHandler(reject);\r\n                    req.onsuccess = wrap(function (ev) {\r\n                        var keyPath = idbstore.keyPath;\r\n                        if (keyPath)\r\n                            setByKeyPath(obj, keyPath, ev.target.result);\r\n                        resolve(req.result);\r\n                    });\r\n                });\r\n            }\r\n        },\r\n        'delete': function (key) {\r\n            /// <param name=\"key\">Primary key of the object to delete</param>\r\n            if (this.hook.deleting.subscribers.length) {\r\n                // People listens to when(\"deleting\") event. Must implement delete using Collection.delete() that will\r\n                // call the CRUD event. Only Collection.delete() will know whether an object was actually deleted.\r\n                return this.where(\":id\").equals(key).delete();\r\n            }\r\n            else {\r\n                // No one listens. Use standard IDB delete() method.\r\n                return this._idbstore(READWRITE, function (resolve, reject, idbstore) {\r\n                    var req = idbstore.delete(key);\r\n                    req.onerror = eventRejectHandler(reject);\r\n                    req.onsuccess = wrap(function () {\r\n                        resolve(req.result);\r\n                    });\r\n                });\r\n            }\r\n        },\r\n        clear: function () {\r\n            if (this.hook.deleting.subscribers.length) {\r\n                // People listens to when(\"deleting\") event. Must implement delete using Collection.delete() that will\r\n                // call the CRUD event. Only Collection.delete() will knows which objects that are actually deleted.\r\n                return this.toCollection().delete();\r\n            }\r\n            else {\r\n                return this._idbstore(READWRITE, function (resolve, reject, idbstore) {\r\n                    var req = idbstore.clear();\r\n                    req.onerror = eventRejectHandler(reject);\r\n                    req.onsuccess = wrap(function () {\r\n                        resolve(req.result);\r\n                    });\r\n                });\r\n            }\r\n        },\r\n        update: function (keyOrObject, modifications) {\r\n            if (typeof modifications !== 'object' || isArray(modifications))\r\n                throw new exceptions.InvalidArgument(\"Modifications must be an object.\");\r\n            if (typeof keyOrObject === 'object' && !isArray(keyOrObject)) {\r\n                // object to modify. Also modify given object with the modifications:\r\n                keys(modifications).forEach(function (keyPath) {\r\n                    setByKeyPath(keyOrObject, keyPath, modifications[keyPath]);\r\n                });\r\n                var key = getByKeyPath(keyOrObject, this.schema.primKey.keyPath);\r\n                if (key === undefined)\r\n                    return rejection(new exceptions.InvalidArgument(\"Given object does not contain its primary key\"));\r\n                return this.where(\":id\").equals(key).modify(modifications);\r\n            }\r\n            else {\r\n                // key to modify\r\n                return this.where(\":id\").equals(keyOrObject).modify(modifications);\r\n            }\r\n        }\r\n    });\r\n    //\r\n    //\r\n    //\r\n    // Transaction Class\r\n    //\r\n    //\r\n    //\r\n    function Transaction(mode, storeNames, dbschema, parent) {\r\n        var _this = this;\r\n        /// <summary>\r\n        ///    Transaction class. Represents a database transaction. All operations on db goes through a Transaction.\r\n        /// </summary>\r\n        /// <param name=\"mode\" type=\"String\">Any of \"readwrite\" or \"readonly\"</param>\r\n        /// <param name=\"storeNames\" type=\"Array\">Array of table names to operate on</param>\r\n        this.db = db;\r\n        this.mode = mode;\r\n        this.storeNames = storeNames;\r\n        this.idbtrans = null;\r\n        this.on = Events(this, \"complete\", \"error\", \"abort\");\r\n        this.parent = parent || null;\r\n        this.active = true;\r\n        this._reculock = 0;\r\n        this._blockedFuncs = [];\r\n        this._resolve = null;\r\n        this._reject = null;\r\n        this._waitingFor = null;\r\n        this._waitingQueue = null;\r\n        this._spinCount = 0; // Just for debugging waitFor()\r\n        this._completion = new Promise(function (resolve, reject) {\r\n            _this._resolve = resolve;\r\n            _this._reject = reject;\r\n        });\r\n        this._completion.then(function () {\r\n            _this.active = false;\r\n            _this.on.complete.fire();\r\n        }, function (e) {\r\n            var wasActive = _this.active;\r\n            _this.active = false;\r\n            _this.on.error.fire(e);\r\n            _this.parent ?\r\n                _this.parent._reject(e) :\r\n                wasActive && _this.idbtrans && _this.idbtrans.abort();\r\n            return rejection(e); // Indicate we actually DO NOT catch this error.\r\n        });\r\n    }\r\n    props(Transaction.prototype, {\r\n        //\r\n        // Transaction Protected Methods (not required by API users, but needed internally and eventually by dexie extensions)\r\n        //\r\n        _lock: function () {\r\n            assert(!PSD.global); // Locking and unlocking reuires to be within a PSD scope.\r\n            // Temporary set all requests into a pending queue if they are called before database is ready.\r\n            ++this._reculock; // Recursive read/write lock pattern using PSD (Promise Specific Data) instead of TLS (Thread Local Storage)\r\n            if (this._reculock === 1 && !PSD.global)\r\n                PSD.lockOwnerFor = this;\r\n            return this;\r\n        },\r\n        _unlock: function () {\r\n            assert(!PSD.global); // Locking and unlocking reuires to be within a PSD scope.\r\n            if (--this._reculock === 0) {\r\n                if (!PSD.global)\r\n                    PSD.lockOwnerFor = null;\r\n                while (this._blockedFuncs.length > 0 && !this._locked()) {\r\n                    var fnAndPSD = this._blockedFuncs.shift();\r\n                    try {\r\n                        usePSD(fnAndPSD[1], fnAndPSD[0]);\r\n                    }\r\n                    catch (e) { }\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n        _locked: function () {\r\n            // Checks if any write-lock is applied on this transaction.\r\n            // To simplify the Dexie API for extension implementations, we support recursive locks.\r\n            // This is accomplished by using \"Promise Specific Data\" (PSD).\r\n            // PSD data is bound to a Promise and any child Promise emitted through then() or resolve( new Promise() ).\r\n            // PSD is local to code executing on top of the call stacks of any of any code executed by Promise():\r\n            //         * callback given to the Promise() constructor  (function (resolve, reject){...})\r\n            //         * callbacks given to then()/catch()/finally() methods (function (value){...})\r\n            // If creating a new independant Promise instance from within a Promise call stack, the new Promise will derive the PSD from the call stack of the parent Promise.\r\n            // Derivation is done so that the inner PSD __proto__ points to the outer PSD.\r\n            // PSD.lockOwnerFor will point to current transaction object if the currently executing PSD scope owns the lock.\r\n            return this._reculock && PSD.lockOwnerFor !== this;\r\n        },\r\n        create: function (idbtrans) {\r\n            var _this = this;\r\n            if (!this.mode)\r\n                return this;\r\n            assert(!this.idbtrans);\r\n            if (!idbtrans && !idbdb) {\r\n                switch (dbOpenError && dbOpenError.name) {\r\n                    case \"DatabaseClosedError\":\r\n                        // Errors where it is no difference whether it was caused by the user operation or an earlier call to db.open()\r\n                        throw new exceptions.DatabaseClosed(dbOpenError);\r\n                    case \"MissingAPIError\":\r\n                        // Errors where it is no difference whether it was caused by the user operation or an earlier call to db.open()\r\n                        throw new exceptions.MissingAPI(dbOpenError.message, dbOpenError);\r\n                    default:\r\n                        // Make it clear that the user operation was not what caused the error - the error had occurred earlier on db.open()!\r\n                        throw new exceptions.OpenFailed(dbOpenError);\r\n                }\r\n            }\r\n            if (!this.active)\r\n                throw new exceptions.TransactionInactive();\r\n            assert(this._completion._state === null);\r\n            idbtrans = this.idbtrans = idbtrans || idbdb.transaction(safariMultiStoreFix(this.storeNames), this.mode);\r\n            idbtrans.onerror = wrap(function (ev) {\r\n                preventDefault(ev); // Prohibit default bubbling to window.error\r\n                _this._reject(idbtrans.error);\r\n            });\r\n            idbtrans.onabort = wrap(function (ev) {\r\n                preventDefault(ev);\r\n                _this.active && _this._reject(new exceptions.Abort());\r\n                _this.active = false;\r\n                _this.on(\"abort\").fire(ev);\r\n            });\r\n            idbtrans.oncomplete = wrap(function () {\r\n                _this.active = false;\r\n                _this._resolve();\r\n            });\r\n            return this;\r\n        },\r\n        _promise: function (mode, fn, bWriteLock) {\r\n            var _this = this;\r\n            if (mode === READWRITE && this.mode !== READWRITE)\r\n                return rejection(new exceptions.ReadOnly(\"Transaction is readonly\"));\r\n            if (!this.active)\r\n                return rejection(new exceptions.TransactionInactive());\r\n            if (this._locked()) {\r\n                return new Promise(function (resolve, reject) {\r\n                    _this._blockedFuncs.push([function () {\r\n                            _this._promise(mode, fn, bWriteLock).then(resolve, reject);\r\n                        }, PSD]);\r\n                });\r\n            }\r\n            else if (bWriteLock) {\r\n                return newScope(function () {\r\n                    var p = new Promise(function (resolve, reject) {\r\n                        _this._lock();\r\n                        var rv = fn(resolve, reject, _this);\r\n                        if (rv && rv.then)\r\n                            rv.then(resolve, reject);\r\n                    });\r\n                    p.finally(function () { return _this._unlock(); });\r\n                    p._lib = true;\r\n                    return p;\r\n                });\r\n            }\r\n            else {\r\n                var p = new Promise(function (resolve, reject) {\r\n                    var rv = fn(resolve, reject, _this);\r\n                    if (rv && rv.then)\r\n                        rv.then(resolve, reject);\r\n                });\r\n                p._lib = true;\r\n                return p;\r\n            }\r\n        },\r\n        _root: function () {\r\n            return this.parent ? this.parent._root() : this;\r\n        },\r\n        waitFor: function (promise) {\r\n            // Always operate on the root transaction (in case this is a sub stransaction)\r\n            var root = this._root();\r\n            // For stability reasons, convert parameter to promise no matter what type is passed to waitFor().\r\n            // (We must be able to call .then() on it.)\r\n            promise = Promise.resolve(promise);\r\n            if (root._waitingFor) {\r\n                // Already called waitFor(). Wait for both to complete.\r\n                root._waitingFor = root._waitingFor.then(function () { return promise; });\r\n            }\r\n            else {\r\n                // We're not in waiting state. Start waiting state.\r\n                root._waitingFor = promise;\r\n                root._waitingQueue = [];\r\n                // Start interacting with indexedDB until promise completes:\r\n                var store = root.idbtrans.objectStore(root.storeNames[0]);\r\n                (function spin() {\r\n                    ++root._spinCount; // For debugging only\r\n                    while (root._waitingQueue.length)\r\n                        (root._waitingQueue.shift())();\r\n                    if (root._waitingFor)\r\n                        store.get(-Infinity).onsuccess = spin;\r\n                }());\r\n            }\r\n            var currentWaitPromise = root._waitingFor;\r\n            return new Promise(function (resolve, reject) {\r\n                promise.then(function (res) { return root._waitingQueue.push(wrap(resolve.bind(null, res))); }, function (err) { return root._waitingQueue.push(wrap(reject.bind(null, err))); }).finally(function () {\r\n                    if (root._waitingFor === currentWaitPromise) {\r\n                        // No one added a wait after us. Safe to stop the spinning.\r\n                        root._waitingFor = null;\r\n                    }\r\n                });\r\n            });\r\n        },\r\n        //\r\n        // Transaction Public Properties and Methods\r\n        //\r\n        abort: function () {\r\n            this.active && this._reject(new exceptions.Abort());\r\n            this.active = false;\r\n        },\r\n        tables: {\r\n            get: deprecated(\"Transaction.tables\", function () { return allTables; })\r\n        },\r\n        table: function (name) {\r\n            var table = db.table(name); // Don't check that table is part of transaction. It must fail lazily!\r\n            return new Table(name, table.schema, this);\r\n        }\r\n    });\r\n    //\r\n    //\r\n    //\r\n    // WhereClause\r\n    //\r\n    //\r\n    //\r\n    function WhereClause(table, index, orCollection) {\r\n        /// <param name=\"table\" type=\"Table\"></param>\r\n        /// <param name=\"index\" type=\"String\" optional=\"true\"></param>\r\n        /// <param name=\"orCollection\" type=\"Collection\" optional=\"true\"></param>\r\n        this._ctx = {\r\n            table: table,\r\n            index: index === \":id\" ? null : index,\r\n            or: orCollection\r\n        };\r\n    }\r\n    props(WhereClause.prototype, function () {\r\n        // WhereClause private methods\r\n        function fail(collectionOrWhereClause, err, T) {\r\n            var collection = collectionOrWhereClause instanceof WhereClause ?\r\n                new Collection(collectionOrWhereClause) :\r\n                collectionOrWhereClause;\r\n            collection._ctx.error = T ? new T(err) : new TypeError(err);\r\n            return collection;\r\n        }\r\n        function emptyCollection(whereClause) {\r\n            return new Collection(whereClause, function () { return IDBKeyRange.only(\"\"); }).limit(0);\r\n        }\r\n        function upperFactory(dir) {\r\n            return dir === \"next\" ? function (s) { return s.toUpperCase(); } : function (s) { return s.toLowerCase(); };\r\n        }\r\n        function lowerFactory(dir) {\r\n            return dir === \"next\" ? function (s) { return s.toLowerCase(); } : function (s) { return s.toUpperCase(); };\r\n        }\r\n        function nextCasing(key, lowerKey, upperNeedle, lowerNeedle, cmp, dir) {\r\n            var length = Math.min(key.length, lowerNeedle.length);\r\n            var llp = -1;\r\n            for (var i = 0; i < length; ++i) {\r\n                var lwrKeyChar = lowerKey[i];\r\n                if (lwrKeyChar !== lowerNeedle[i]) {\r\n                    if (cmp(key[i], upperNeedle[i]) < 0)\r\n                        return key.substr(0, i) + upperNeedle[i] + upperNeedle.substr(i + 1);\r\n                    if (cmp(key[i], lowerNeedle[i]) < 0)\r\n                        return key.substr(0, i) + lowerNeedle[i] + upperNeedle.substr(i + 1);\r\n                    if (llp >= 0)\r\n                        return key.substr(0, llp) + lowerKey[llp] + upperNeedle.substr(llp + 1);\r\n                    return null;\r\n                }\r\n                if (cmp(key[i], lwrKeyChar) < 0)\r\n                    llp = i;\r\n            }\r\n            if (length < lowerNeedle.length && dir === \"next\")\r\n                return key + upperNeedle.substr(key.length);\r\n            if (length < key.length && dir === \"prev\")\r\n                return key.substr(0, upperNeedle.length);\r\n            return (llp < 0 ? null : key.substr(0, llp) + lowerNeedle[llp] + upperNeedle.substr(llp + 1));\r\n        }\r\n        function addIgnoreCaseAlgorithm(whereClause, match, needles, suffix) {\r\n            /// <param name=\"needles\" type=\"Array\" elementType=\"String\"></param>\r\n            var upper, lower, compare, upperNeedles, lowerNeedles, direction, nextKeySuffix, needlesLen = needles.length;\r\n            if (!needles.every(function (s) { return typeof s === 'string'; })) {\r\n                return fail(whereClause, STRING_EXPECTED);\r\n            }\r\n            function initDirection(dir) {\r\n                upper = upperFactory(dir);\r\n                lower = lowerFactory(dir);\r\n                compare = (dir === \"next\" ? simpleCompare : simpleCompareReverse);\r\n                var needleBounds = needles.map(function (needle) {\r\n                    return { lower: lower(needle), upper: upper(needle) };\r\n                }).sort(function (a, b) {\r\n                    return compare(a.lower, b.lower);\r\n                });\r\n                upperNeedles = needleBounds.map(function (nb) { return nb.upper; });\r\n                lowerNeedles = needleBounds.map(function (nb) { return nb.lower; });\r\n                direction = dir;\r\n                nextKeySuffix = (dir === \"next\" ? \"\" : suffix);\r\n            }\r\n            initDirection(\"next\");\r\n            var c = new Collection(whereClause, function () {\r\n                return IDBKeyRange.bound(upperNeedles[0], lowerNeedles[needlesLen - 1] + suffix);\r\n            });\r\n            c._ondirectionchange = function (direction) {\r\n                // This event onlys occur before filter is called the first time.\r\n                initDirection(direction);\r\n            };\r\n            var firstPossibleNeedle = 0;\r\n            c._addAlgorithm(function (cursor, advance, resolve) {\r\n                /// <param name=\"cursor\" type=\"IDBCursor\"></param>\r\n                /// <param name=\"advance\" type=\"Function\"></param>\r\n                /// <param name=\"resolve\" type=\"Function\"></param>\r\n                var key = cursor.key;\r\n                if (typeof key !== 'string')\r\n                    return false;\r\n                var lowerKey = lower(key);\r\n                if (match(lowerKey, lowerNeedles, firstPossibleNeedle)) {\r\n                    return true;\r\n                }\r\n                else {\r\n                    var lowestPossibleCasing = null;\r\n                    for (var i = firstPossibleNeedle; i < needlesLen; ++i) {\r\n                        var casing = nextCasing(key, lowerKey, upperNeedles[i], lowerNeedles[i], compare, direction);\r\n                        if (casing === null && lowestPossibleCasing === null)\r\n                            firstPossibleNeedle = i + 1;\r\n                        else if (lowestPossibleCasing === null || compare(lowestPossibleCasing, casing) > 0) {\r\n                            lowestPossibleCasing = casing;\r\n                        }\r\n                    }\r\n                    if (lowestPossibleCasing !== null) {\r\n                        advance(function () { cursor.continue(lowestPossibleCasing + nextKeySuffix); });\r\n                    }\r\n                    else {\r\n                        advance(resolve);\r\n                    }\r\n                    return false;\r\n                }\r\n            });\r\n            return c;\r\n        }\r\n        //\r\n        // WhereClause public methods\r\n        //\r\n        return {\r\n            between: function (lower, upper, includeLower, includeUpper) {\r\n                /// <summary>\r\n                ///     Filter out records whose where-field lays between given lower and upper values. Applies to Strings, Numbers and Dates.\r\n                /// </summary>\r\n                /// <param name=\"lower\"></param>\r\n                /// <param name=\"upper\"></param>\r\n                /// <param name=\"includeLower\" optional=\"true\">Whether items that equals lower should be included. Default true.</param>\r\n                /// <param name=\"includeUpper\" optional=\"true\">Whether items that equals upper should be included. Default false.</param>\r\n                /// <returns type=\"Collection\"></returns>\r\n                includeLower = includeLower !== false; // Default to true\r\n                includeUpper = includeUpper === true; // Default to false\r\n                try {\r\n                    if ((cmp(lower, upper) > 0) ||\r\n                        (cmp(lower, upper) === 0 && (includeLower || includeUpper) && !(includeLower && includeUpper)))\r\n                        return emptyCollection(this); // Workaround for idiotic W3C Specification that DataError must be thrown if lower > upper. The natural result would be to return an empty collection.\r\n                    return new Collection(this, function () { return IDBKeyRange.bound(lower, upper, !includeLower, !includeUpper); });\r\n                }\r\n                catch (e) {\r\n                    return fail(this, INVALID_KEY_ARGUMENT);\r\n                }\r\n            },\r\n            equals: function (value) {\r\n                return new Collection(this, function () { return IDBKeyRange.only(value); });\r\n            },\r\n            above: function (value) {\r\n                return new Collection(this, function () { return IDBKeyRange.lowerBound(value, true); });\r\n            },\r\n            aboveOrEqual: function (value) {\r\n                return new Collection(this, function () { return IDBKeyRange.lowerBound(value); });\r\n            },\r\n            below: function (value) {\r\n                return new Collection(this, function () { return IDBKeyRange.upperBound(value, true); });\r\n            },\r\n            belowOrEqual: function (value) {\r\n                return new Collection(this, function () { return IDBKeyRange.upperBound(value); });\r\n            },\r\n            startsWith: function (str) {\r\n                /// <param name=\"str\" type=\"String\"></param>\r\n                if (typeof str !== 'string')\r\n                    return fail(this, STRING_EXPECTED);\r\n                return this.between(str, str + maxString, true, true);\r\n            },\r\n            startsWithIgnoreCase: function (str) {\r\n                /// <param name=\"str\" type=\"String\"></param>\r\n                if (str === \"\")\r\n                    return this.startsWith(str);\r\n                return addIgnoreCaseAlgorithm(this, function (x, a) { return x.indexOf(a[0]) === 0; }, [str], maxString);\r\n            },\r\n            equalsIgnoreCase: function (str) {\r\n                /// <param name=\"str\" type=\"String\"></param>\r\n                return addIgnoreCaseAlgorithm(this, function (x, a) { return x === a[0]; }, [str], \"\");\r\n            },\r\n            anyOfIgnoreCase: function () {\r\n                var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);\r\n                if (set.length === 0)\r\n                    return emptyCollection(this);\r\n                return addIgnoreCaseAlgorithm(this, function (x, a) { return a.indexOf(x) !== -1; }, set, \"\");\r\n            },\r\n            startsWithAnyOfIgnoreCase: function () {\r\n                var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);\r\n                if (set.length === 0)\r\n                    return emptyCollection(this);\r\n                return addIgnoreCaseAlgorithm(this, function (x, a) {\r\n                    return a.some(function (n) {\r\n                        return x.indexOf(n) === 0;\r\n                    });\r\n                }, set, maxString);\r\n            },\r\n            anyOf: function () {\r\n                var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);\r\n                var compare = ascending;\r\n                try {\r\n                    set.sort(compare);\r\n                }\r\n                catch (e) {\r\n                    return fail(this, INVALID_KEY_ARGUMENT);\r\n                }\r\n                if (set.length === 0)\r\n                    return emptyCollection(this);\r\n                var c = new Collection(this, function () { return IDBKeyRange.bound(set[0], set[set.length - 1]); });\r\n                c._ondirectionchange = function (direction) {\r\n                    compare = (direction === \"next\" ? ascending : descending);\r\n                    set.sort(compare);\r\n                };\r\n                var i = 0;\r\n                c._addAlgorithm(function (cursor, advance, resolve) {\r\n                    var key = cursor.key;\r\n                    while (compare(key, set[i]) > 0) {\r\n                        // The cursor has passed beyond this key. Check next.\r\n                        ++i;\r\n                        if (i === set.length) {\r\n                            // There is no next. Stop searching.\r\n                            advance(resolve);\r\n                            return false;\r\n                        }\r\n                    }\r\n                    if (compare(key, set[i]) === 0) {\r\n                        // The current cursor value should be included and we should continue a single step in case next item has the same key or possibly our next key in set.\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        // cursor.key not yet at set[i]. Forward cursor to the next key to hunt for.\r\n                        advance(function () { cursor.continue(set[i]); });\r\n                        return false;\r\n                    }\r\n                });\r\n                return c;\r\n            },\r\n            notEqual: function (value) {\r\n                return this.inAnyRange([[minKey, value], [value, maxKey]], { includeLowers: false, includeUppers: false });\r\n            },\r\n            noneOf: function () {\r\n                var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);\r\n                if (set.length === 0)\r\n                    return new Collection(this); // Return entire collection.\r\n                try {\r\n                    set.sort(ascending);\r\n                }\r\n                catch (e) {\r\n                    return fail(this, INVALID_KEY_ARGUMENT);\r\n                }\r\n                // Transform [\"a\",\"b\",\"c\"] to a set of ranges for between/above/below: [[minKey,\"a\"], [\"a\",\"b\"], [\"b\",\"c\"], [\"c\",maxKey]]\r\n                var ranges = set.reduce(function (res, val) { return res ? res.concat([[res[res.length - 1][1], val]]) : [[minKey, val]]; }, null);\r\n                ranges.push([set[set.length - 1], maxKey]);\r\n                return this.inAnyRange(ranges, { includeLowers: false, includeUppers: false });\r\n            },\r\n            /** Filter out values withing given set of ranges.\r\n            * Example, give children and elders a rebate of 50%:\r\n            *\r\n            *   db.friends.where('age').inAnyRange([[0,18],[65,Infinity]]).modify({Rebate: 1/2});\r\n            *\r\n            * @param {(string|number|Date|Array)[][]} ranges\r\n            * @param {{includeLowers: boolean, includeUppers: boolean}} options\r\n            */\r\n            inAnyRange: function (ranges, options) {\r\n                if (ranges.length === 0)\r\n                    return emptyCollection(this);\r\n                if (!ranges.every(function (range) { return range[0] !== undefined && range[1] !== undefined && ascending(range[0], range[1]) <= 0; })) {\r\n                    return fail(this, \"First argument to inAnyRange() must be an Array of two-value Arrays [lower,upper] where upper must not be lower than lower\", exceptions.InvalidArgument);\r\n                }\r\n                var includeLowers = !options || options.includeLowers !== false; // Default to true\r\n                var includeUppers = options && options.includeUppers === true; // Default to false\r\n                function addRange(ranges, newRange) {\r\n                    for (var i = 0, l = ranges.length; i < l; ++i) {\r\n                        var range = ranges[i];\r\n                        if (cmp(newRange[0], range[1]) < 0 && cmp(newRange[1], range[0]) > 0) {\r\n                            range[0] = min(range[0], newRange[0]);\r\n                            range[1] = max(range[1], newRange[1]);\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (i === l)\r\n                        ranges.push(newRange);\r\n                    return ranges;\r\n                }\r\n                var sortDirection = ascending;\r\n                function rangeSorter(a, b) { return sortDirection(a[0], b[0]); }\r\n                // Join overlapping ranges\r\n                var set;\r\n                try {\r\n                    set = ranges.reduce(addRange, []);\r\n                    set.sort(rangeSorter);\r\n                }\r\n                catch (ex) {\r\n                    return fail(this, INVALID_KEY_ARGUMENT);\r\n                }\r\n                var i = 0;\r\n                var keyIsBeyondCurrentEntry = includeUppers ?\r\n                    function (key) { return ascending(key, set[i][1]) > 0; } :\r\n                    function (key) { return ascending(key, set[i][1]) >= 0; };\r\n                var keyIsBeforeCurrentEntry = includeLowers ?\r\n                    function (key) { return descending(key, set[i][0]) > 0; } :\r\n                    function (key) { return descending(key, set[i][0]) >= 0; };\r\n                function keyWithinCurrentRange(key) {\r\n                    return !keyIsBeyondCurrentEntry(key) && !keyIsBeforeCurrentEntry(key);\r\n                }\r\n                var checkKey = keyIsBeyondCurrentEntry;\r\n                var c = new Collection(this, function () {\r\n                    return IDBKeyRange.bound(set[0][0], set[set.length - 1][1], !includeLowers, !includeUppers);\r\n                });\r\n                c._ondirectionchange = function (direction) {\r\n                    if (direction === \"next\") {\r\n                        checkKey = keyIsBeyondCurrentEntry;\r\n                        sortDirection = ascending;\r\n                    }\r\n                    else {\r\n                        checkKey = keyIsBeforeCurrentEntry;\r\n                        sortDirection = descending;\r\n                    }\r\n                    set.sort(rangeSorter);\r\n                };\r\n                c._addAlgorithm(function (cursor, advance, resolve) {\r\n                    var key = cursor.key;\r\n                    while (checkKey(key)) {\r\n                        // The cursor has passed beyond this key. Check next.\r\n                        ++i;\r\n                        if (i === set.length) {\r\n                            // There is no next. Stop searching.\r\n                            advance(resolve);\r\n                            return false;\r\n                        }\r\n                    }\r\n                    if (keyWithinCurrentRange(key)) {\r\n                        // The current cursor value should be included and we should continue a single step in case next item has the same key or possibly our next key in set.\r\n                        return true;\r\n                    }\r\n                    else if (cmp(key, set[i][1]) === 0 || cmp(key, set[i][0]) === 0) {\r\n                        // includeUpper or includeLower is false so keyWithinCurrentRange() returns false even though we are at range border.\r\n                        // Continue to next key but don't include this one.\r\n                        return false;\r\n                    }\r\n                    else {\r\n                        // cursor.key not yet at set[i]. Forward cursor to the next key to hunt for.\r\n                        advance(function () {\r\n                            if (sortDirection === ascending)\r\n                                cursor.continue(set[i][0]);\r\n                            else\r\n                                cursor.continue(set[i][1]);\r\n                        });\r\n                        return false;\r\n                    }\r\n                });\r\n                return c;\r\n            },\r\n            startsWithAnyOf: function () {\r\n                var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);\r\n                if (!set.every(function (s) { return typeof s === 'string'; })) {\r\n                    return fail(this, \"startsWithAnyOf() only works with strings\");\r\n                }\r\n                if (set.length === 0)\r\n                    return emptyCollection(this);\r\n                return this.inAnyRange(set.map(function (str) {\r\n                    return [str, str + maxString];\r\n                }));\r\n            }\r\n        };\r\n    });\r\n    //\r\n    //\r\n    //\r\n    // Collection Class\r\n    //\r\n    //\r\n    //\r\n    function Collection(whereClause, keyRangeGenerator) {\r\n        /// <summary>\r\n        ///\r\n        /// </summary>\r\n        /// <param name=\"whereClause\" type=\"WhereClause\">Where clause instance</param>\r\n        /// <param name=\"keyRangeGenerator\" value=\"function(){ return IDBKeyRange.bound(0,1);}\" optional=\"true\"></param>\r\n        var keyRange = null, error = null;\r\n        if (keyRangeGenerator)\r\n            try {\r\n                keyRange = keyRangeGenerator();\r\n            }\r\n            catch (ex) {\r\n                error = ex;\r\n            }\r\n        var whereCtx = whereClause._ctx, table = whereCtx.table;\r\n        this._ctx = {\r\n            table: table,\r\n            index: whereCtx.index,\r\n            isPrimKey: (!whereCtx.index || (table.schema.primKey.keyPath && whereCtx.index === table.schema.primKey.name)),\r\n            range: keyRange,\r\n            keysOnly: false,\r\n            dir: \"next\",\r\n            unique: \"\",\r\n            algorithm: null,\r\n            filter: null,\r\n            replayFilter: null,\r\n            justLimit: true,\r\n            isMatch: null,\r\n            offset: 0,\r\n            limit: Infinity,\r\n            error: error,\r\n            or: whereCtx.or,\r\n            valueMapper: table.hook.reading.fire\r\n        };\r\n    }\r\n    function isPlainKeyRange(ctx, ignoreLimitFilter) {\r\n        return !(ctx.filter || ctx.algorithm || ctx.or) &&\r\n            (ignoreLimitFilter ? ctx.justLimit : !ctx.replayFilter);\r\n    }\r\n    props(Collection.prototype, function () {\r\n        //\r\n        // Collection Private Functions\r\n        //\r\n        function addFilter(ctx, fn) {\r\n            ctx.filter = combine(ctx.filter, fn);\r\n        }\r\n        function addReplayFilter(ctx, factory, isLimitFilter) {\r\n            var curr = ctx.replayFilter;\r\n            ctx.replayFilter = curr ? function () { return combine(curr(), factory()); } : factory;\r\n            ctx.justLimit = isLimitFilter && !curr;\r\n        }\r\n        function addMatchFilter(ctx, fn) {\r\n            ctx.isMatch = combine(ctx.isMatch, fn);\r\n        }\r\n        /** @param ctx {\r\n         *      isPrimKey: boolean,\r\n         *      table: Table,\r\n         *      index: string\r\n         * }\r\n         * @param store IDBObjectStore\r\n         **/\r\n        function getIndexOrStore(ctx, store) {\r\n            if (ctx.isPrimKey)\r\n                return store;\r\n            var indexSpec = ctx.table.schema.idxByName[ctx.index];\r\n            if (!indexSpec)\r\n                throw new exceptions.Schema(\"KeyPath \" + ctx.index + \" on object store \" + store.name + \" is not indexed\");\r\n            return store.index(indexSpec.name);\r\n        }\r\n        /** @param ctx {\r\n         *      isPrimKey: boolean,\r\n         *      table: Table,\r\n         *      index: string,\r\n         *      keysOnly: boolean,\r\n         *      range?: IDBKeyRange,\r\n         *      dir: \"next\" | \"prev\"\r\n         * }\r\n         */\r\n        function openCursor(ctx, store) {\r\n            var idxOrStore = getIndexOrStore(ctx, store);\r\n            return ctx.keysOnly && 'openKeyCursor' in idxOrStore ?\r\n                idxOrStore.openKeyCursor(ctx.range || null, ctx.dir + ctx.unique) :\r\n                idxOrStore.openCursor(ctx.range || null, ctx.dir + ctx.unique);\r\n        }\r\n        function iter(ctx, fn, resolve, reject, idbstore) {\r\n            var filter = ctx.replayFilter ? combine(ctx.filter, ctx.replayFilter()) : ctx.filter;\r\n            if (!ctx.or) {\r\n                iterate(openCursor(ctx, idbstore), combine(ctx.algorithm, filter), fn, resolve, reject, !ctx.keysOnly && ctx.valueMapper);\r\n            }\r\n            else\r\n                (function () {\r\n                    var set = {};\r\n                    var resolved = 0;\r\n                    function resolveboth() {\r\n                        if (++resolved === 2)\r\n                            resolve(); // Seems like we just support or btwn max 2 expressions, but there are no limit because we do recursion.\r\n                    }\r\n                    function union(item, cursor, advance) {\r\n                        if (!filter || filter(cursor, advance, resolveboth, reject)) {\r\n                            var key = cursor.primaryKey.toString(); // Converts any Date to String, String to String, Number to String and Array to comma-separated string\r\n                            if (!hasOwn(set, key)) {\r\n                                set[key] = true;\r\n                                fn(item, cursor, advance);\r\n                            }\r\n                        }\r\n                    }\r\n                    ctx.or._iterate(union, resolveboth, reject, idbstore);\r\n                    iterate(openCursor(ctx, idbstore), ctx.algorithm, union, resolveboth, reject, !ctx.keysOnly && ctx.valueMapper);\r\n                })();\r\n        }\r\n        function getInstanceTemplate(ctx) {\r\n            return ctx.table.schema.instanceTemplate;\r\n        }\r\n        return {\r\n            //\r\n            // Collection Protected Functions\r\n            //\r\n            _read: function (fn, cb) {\r\n                var ctx = this._ctx;\r\n                return ctx.error ?\r\n                    ctx.table._trans(null, rejection.bind(null, ctx.error)) :\r\n                    ctx.table._idbstore(READONLY, fn).then(cb);\r\n            },\r\n            _write: function (fn) {\r\n                var ctx = this._ctx;\r\n                return ctx.error ?\r\n                    ctx.table._trans(null, rejection.bind(null, ctx.error)) :\r\n                    ctx.table._idbstore(READWRITE, fn, \"locked\"); // When doing write operations on collections, always lock the operation so that upcoming operations gets queued.\r\n            },\r\n            _addAlgorithm: function (fn) {\r\n                var ctx = this._ctx;\r\n                ctx.algorithm = combine(ctx.algorithm, fn);\r\n            },\r\n            _iterate: function (fn, resolve, reject, idbstore) {\r\n                return iter(this._ctx, fn, resolve, reject, idbstore);\r\n            },\r\n            clone: function (props$$1) {\r\n                var rv = Object.create(this.constructor.prototype), ctx = Object.create(this._ctx);\r\n                if (props$$1)\r\n                    extend(ctx, props$$1);\r\n                rv._ctx = ctx;\r\n                return rv;\r\n            },\r\n            raw: function () {\r\n                this._ctx.valueMapper = null;\r\n                return this;\r\n            },\r\n            //\r\n            // Collection Public methods\r\n            //\r\n            each: function (fn) {\r\n                var ctx = this._ctx;\r\n                if (fake) {\r\n                    var item = getInstanceTemplate(ctx), primKeyPath = ctx.table.schema.primKey.keyPath, key = getByKeyPath(item, ctx.index ? ctx.table.schema.idxByName[ctx.index].keyPath : primKeyPath), primaryKey = getByKeyPath(item, primKeyPath);\r\n                    fn(item, { key: key, primaryKey: primaryKey });\r\n                }\r\n                return this._read(function (resolve, reject, idbstore) {\r\n                    iter(ctx, fn, resolve, reject, idbstore);\r\n                });\r\n            },\r\n            count: function (cb) {\r\n                if (fake)\r\n                    return Promise.resolve(0).then(cb);\r\n                var ctx = this._ctx;\r\n                if (isPlainKeyRange(ctx, true)) {\r\n                    // This is a plain key range. We can use the count() method if the index.\r\n                    return this._read(function (resolve, reject, idbstore) {\r\n                        var idx = getIndexOrStore(ctx, idbstore);\r\n                        var req = (ctx.range ? idx.count(ctx.range) : idx.count());\r\n                        req.onerror = eventRejectHandler(reject);\r\n                        req.onsuccess = function (e) {\r\n                            resolve(Math.min(e.target.result, ctx.limit));\r\n                        };\r\n                    }, cb);\r\n                }\r\n                else {\r\n                    // Algorithms, filters or expressions are applied. Need to count manually.\r\n                    var count = 0;\r\n                    return this._read(function (resolve, reject, idbstore) {\r\n                        iter(ctx, function () { ++count; return false; }, function () { resolve(count); }, reject, idbstore);\r\n                    }, cb);\r\n                }\r\n            },\r\n            sortBy: function (keyPath, cb) {\r\n                /// <param name=\"keyPath\" type=\"String\"></param>\r\n                var parts = keyPath.split('.').reverse(), lastPart = parts[0], lastIndex = parts.length - 1;\r\n                function getval(obj, i) {\r\n                    if (i)\r\n                        return getval(obj[parts[i]], i - 1);\r\n                    return obj[lastPart];\r\n                }\r\n                var order = this._ctx.dir === \"next\" ? 1 : -1;\r\n                function sorter(a, b) {\r\n                    var aVal = getval(a, lastIndex), bVal = getval(b, lastIndex);\r\n                    return aVal < bVal ? -order : aVal > bVal ? order : 0;\r\n                }\r\n                return this.toArray(function (a) {\r\n                    return a.sort(sorter);\r\n                }).then(cb);\r\n            },\r\n            toArray: function (cb) {\r\n                var ctx = this._ctx;\r\n                return this._read(function (resolve, reject, idbstore) {\r\n                    fake && resolve([getInstanceTemplate(ctx)]);\r\n                    if (hasGetAll && ctx.dir === 'next' && isPlainKeyRange(ctx, true) && ctx.limit > 0) {\r\n                        // Special optimation if we could use IDBObjectStore.getAll() or\r\n                        // IDBKeyRange.getAll():\r\n                        var readingHook = ctx.table.hook.reading.fire;\r\n                        var idxOrStore = getIndexOrStore(ctx, idbstore);\r\n                        var req = ctx.limit < Infinity ?\r\n                            idxOrStore.getAll(ctx.range, ctx.limit) :\r\n                            idxOrStore.getAll(ctx.range);\r\n                        req.onerror = eventRejectHandler(reject);\r\n                        req.onsuccess = readingHook === mirror ?\r\n                            eventSuccessHandler(resolve) :\r\n                            eventSuccessHandler(function (res) {\r\n                                try {\r\n                                    resolve(res.map(readingHook));\r\n                                }\r\n                                catch (e) {\r\n                                    reject(e);\r\n                                }\r\n                            });\r\n                    }\r\n                    else {\r\n                        // Getting array through a cursor.\r\n                        var a = [];\r\n                        iter(ctx, function (item) { a.push(item); }, function arrayComplete() {\r\n                            resolve(a);\r\n                        }, reject, idbstore);\r\n                    }\r\n                }, cb);\r\n            },\r\n            offset: function (offset) {\r\n                var ctx = this._ctx;\r\n                if (offset <= 0)\r\n                    return this;\r\n                ctx.offset += offset; // For count()\r\n                if (isPlainKeyRange(ctx)) {\r\n                    addReplayFilter(ctx, function () {\r\n                        var offsetLeft = offset;\r\n                        return function (cursor, advance) {\r\n                            if (offsetLeft === 0)\r\n                                return true;\r\n                            if (offsetLeft === 1) {\r\n                                --offsetLeft;\r\n                                return false;\r\n                            }\r\n                            advance(function () {\r\n                                cursor.advance(offsetLeft);\r\n                                offsetLeft = 0;\r\n                            });\r\n                            return false;\r\n                        };\r\n                    });\r\n                }\r\n                else {\r\n                    addReplayFilter(ctx, function () {\r\n                        var offsetLeft = offset;\r\n                        return function () { return (--offsetLeft < 0); };\r\n                    });\r\n                }\r\n                return this;\r\n            },\r\n            limit: function (numRows) {\r\n                this._ctx.limit = Math.min(this._ctx.limit, numRows); // For count()\r\n                addReplayFilter(this._ctx, function () {\r\n                    var rowsLeft = numRows;\r\n                    return function (cursor, advance, resolve) {\r\n                        if (--rowsLeft <= 0)\r\n                            advance(resolve); // Stop after this item has been included\r\n                        return rowsLeft >= 0; // If numRows is already below 0, return false because then 0 was passed to numRows initially. Otherwise we wouldnt come here.\r\n                    };\r\n                }, true);\r\n                return this;\r\n            },\r\n            until: function (filterFunction, bIncludeStopEntry) {\r\n                var ctx = this._ctx;\r\n                fake && filterFunction(getInstanceTemplate(ctx));\r\n                addFilter(this._ctx, function (cursor, advance, resolve) {\r\n                    if (filterFunction(cursor.value)) {\r\n                        advance(resolve);\r\n                        return bIncludeStopEntry;\r\n                    }\r\n                    else {\r\n                        return true;\r\n                    }\r\n                });\r\n                return this;\r\n            },\r\n            first: function (cb) {\r\n                return this.limit(1).toArray(function (a) { return a[0]; }).then(cb);\r\n            },\r\n            last: function (cb) {\r\n                return this.reverse().first(cb);\r\n            },\r\n            filter: function (filterFunction) {\r\n                /// <param name=\"jsFunctionFilter\" type=\"Function\">function(val){return true/false}</param>\r\n                fake && filterFunction(getInstanceTemplate(this._ctx));\r\n                addFilter(this._ctx, function (cursor) {\r\n                    return filterFunction(cursor.value);\r\n                });\r\n                // match filters not used in Dexie.js but can be used by 3rd part libraries to test a\r\n                // collection for a match without querying DB. Used by Dexie.Observable.\r\n                addMatchFilter(this._ctx, filterFunction);\r\n                return this;\r\n            },\r\n            and: function (filterFunction) {\r\n                return this.filter(filterFunction);\r\n            },\r\n            or: function (indexName) {\r\n                return new WhereClause(this._ctx.table, indexName, this);\r\n            },\r\n            reverse: function () {\r\n                this._ctx.dir = (this._ctx.dir === \"prev\" ? \"next\" : \"prev\");\r\n                if (this._ondirectionchange)\r\n                    this._ondirectionchange(this._ctx.dir);\r\n                return this;\r\n            },\r\n            desc: function () {\r\n                return this.reverse();\r\n            },\r\n            eachKey: function (cb) {\r\n                var ctx = this._ctx;\r\n                ctx.keysOnly = !ctx.isMatch;\r\n                return this.each(function (val, cursor) { cb(cursor.key, cursor); });\r\n            },\r\n            eachUniqueKey: function (cb) {\r\n                this._ctx.unique = \"unique\";\r\n                return this.eachKey(cb);\r\n            },\r\n            eachPrimaryKey: function (cb) {\r\n                var ctx = this._ctx;\r\n                ctx.keysOnly = !ctx.isMatch;\r\n                return this.each(function (val, cursor) { cb(cursor.primaryKey, cursor); });\r\n            },\r\n            keys: function (cb) {\r\n                var ctx = this._ctx;\r\n                ctx.keysOnly = !ctx.isMatch;\r\n                var a = [];\r\n                return this.each(function (item, cursor) {\r\n                    a.push(cursor.key);\r\n                }).then(function () {\r\n                    return a;\r\n                }).then(cb);\r\n            },\r\n            primaryKeys: function (cb) {\r\n                var ctx = this._ctx;\r\n                if (hasGetAll && ctx.dir === 'next' && isPlainKeyRange(ctx, true) && ctx.limit > 0) {\r\n                    // Special optimation if we could use IDBObjectStore.getAllKeys() or\r\n                    // IDBKeyRange.getAllKeys():\r\n                    return this._read(function (resolve, reject, idbstore) {\r\n                        var idxOrStore = getIndexOrStore(ctx, idbstore);\r\n                        var req = ctx.limit < Infinity ?\r\n                            idxOrStore.getAllKeys(ctx.range, ctx.limit) :\r\n                            idxOrStore.getAllKeys(ctx.range);\r\n                        req.onerror = eventRejectHandler(reject);\r\n                        req.onsuccess = eventSuccessHandler(resolve);\r\n                    }).then(cb);\r\n                }\r\n                ctx.keysOnly = !ctx.isMatch;\r\n                var a = [];\r\n                return this.each(function (item, cursor) {\r\n                    a.push(cursor.primaryKey);\r\n                }).then(function () {\r\n                    return a;\r\n                }).then(cb);\r\n            },\r\n            uniqueKeys: function (cb) {\r\n                this._ctx.unique = \"unique\";\r\n                return this.keys(cb);\r\n            },\r\n            firstKey: function (cb) {\r\n                return this.limit(1).keys(function (a) { return a[0]; }).then(cb);\r\n            },\r\n            lastKey: function (cb) {\r\n                return this.reverse().firstKey(cb);\r\n            },\r\n            distinct: function () {\r\n                var ctx = this._ctx, idx = ctx.index && ctx.table.schema.idxByName[ctx.index];\r\n                if (!idx || !idx.multi)\r\n                    return this; // distinct() only makes differencies on multiEntry indexes.\r\n                var set = {};\r\n                addFilter(this._ctx, function (cursor) {\r\n                    var strKey = cursor.primaryKey.toString(); // Converts any Date to String, String to String, Number to String and Array to comma-separated string\r\n                    var found = hasOwn(set, strKey);\r\n                    set[strKey] = true;\r\n                    return !found;\r\n                });\r\n                return this;\r\n            },\r\n            //\r\n            // Methods that mutate storage\r\n            //\r\n            modify: function (changes) {\r\n                var self = this, ctx = this._ctx, hook = ctx.table.hook, updatingHook = hook.updating.fire, deletingHook = hook.deleting.fire;\r\n                fake && typeof changes === 'function' && changes.call({ value: ctx.table.schema.instanceTemplate }, ctx.table.schema.instanceTemplate);\r\n                return this._write(function (resolve, reject, idbstore, trans) {\r\n                    var modifyer;\r\n                    if (typeof changes === 'function') {\r\n                        // Changes is a function that may update, add or delete propterties or even require a deletion the object itself (delete this.item)\r\n                        if (updatingHook === nop && deletingHook === nop) {\r\n                            // Noone cares about what is being changed. Just let the modifier function be the given argument as is.\r\n                            modifyer = changes;\r\n                        }\r\n                        else {\r\n                            // People want to know exactly what is being modified or deleted.\r\n                            // Let modifyer be a proxy function that finds out what changes the caller is actually doing\r\n                            // and call the hooks accordingly!\r\n                            modifyer = function (item) {\r\n                                var origItem = deepClone(item); // Clone the item first so we can compare laters.\r\n                                if (changes.call(this, item, this) === false)\r\n                                    return false; // Call the real modifyer function (If it returns false explicitely, it means it dont want to modify anyting on this object)\r\n                                if (!hasOwn(this, \"value\")) {\r\n                                    // The real modifyer function requests a deletion of the object. Inform the deletingHook that a deletion is taking place.\r\n                                    deletingHook.call(this, this.primKey, item, trans);\r\n                                }\r\n                                else {\r\n                                    // No deletion. Check what was changed\r\n                                    var objectDiff = getObjectDiff(origItem, this.value);\r\n                                    var additionalChanges = updatingHook.call(this, objectDiff, this.primKey, origItem, trans);\r\n                                    if (additionalChanges) {\r\n                                        // Hook want to apply additional modifications. Make sure to fullfill the will of the hook.\r\n                                        item = this.value;\r\n                                        keys(additionalChanges).forEach(function (keyPath) {\r\n                                            setByKeyPath(item, keyPath, additionalChanges[keyPath]); // Adding {keyPath: undefined} means that the keyPath should be deleted. Handled by setByKeyPath\r\n                                        });\r\n                                    }\r\n                                }\r\n                            };\r\n                        }\r\n                    }\r\n                    else if (updatingHook === nop) {\r\n                        // changes is a set of {keyPath: value} and no one is listening to the updating hook.\r\n                        var keyPaths = keys(changes);\r\n                        var numKeys = keyPaths.length;\r\n                        modifyer = function (item) {\r\n                            var anythingModified = false;\r\n                            for (var i = 0; i < numKeys; ++i) {\r\n                                var keyPath = keyPaths[i], val = changes[keyPath];\r\n                                if (getByKeyPath(item, keyPath) !== val) {\r\n                                    setByKeyPath(item, keyPath, val); // Adding {keyPath: undefined} means that the keyPath should be deleted. Handled by setByKeyPath\r\n                                    anythingModified = true;\r\n                                }\r\n                            }\r\n                            return anythingModified;\r\n                        };\r\n                    }\r\n                    else {\r\n                        // changes is a set of {keyPath: value} and people are listening to the updating hook so we need to call it and\r\n                        // allow it to add additional modifications to make.\r\n                        var origChanges = changes;\r\n                        changes = shallowClone(origChanges); // Let's work with a clone of the changes keyPath/value set so that we can restore it in case a hook extends it.\r\n                        modifyer = function (item) {\r\n                            var anythingModified = false;\r\n                            var additionalChanges = updatingHook.call(this, changes, this.primKey, deepClone(item), trans);\r\n                            if (additionalChanges)\r\n                                extend(changes, additionalChanges);\r\n                            keys(changes).forEach(function (keyPath) {\r\n                                var val = changes[keyPath];\r\n                                if (getByKeyPath(item, keyPath) !== val) {\r\n                                    setByKeyPath(item, keyPath, val);\r\n                                    anythingModified = true;\r\n                                }\r\n                            });\r\n                            if (additionalChanges)\r\n                                changes = shallowClone(origChanges); // Restore original changes for next iteration\r\n                            return anythingModified;\r\n                        };\r\n                    }\r\n                    var count = 0;\r\n                    var successCount = 0;\r\n                    var iterationComplete = false;\r\n                    var failures = [];\r\n                    var failKeys = [];\r\n                    var currentKey = null;\r\n                    function modifyItem(item, cursor) {\r\n                        currentKey = cursor.primaryKey;\r\n                        var thisContext = {\r\n                            primKey: cursor.primaryKey,\r\n                            value: item,\r\n                            onsuccess: null,\r\n                            onerror: null\r\n                        };\r\n                        function onerror(e) {\r\n                            failures.push(e);\r\n                            failKeys.push(thisContext.primKey);\r\n                            checkFinished();\r\n                            return true; // Catch these errors and let a final rejection decide whether or not to abort entire transaction\r\n                        }\r\n                        if (modifyer.call(thisContext, item, thisContext) !== false) {\r\n                            var bDelete = !hasOwn(thisContext, \"value\");\r\n                            ++count;\r\n                            tryCatch(function () {\r\n                                var req = (bDelete ? cursor.delete() : cursor.update(thisContext.value));\r\n                                req._hookCtx = thisContext;\r\n                                req.onerror = hookedEventRejectHandler(onerror);\r\n                                req.onsuccess = hookedEventSuccessHandler(function () {\r\n                                    ++successCount;\r\n                                    checkFinished();\r\n                                });\r\n                            }, onerror);\r\n                        }\r\n                        else if (thisContext.onsuccess) {\r\n                            // Hook will expect either onerror or onsuccess to always be called!\r\n                            thisContext.onsuccess(thisContext.value);\r\n                        }\r\n                    }\r\n                    function doReject(e) {\r\n                        if (e) {\r\n                            failures.push(e);\r\n                            failKeys.push(currentKey);\r\n                        }\r\n                        return reject(new ModifyError(\"Error modifying one or more objects\", failures, successCount, failKeys));\r\n                    }\r\n                    function checkFinished() {\r\n                        if (iterationComplete && successCount + failures.length === count) {\r\n                            if (failures.length > 0)\r\n                                doReject();\r\n                            else\r\n                                resolve(successCount);\r\n                        }\r\n                    }\r\n                    self.clone().raw()._iterate(modifyItem, function () {\r\n                        iterationComplete = true;\r\n                        checkFinished();\r\n                    }, doReject, idbstore);\r\n                });\r\n            },\r\n            'delete': function () {\r\n                var _this = this;\r\n                var ctx = this._ctx, range = ctx.range, deletingHook = ctx.table.hook.deleting.fire, hasDeleteHook = deletingHook !== nop;\r\n                if (!hasDeleteHook &&\r\n                    isPlainKeyRange(ctx) &&\r\n                    ((ctx.isPrimKey && !hangsOnDeleteLargeKeyRange) || !range)) {\r\n                    // May use IDBObjectStore.delete(IDBKeyRange) in this case (Issue #208)\r\n                    // For chromium, this is the way most optimized version.\r\n                    // For IE/Edge, this could hang the indexedDB engine and make operating system instable\r\n                    // (https://gist.github.com/dfahlander/5a39328f029de18222cf2125d56c38f7)\r\n                    return this._write(function (resolve, reject, idbstore) {\r\n                        // Our API contract is to return a count of deleted items, so we have to count() before delete().\r\n                        var onerror = eventRejectHandler(reject), countReq = (range ? idbstore.count(range) : idbstore.count());\r\n                        countReq.onerror = onerror;\r\n                        countReq.onsuccess = function () {\r\n                            var count = countReq.result;\r\n                            tryCatch(function () {\r\n                                var delReq = (range ? idbstore.delete(range) : idbstore.clear());\r\n                                delReq.onerror = onerror;\r\n                                delReq.onsuccess = function () { return resolve(count); };\r\n                            }, function (err) { return reject(err); });\r\n                        };\r\n                    });\r\n                }\r\n                // Default version to use when collection is not a vanilla IDBKeyRange on the primary key.\r\n                // Divide into chunks to not starve RAM.\r\n                // If has delete hook, we will have to collect not just keys but also objects, so it will use\r\n                // more memory and need lower chunk size.\r\n                var CHUNKSIZE = hasDeleteHook ? 2000 : 10000;\r\n                return this._write(function (resolve, reject, idbstore, trans) {\r\n                    var totalCount = 0;\r\n                    // Clone collection and change its table and set a limit of CHUNKSIZE on the cloned Collection instance.\r\n                    var collection = _this\r\n                        .clone({\r\n                        keysOnly: !ctx.isMatch && !hasDeleteHook\r\n                    }) // load just keys (unless filter() or and() or deleteHook has subscribers)\r\n                        .distinct() // In case multiEntry is used, never delete same key twice because resulting count\r\n                        .limit(CHUNKSIZE)\r\n                        .raw(); // Don't filter through reading-hooks (like mapped classes etc)\r\n                    var keysOrTuples = [];\r\n                    // We're gonna do things on as many chunks that are needed.\r\n                    // Use recursion of nextChunk function:\r\n                    var nextChunk = function () { return collection.each(hasDeleteHook ? function (val, cursor) {\r\n                        // Somebody subscribes to hook('deleting'). Collect all primary keys and their values,\r\n                        // so that the hook can be called with its values in bulkDelete().\r\n                        keysOrTuples.push([cursor.primaryKey, cursor.value]);\r\n                    } : function (val, cursor) {\r\n                        // No one subscribes to hook('deleting'). Collect only primary keys:\r\n                        keysOrTuples.push(cursor.primaryKey);\r\n                    }).then(function () {\r\n                        // Chromium deletes faster when doing it in sort order.\r\n                        hasDeleteHook ?\r\n                            keysOrTuples.sort(function (a, b) { return ascending(a[0], b[0]); }) :\r\n                            keysOrTuples.sort(ascending);\r\n                        return bulkDelete(idbstore, trans, keysOrTuples, hasDeleteHook, deletingHook);\r\n                    }).then(function () {\r\n                        var count = keysOrTuples.length;\r\n                        totalCount += count;\r\n                        keysOrTuples = [];\r\n                        return count < CHUNKSIZE ? totalCount : nextChunk();\r\n                    }); };\r\n                    resolve(nextChunk());\r\n                });\r\n            }\r\n        };\r\n    });\r\n    //\r\n    //\r\n    //\r\n    // ------------------------- Help functions ---------------------------\r\n    //\r\n    //\r\n    //\r\n    function lowerVersionFirst(a, b) {\r\n        return a._cfg.version - b._cfg.version;\r\n    }\r\n    function setApiOnPlace(objs, tableNames, dbschema) {\r\n        tableNames.forEach(function (tableName) {\r\n            var schema = dbschema[tableName];\r\n            objs.forEach(function (obj) {\r\n                if (!(tableName in obj)) {\r\n                    if (obj === Transaction.prototype || obj instanceof Transaction) {\r\n                        // obj is a Transaction prototype (or prototype of a subclass to Transaction)\r\n                        // Make the API a getter that returns this.table(tableName)\r\n                        setProp(obj, tableName, { get: function () { return this.table(tableName); } });\r\n                    }\r\n                    else {\r\n                        // Table will not be bound to a transaction (will use Dexie.currentTransaction)\r\n                        obj[tableName] = new Table(tableName, schema);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n    function removeTablesApi(objs) {\r\n        objs.forEach(function (obj) {\r\n            for (var key in obj) {\r\n                if (obj[key] instanceof Table)\r\n                    delete obj[key];\r\n            }\r\n        });\r\n    }\r\n    function iterate(req, filter, fn, resolve, reject, valueMapper) {\r\n        // Apply valueMapper (hook('reading') or mappped class)\r\n        var mappedFn = valueMapper ? function (x, c, a) { return fn(valueMapper(x), c, a); } : fn;\r\n        // Wrap fn with PSD and microtick stuff from Promise.\r\n        var wrappedFn = wrap(mappedFn, reject);\r\n        if (!req.onerror)\r\n            req.onerror = eventRejectHandler(reject);\r\n        if (filter) {\r\n            req.onsuccess = trycatcher(function filter_record() {\r\n                var cursor = req.result;\r\n                if (cursor) {\r\n                    var c = function () { cursor.continue(); };\r\n                    if (filter(cursor, function (advancer) { c = advancer; }, resolve, reject))\r\n                        wrappedFn(cursor.value, cursor, function (advancer) { c = advancer; });\r\n                    c();\r\n                }\r\n                else {\r\n                    resolve();\r\n                }\r\n            }, reject);\r\n        }\r\n        else {\r\n            req.onsuccess = trycatcher(function filter_record() {\r\n                var cursor = req.result;\r\n                if (cursor) {\r\n                    var c = function () { cursor.continue(); };\r\n                    wrappedFn(cursor.value, cursor, function (advancer) { c = advancer; });\r\n                    c();\r\n                }\r\n                else {\r\n                    resolve();\r\n                }\r\n            }, reject);\r\n        }\r\n    }\r\n    function parseIndexSyntax(indexes) {\r\n        /// <param name=\"indexes\" type=\"String\"></param>\r\n        /// <returns type=\"Array\" elementType=\"IndexSpec\"></returns>\r\n        var rv = [];\r\n        indexes.split(',').forEach(function (index) {\r\n            index = index.trim();\r\n            var name = index.replace(/([&*]|\\+\\+)/g, \"\"); // Remove \"&\", \"++\" and \"*\"\r\n            // Let keyPath of \"[a+b]\" be [\"a\",\"b\"]:\r\n            var keyPath = /^\\[/.test(name) ? name.match(/^\\[(.*)\\]$/)[1].split('+') : name;\r\n            rv.push(new IndexSpec(name, keyPath || null, /\\&/.test(index), /\\*/.test(index), /\\+\\+/.test(index), isArray(keyPath), /\\./.test(index)));\r\n        });\r\n        return rv;\r\n    }\r\n    function cmp(key1, key2) {\r\n        return indexedDB.cmp(key1, key2);\r\n    }\r\n    function min(a, b) {\r\n        return cmp(a, b) < 0 ? a : b;\r\n    }\r\n    function max(a, b) {\r\n        return cmp(a, b) > 0 ? a : b;\r\n    }\r\n    function ascending(a, b) {\r\n        return indexedDB.cmp(a, b);\r\n    }\r\n    function descending(a, b) {\r\n        return indexedDB.cmp(b, a);\r\n    }\r\n    function simpleCompare(a, b) {\r\n        return a < b ? -1 : a === b ? 0 : 1;\r\n    }\r\n    function simpleCompareReverse(a, b) {\r\n        return a > b ? -1 : a === b ? 0 : 1;\r\n    }\r\n    function combine(filter1, filter2) {\r\n        return filter1 ?\r\n            filter2 ?\r\n                function () { return filter1.apply(this, arguments) && filter2.apply(this, arguments); } :\r\n                filter1 :\r\n            filter2;\r\n    }\r\n    function readGlobalSchema() {\r\n        db.verno = idbdb.version / 10;\r\n        db._dbSchema = globalSchema = {};\r\n        dbStoreNames = slice(idbdb.objectStoreNames, 0);\r\n        if (dbStoreNames.length === 0)\r\n            return; // Database contains no stores.\r\n        var trans = idbdb.transaction(safariMultiStoreFix(dbStoreNames), 'readonly');\r\n        dbStoreNames.forEach(function (storeName) {\r\n            var store = trans.objectStore(storeName), keyPath = store.keyPath, dotted = keyPath && typeof keyPath === 'string' && keyPath.indexOf('.') !== -1;\r\n            var primKey = new IndexSpec(keyPath, keyPath || \"\", false, false, !!store.autoIncrement, keyPath && typeof keyPath !== 'string', dotted);\r\n            var indexes = [];\r\n            for (var j = 0; j < store.indexNames.length; ++j) {\r\n                var idbindex = store.index(store.indexNames[j]);\r\n                keyPath = idbindex.keyPath;\r\n                dotted = keyPath && typeof keyPath === 'string' && keyPath.indexOf('.') !== -1;\r\n                var index = new IndexSpec(idbindex.name, keyPath, !!idbindex.unique, !!idbindex.multiEntry, false, keyPath && typeof keyPath !== 'string', dotted);\r\n                indexes.push(index);\r\n            }\r\n            globalSchema[storeName] = new TableSchema(storeName, primKey, indexes, {});\r\n        });\r\n        setApiOnPlace([allTables], keys(globalSchema), globalSchema);\r\n    }\r\n    function adjustToExistingIndexNames(schema, idbtrans) {\r\n        /// <summary>\r\n        /// Issue #30 Problem with existing db - adjust to existing index names when migrating from non-dexie db\r\n        /// </summary>\r\n        /// <param name=\"schema\" type=\"Object\">Map between name and TableSchema</param>\r\n        /// <param name=\"idbtrans\" type=\"IDBTransaction\"></param>\r\n        var storeNames = idbtrans.db.objectStoreNames;\r\n        for (var i = 0; i < storeNames.length; ++i) {\r\n            var storeName = storeNames[i];\r\n            var store = idbtrans.objectStore(storeName);\r\n            hasGetAll = 'getAll' in store;\r\n            for (var j = 0; j < store.indexNames.length; ++j) {\r\n                var indexName = store.indexNames[j];\r\n                var keyPath = store.index(indexName).keyPath;\r\n                var dexieName = typeof keyPath === 'string' ? keyPath : \"[\" + slice(keyPath).join('+') + \"]\";\r\n                if (schema[storeName]) {\r\n                    var indexSpec = schema[storeName].idxByName[dexieName];\r\n                    if (indexSpec)\r\n                        indexSpec.name = indexName;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    function fireOnBlocked(ev) {\r\n        db.on(\"blocked\").fire(ev);\r\n        // Workaround (not fully*) for missing \"versionchange\" event in IE,Edge and Safari:\r\n        connections\r\n            .filter(function (c) { return c.name === db.name && c !== db && !c._vcFired; })\r\n            .map(function (c) { return c.on(\"versionchange\").fire(ev); });\r\n    }\r\n    extend(this, {\r\n        Collection: Collection,\r\n        Table: Table,\r\n        Transaction: Transaction,\r\n        Version: Version,\r\n        WhereClause: WhereClause\r\n    });\r\n    init();\r\n    addons.forEach(function (fn) {\r\n        fn(db);\r\n    });\r\n}\r\nvar fakeAutoComplete = function () { }; // Will never be changed. We just fake for the IDE that we change it (see doFakeAutoComplete())\r\nvar fake = false; // Will never be changed. We just fake for the IDE that we change it (see doFakeAutoComplete())\r\nfunction parseType(type) {\r\n    if (typeof type === 'function') {\r\n        return new type();\r\n    }\r\n    else if (isArray(type)) {\r\n        return [parseType(type[0])];\r\n    }\r\n    else if (type && typeof type === 'object') {\r\n        var rv = {};\r\n        applyStructure(rv, type);\r\n        return rv;\r\n    }\r\n    else {\r\n        return type;\r\n    }\r\n}\r\nfunction applyStructure(obj, structure) {\r\n    keys(structure).forEach(function (member) {\r\n        var value = parseType(structure[member]);\r\n        obj[member] = value;\r\n    });\r\n    return obj;\r\n}\r\nfunction hookedEventSuccessHandler(resolve) {\r\n    // wrap() is needed when calling hooks because the rare scenario of:\r\n    //  * hook does a db operation that fails immediately (IDB throws exception)\r\n    //    For calling db operations on correct transaction, wrap makes sure to set PSD correctly.\r\n    //    wrap() will also execute in a virtual tick.\r\n    //  * If not wrapped in a virtual tick, direct exception will launch a new physical tick.\r\n    //  * If this was the last event in the bulk, the promise will resolve after a physical tick\r\n    //    and the transaction will have committed already.\r\n    // If no hook, the virtual tick will be executed in the reject()/resolve of the final promise,\r\n    // because it is always marked with _lib = true when created using Transaction._promise().\r\n    return wrap(function (event) {\r\n        var req = event.target, result = req.result, ctx = req._hookCtx, // Contains the hook error handler. Put here instead of closure to boost performance.\r\n        hookSuccessHandler = ctx && ctx.onsuccess;\r\n        hookSuccessHandler && hookSuccessHandler(result);\r\n        resolve && resolve(result);\r\n    }, resolve);\r\n}\r\nfunction eventRejectHandler(reject) {\r\n    return wrap(function (event) {\r\n        preventDefault(event);\r\n        reject(event.target.error);\r\n        return false;\r\n    });\r\n}\r\nfunction eventSuccessHandler(resolve) {\r\n    return wrap(function (event) {\r\n        resolve(event.target.result);\r\n    });\r\n}\r\nfunction hookedEventRejectHandler(reject) {\r\n    return wrap(function (event) {\r\n        // See comment on hookedEventSuccessHandler() why wrap() is needed only when supporting hooks.\r\n        var req = event.target, err = req.error, ctx = req._hookCtx, // Contains the hook error handler. Put here instead of closure to boost performance.\r\n        hookErrorHandler = ctx && ctx.onerror;\r\n        hookErrorHandler && hookErrorHandler(err);\r\n        preventDefault(event);\r\n        reject(err);\r\n        return false;\r\n    });\r\n}\r\nfunction preventDefault(event) {\r\n    if (event.stopPropagation)\r\n        event.stopPropagation();\r\n    if (event.preventDefault)\r\n        event.preventDefault();\r\n}\r\nfunction awaitIterator(iterator) {\r\n    var callNext = function (result) { return iterator.next(result); }, doThrow = function (error) { return iterator.throw(error); }, onSuccess = step(callNext), onError = step(doThrow);\r\n    function step(getNext) {\r\n        return function (val) {\r\n            var next = getNext(val), value = next.value;\r\n            return next.done ? value :\r\n                (!value || typeof value.then !== 'function' ?\r\n                    isArray(value) ? Promise.all(value).then(onSuccess, onError) : onSuccess(value) :\r\n                    value.then(onSuccess, onError));\r\n        };\r\n    }\r\n    return step(callNext)();\r\n}\r\n//\r\n// IndexSpec struct\r\n//\r\nfunction IndexSpec(name, keyPath, unique, multi, auto, compound, dotted) {\r\n    /// <param name=\"name\" type=\"String\"></param>\r\n    /// <param name=\"keyPath\" type=\"String\"></param>\r\n    /// <param name=\"unique\" type=\"Boolean\"></param>\r\n    /// <param name=\"multi\" type=\"Boolean\"></param>\r\n    /// <param name=\"auto\" type=\"Boolean\"></param>\r\n    /// <param name=\"compound\" type=\"Boolean\"></param>\r\n    /// <param name=\"dotted\" type=\"Boolean\"></param>\r\n    this.name = name;\r\n    this.keyPath = keyPath;\r\n    this.unique = unique;\r\n    this.multi = multi;\r\n    this.auto = auto;\r\n    this.compound = compound;\r\n    this.dotted = dotted;\r\n    var keyPathSrc = typeof keyPath === 'string' ? keyPath : keyPath && ('[' + [].join.call(keyPath, '+') + ']');\r\n    this.src = (unique ? '&' : '') + (multi ? '*' : '') + (auto ? \"++\" : \"\") + keyPathSrc;\r\n}\r\n//\r\n// TableSchema struct\r\n//\r\nfunction TableSchema(name, primKey, indexes, instanceTemplate) {\r\n    /// <param name=\"name\" type=\"String\"></param>\r\n    /// <param name=\"primKey\" type=\"IndexSpec\"></param>\r\n    /// <param name=\"indexes\" type=\"Array\" elementType=\"IndexSpec\"></param>\r\n    /// <param name=\"instanceTemplate\" type=\"Object\"></param>\r\n    this.name = name;\r\n    this.primKey = primKey || new IndexSpec();\r\n    this.indexes = indexes || [new IndexSpec()];\r\n    this.instanceTemplate = instanceTemplate;\r\n    this.mappedClass = null;\r\n    this.idxByName = arrayToObject(indexes, function (index) { return [index.name, index]; });\r\n}\r\n// Used in when defining dependencies later...\r\n// (If IndexedDBShim is loaded, prefer it before standard indexedDB)\r\nvar idbshim = _global.idbModules && _global.idbModules.shimIndexedDB ? _global.idbModules : {};\r\nfunction safariMultiStoreFix(storeNames) {\r\n    return storeNames.length === 1 ? storeNames[0] : storeNames;\r\n}\r\nfunction getNativeGetDatabaseNamesFn(indexedDB) {\r\n    var fn = indexedDB && (indexedDB.getDatabaseNames || indexedDB.webkitGetDatabaseNames);\r\n    return fn && fn.bind(indexedDB);\r\n}\r\n// Export Error classes\r\nprops(Dexie, fullNameExceptions); // Dexie.XXXError = class XXXError {...};\r\n//\r\n// Static methods and properties\r\n// \r\nprops(Dexie, {\r\n    //\r\n    // Static delete() method.\r\n    //\r\n    delete: function (databaseName) {\r\n        var db = new Dexie(databaseName), promise = db.delete();\r\n        promise.onblocked = function (fn) {\r\n            db.on(\"blocked\", fn);\r\n            return this;\r\n        };\r\n        return promise;\r\n    },\r\n    //\r\n    // Static exists() method.\r\n    //\r\n    exists: function (name) {\r\n        return new Dexie(name).open().then(function (db) {\r\n            db.close();\r\n            return true;\r\n        }).catch(Dexie.NoSuchDatabaseError, function () { return false; });\r\n    },\r\n    //\r\n    // Static method for retrieving a list of all existing databases at current host.\r\n    //\r\n    getDatabaseNames: function (cb) {\r\n        var getDatabaseNames = getNativeGetDatabaseNamesFn(Dexie.dependencies.indexedDB);\r\n        return getDatabaseNames ? new Promise(function (resolve, reject) {\r\n            var req = getDatabaseNames();\r\n            req.onsuccess = function (event) {\r\n                resolve(slice(event.target.result, 0)); // Converst DOMStringList to Array<String>\r\n            };\r\n            req.onerror = eventRejectHandler(reject);\r\n        }).then(cb) : dbNamesDB.dbnames.toCollection().primaryKeys(cb);\r\n    },\r\n    defineClass: function (structure) {\r\n        /// <summary>\r\n        ///     Create a javascript constructor based on given template for which properties to expect in the class.\r\n        ///     Any property that is a constructor function will act as a type. So {name: String} will be equal to {name: new String()}.\r\n        /// </summary>\r\n        /// <param name=\"structure\">Helps IDE code completion by knowing the members that objects contain and not just the indexes. Also\r\n        /// know what type each member has. Example: {name: String, emailAddresses: [String], properties: {shoeSize: Number}}</param>\r\n        // Default constructor able to copy given properties into this object.\r\n        function Class(properties) {\r\n            /// <param name=\"properties\" type=\"Object\" optional=\"true\">Properties to initialize object with.\r\n            /// </param>\r\n            properties ? extend(this, properties) : fake && applyStructure(this, structure);\r\n        }\r\n        return Class;\r\n    },\r\n    applyStructure: applyStructure,\r\n    ignoreTransaction: function (scopeFunc) {\r\n        // In case caller is within a transaction but needs to create a separate transaction.\r\n        // Example of usage:\r\n        //\r\n        // Let's say we have a logger function in our app. Other application-logic should be unaware of the\r\n        // logger function and not need to include the 'logentries' table in all transaction it performs.\r\n        // The logging should always be done in a separate transaction and not be dependant on the current\r\n        // running transaction context. Then you could use Dexie.ignoreTransaction() to run code that starts a new transaction.\r\n        //\r\n        //     Dexie.ignoreTransaction(function() {\r\n        //         db.logentries.add(newLogEntry);\r\n        //     });\r\n        //\r\n        // Unless using Dexie.ignoreTransaction(), the above example would try to reuse the current transaction\r\n        // in current Promise-scope.\r\n        //\r\n        // An alternative to Dexie.ignoreTransaction() would be setImmediate() or setTimeout(). The reason we still provide an\r\n        // API for this because\r\n        //  1) The intention of writing the statement could be unclear if using setImmediate() or setTimeout().\r\n        //  2) setTimeout() would wait unnescessary until firing. This is however not the case with setImmediate().\r\n        //  3) setImmediate() is not supported in the ES standard.\r\n        //  4) You might want to keep other PSD state that was set in a parent PSD, such as PSD.letThrough.\r\n        return PSD.trans ?\r\n            usePSD(PSD.transless, scopeFunc) :\r\n            scopeFunc(); // No need to change scope because there is no ongoing transaction.\r\n    },\r\n    vip: function (fn) {\r\n        // To be used by subscribers to the on('ready') event.\r\n        // This will let caller through to access DB even when it is blocked while the db.ready() subscribers are firing.\r\n        // This would have worked automatically if we were certain that the Provider was using Dexie.Promise for all asyncronic operations. The promise PSD\r\n        // from the provider.connect() call would then be derived all the way to when provider would call localDatabase.applyChanges(). But since\r\n        // the provider more likely is using non-promise async APIs or other thenable implementations, we cannot assume that.\r\n        // Note that this method is only useful for on('ready') subscribers that is returning a Promise from the event. If not using vip()\r\n        // the database could deadlock since it wont open until the returned Promise is resolved, and any non-VIPed operation started by\r\n        // the caller will not resolve until database is opened.\r\n        return newScope(function () {\r\n            PSD.letThrough = true; // Make sure we are let through if still blocking db due to onready is firing.\r\n            return fn();\r\n        });\r\n    },\r\n    async: function (generatorFn) {\r\n        return function () {\r\n            try {\r\n                var rv = awaitIterator(generatorFn.apply(this, arguments));\r\n                if (!rv || typeof rv.then !== 'function')\r\n                    return Promise.resolve(rv);\r\n                return rv;\r\n            }\r\n            catch (e) {\r\n                return rejection(e);\r\n            }\r\n        };\r\n    },\r\n    spawn: function (generatorFn, args, thiz) {\r\n        try {\r\n            var rv = awaitIterator(generatorFn.apply(thiz, args || []));\r\n            if (!rv || typeof rv.then !== 'function')\r\n                return Promise.resolve(rv);\r\n            return rv;\r\n        }\r\n        catch (e) {\r\n            return rejection(e);\r\n        }\r\n    },\r\n    // Dexie.currentTransaction property\r\n    currentTransaction: {\r\n        get: function () { return PSD.trans || null; }\r\n    },\r\n    waitFor: function (promiseOrFunction, optionalTimeout) {\r\n        // If a function is provided, invoke it and pass the returning value to Transaction.waitFor()\r\n        var promise = Promise.resolve(typeof promiseOrFunction === 'function' ? Dexie.ignoreTransaction(promiseOrFunction) : promiseOrFunction)\r\n            .timeout(optionalTimeout || 60000); // Default the timeout to one minute. Caller may specify Infinity if required.       \r\n        // Run given promise on current transaction. If no current transaction, just return a Dexie promise based\r\n        // on given value.\r\n        return PSD.trans ? PSD.trans.waitFor(promise) : promise;\r\n    },\r\n    // Export our Promise implementation since it can be handy as a standalone Promise implementation\r\n    Promise: Promise,\r\n    // Dexie.debug proptery:\r\n    // Dexie.debug = false\r\n    // Dexie.debug = true\r\n    // Dexie.debug = \"dexie\" - don't hide dexie's stack frames.\r\n    debug: {\r\n        get: function () { return debug; },\r\n        set: function (value) {\r\n            setDebug(value, value === 'dexie' ? function () { return true; } : dexieStackFrameFilter);\r\n        }\r\n    },\r\n    // Export our derive/extend/override methodology\r\n    derive: derive,\r\n    extend: extend,\r\n    props: props,\r\n    override: override,\r\n    // Export our Events() function - can be handy as a toolkit\r\n    Events: Events,\r\n    // Utilities\r\n    getByKeyPath: getByKeyPath,\r\n    setByKeyPath: setByKeyPath,\r\n    delByKeyPath: delByKeyPath,\r\n    shallowClone: shallowClone,\r\n    deepClone: deepClone,\r\n    getObjectDiff: getObjectDiff,\r\n    asap: asap,\r\n    maxKey: maxKey,\r\n    minKey: minKey,\r\n    // Addon registry\r\n    addons: [],\r\n    // Global DB connection list\r\n    connections: connections,\r\n    MultiModifyError: exceptions.Modify,\r\n    errnames: errnames,\r\n    // Export other static classes\r\n    IndexSpec: IndexSpec,\r\n    TableSchema: TableSchema,\r\n    //\r\n    // Dependencies\r\n    //\r\n    // These will automatically work in browsers with indexedDB support, or where an indexedDB polyfill has been included.\r\n    //\r\n    // In node.js, however, these properties must be set \"manually\" before instansiating a new Dexie().\r\n    // For node.js, you need to require indexeddb-js or similar and then set these deps.\r\n    //\r\n    dependencies: {\r\n        // Required:\r\n        indexedDB: idbshim.shimIndexedDB || _global.indexedDB || _global.mozIndexedDB || _global.webkitIndexedDB || _global.msIndexedDB,\r\n        IDBKeyRange: idbshim.IDBKeyRange || _global.IDBKeyRange || _global.webkitIDBKeyRange\r\n    },\r\n    // API Version Number: Type Number, make sure to always set a version number that can be comparable correctly. Example: 0.9, 0.91, 0.92, 1.0, 1.01, 1.1, 1.2, 1.21, etc.\r\n    semVer: DEXIE_VERSION,\r\n    version: DEXIE_VERSION.split('.')\r\n        .map(function (n) { return parseInt(n); })\r\n        .reduce(function (p, c, i) { return p + (c / Math.pow(10, i * 2)); }),\r\n    fakeAutoComplete: fakeAutoComplete,\r\n    // https://github.com/dfahlander/Dexie.js/issues/186\r\n    // typescript compiler tsc in mode ts-->es5 & commonJS, will expect require() to return\r\n    // x.default. Workaround: Set Dexie.default = Dexie.\r\n    default: Dexie,\r\n    // Make it possible to import {Dexie} (non-default import)\r\n    // Reason 1: May switch to that in future.\r\n    // Reason 2: We declare it both default and named exported in d.ts to make it possible\r\n    // to let addons extend the Dexie interface with Typescript 2.1 (works only when explicitely\r\n    // exporting the symbol, not just default exporting)\r\n    Dexie: Dexie\r\n});\r\n// Map DOMErrors and DOMExceptions to corresponding Dexie errors. May change in Dexie v2.0.\r\nPromise.rejectionMapper = mapError;\r\n// Fool IDE to improve autocomplete. Tested with Visual Studio 2013 and 2015.\r\ndoFakeAutoComplete(function () {\r\n    Dexie.fakeAutoComplete = fakeAutoComplete = doFakeAutoComplete;\r\n    Dexie.fake = fake = true;\r\n});\r\n// Initialize dbNamesDB (won't ever be opened on chromium browsers')\r\ndbNamesDB = new Dexie('__dbnames');\r\ndbNamesDB.version(1).stores({ dbnames: 'name' });\r\n(function () {\r\n    // Migrate from Dexie 1.x database names stored in localStorage:\r\n    var DBNAMES = 'Dexie.DatabaseNames';\r\n    if (typeof localStorage !== undefined && _global.document !== undefined)\r\n        try {\r\n            // Have localStorage and is not executing in a worker. Lets migrate from Dexie 1.x.\r\n            JSON.parse(localStorage.getItem(DBNAMES) || \"[]\")\r\n                .forEach(function (name) { return dbNamesDB.dbnames.put({ name: name }).catch(nop); });\r\n            localStorage.removeItem(DBNAMES);\r\n        }\r\n        catch (_e) { }\r\n})();\n\n/* harmony default export */ __webpack_exports__[\"a\"] = Dexie;\n//# sourceMappingURL=dexie.es.js.map\n\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(55), __webpack_require__(124).setImmediate))\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = { \"default\": __webpack_require__(82), __esModule: true };\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports) {\n\nmodule.exports = function(it){\n  if(typeof it != 'function')throw TypeError(it + ' is not a function!');\n  return it;\n};\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports) {\n\n// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function(it){\n  if(it == undefined)throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar isObject = __webpack_require__(11)\n  , document = __webpack_require__(2).document\n  // in old IE typeof document.createElement is 'object'\n  , is = isObject(document) && isObject(document.createElement);\nmodule.exports = function(it){\n  return is ? document.createElement(it) : {};\n};\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports) {\n\n// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject    = __webpack_require__(3)\n  , dPs         = __webpack_require__(101)\n  , enumBugKeys = __webpack_require__(27)\n  , IE_PROTO    = __webpack_require__(30)('IE_PROTO')\n  , Empty       = function(){ /* empty */ }\n  , PROTOTYPE   = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function(){\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = __webpack_require__(26)('iframe')\n    , i      = enumBugKeys.length\n    , lt     = '<'\n    , gt     = '>'\n    , iframeDocument;\n  iframe.style.display = 'none';\n  __webpack_require__(40).appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties){\n  var result;\n  if(O !== null){\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty;\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports) {\n\nexports.f = Object.getOwnPropertySymbols;\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar shared = __webpack_require__(31)('keys')\n  , uid    = __webpack_require__(21);\nmodule.exports = function(key){\n  return shared[key] || (shared[key] = uid(key));\n};\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global = __webpack_require__(2)\n  , SHARED = '__core-js_shared__'\n  , store  = global[SHARED] || (global[SHARED] = {});\nmodule.exports = function(key){\n  return store[key] || (store[key] = {});\n};\n\n/***/ }),\n/* 32 */\n/***/ (function(module, exports) {\n\n// 7.1.4 ToInteger\nvar ceil  = Math.ceil\n  , floor = Math.floor;\nmodule.exports = function(it){\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n\n/***/ }),\n/* 33 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = __webpack_require__(11);\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function(it, S){\n  if(!isObject(it))return it;\n  var fn, val;\n  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;\n  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;\n  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n\n/***/ }),\n/* 34 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global         = __webpack_require__(2)\n  , core           = __webpack_require__(0)\n  , LIBRARY        = __webpack_require__(16)\n  , wksExt         = __webpack_require__(35)\n  , defineProperty = __webpack_require__(6).f;\nmodule.exports = function(name){\n  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});\n  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});\n};\n\n/***/ }),\n/* 35 */\n/***/ (function(module, exports, __webpack_require__) {\n\nexports.f = __webpack_require__(1);\n\n/***/ }),\n/* 36 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_dexie__ = __webpack_require__(22);\n/* ========================================================================== \r\n *                           dexie-observable.js\r\n * ==========================================================================\r\n *\r\n * Dexie addon for observing database changes not just on local db instance\r\n * but also on other instances, tabs and windows.\r\n *\r\n * Comprises a base framework for dexie-syncable.js\r\n *\r\n * By David Fahlander, david.fahlander@gmail.com,\r\n *    Nikolas Poniros, https://github.com/nponiros\r\n *\r\n * ==========================================================================\r\n *\r\n * Version {version}, {date}\r\n *\r\n * http://dexie.org\r\n *\r\n * Apache License Version 2.0, January 2004, http://www.apache.org/licenses/\r\n * \r\n */\r\n\n\n\nfunction nop() { }\r\nfunction promisableChain(f1, f2) {\r\n    if (f1 === nop)\r\n        return f2;\r\n    return function () {\r\n        var res = f1.apply(this, arguments);\r\n        if (res && typeof res.then === 'function') {\r\n            var thiz = this, args = arguments;\r\n            return res.then(function () {\r\n                return f2.apply(thiz, args);\r\n            });\r\n        }\r\n        return f2.apply(this, arguments);\r\n    };\r\n}\r\nfunction createUUID() {\r\n    // Decent solution from http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript\r\n    var d = Date.now();\r\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n        var r = (d + Math.random() * 16) % 16 | 0;\r\n        d = Math.floor(d / 16);\r\n        return (c === 'x' ? r : (r & 0x7 | 0x8)).toString(16);\r\n    });\r\n    return uuid;\r\n}\n\nfunction initOverrideCreateTransaction(db, wakeupObservers) {\r\n    return function overrideCreateTransaction(origFunc) {\r\n        return function (mode, storenames, dbschema, parent) {\r\n            if (db.dynamicallyOpened())\r\n                return origFunc.apply(this, arguments); // Don't observe dynamically opened databases.\r\n            var addChanges = false;\r\n            if (mode === 'readwrite' && storenames.some(function (storeName) {\r\n                return dbschema[storeName] && dbschema[storeName].observable;\r\n            })) {\r\n                // At least one included store is a observable store. Make sure to also include the _changes store.\r\n                addChanges = true;\r\n                storenames = storenames.slice(0); // Clone\r\n                if (storenames.indexOf(\"_changes\") === -1)\r\n                    storenames.push(\"_changes\"); // Otherwise, firefox will hang... (I've reported the bug to Mozilla@Bugzilla)\r\n            }\r\n            // Call original db._createTransaction()\r\n            var trans = origFunc.call(this, mode, storenames, dbschema, parent);\r\n            // If this transaction is bound to any observable table, make sure to add changes when transaction completes.\r\n            if (addChanges) {\r\n                trans._lastWrittenRevision = 0;\r\n                trans.on('complete', function () {\r\n                    if (trans._lastWrittenRevision) {\r\n                        // Changes were written in this transaction.\r\n                        if (!parent) {\r\n                            // This is root-level transaction, i.e. a physical commit has happened.\r\n                            // Delay-trigger a wakeup call:\r\n                            if (wakeupObservers.timeoutHandle)\r\n                                clearTimeout(wakeupObservers.timeoutHandle);\r\n                            wakeupObservers.timeoutHandle = setTimeout(function () {\r\n                                delete wakeupObservers.timeoutHandle;\r\n                                wakeupObservers(trans._lastWrittenRevision);\r\n                            }, 25);\r\n                        }\r\n                        else {\r\n                            // This is just a virtual commit of a sub transaction.\r\n                            // Wait with waking up observers until root transaction has committed.\r\n                            // Make sure to mark root transaction so that it will wakeup observers upon commit.\r\n                            var rootTransaction = (function findRootTransaction(trans) {\r\n                                return trans.parent ? findRootTransaction(trans.parent) : trans;\r\n                            })(parent);\r\n                            rootTransaction._lastWrittenRevision = Math.max(trans._lastWrittenRevision, rootTransaction.lastWrittenRevision || 0);\r\n                        }\r\n                    }\r\n                });\r\n                // Derive \"source\" property from parent transaction by default\r\n                if (trans.parent && trans.parent.source)\r\n                    trans.source = trans.parent.source;\r\n            }\r\n            return trans;\r\n        };\r\n    };\r\n}\n\nfunction initWakeupObservers(db, Observable, localStorage) {\r\n    return function wakeupObservers(lastWrittenRevision) {\r\n        // Make sure Observable.latestRevision[db.name] is still below our value, now when some time has elapsed and other db instances in same window possibly could have made changes too.\r\n        if (Observable.latestRevision[db.name] < lastWrittenRevision) {\r\n            // Set the static property lastRevision[db.name] to the revision of the last written change.\r\n            Observable.latestRevision[db.name] = lastWrittenRevision;\r\n            // Wakeup ourselves, and any other db instances on this window:\r\n            __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].ignoreTransaction(function () {\r\n                Observable.on('latestRevisionIncremented').fire(db.name, lastWrittenRevision);\r\n            });\r\n            // Observable.on.latestRevisionIncremented will only wakeup db's in current window.\r\n            // We need a storage event to wakeup other windwos.\r\n            // Since indexedDB lacks storage events, let's use the storage event from WebStorage just for\r\n            // the purpose to wakeup db instances in other windows.\r\n            if (localStorage)\r\n                localStorage.setItem('Dexie.Observable/latestRevision/' + db.name, lastWrittenRevision); // In IE, this will also wakeup our own window. However, onLatestRevisionIncremented will work around this by only running once per revision id.\r\n        }\r\n    };\r\n}\n\n// Change Types\r\n// Change Types\r\nvar CREATE = 1;\r\nvar UPDATE = 2;\r\nvar DELETE = 3;\n\nfunction initCreatingHook(db, table) {\r\n    return function creatingHook(primKey, obj, trans) {\r\n        /// <param name=\"trans\" type=\"db.Transaction\"></param>\r\n        var rv = undefined;\r\n        if (primKey === undefined && table.schema.primKey.uuid) {\r\n            primKey = rv = createUUID();\r\n            if (table.schema.primKey.keyPath) {\r\n                __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].setByKeyPath(obj, table.schema.primKey.keyPath, primKey);\r\n            }\r\n        }\r\n        var change = {\r\n            source: trans.source || null,\r\n            table: table.name,\r\n            key: primKey === undefined ? null : primKey,\r\n            type: CREATE,\r\n            obj: obj\r\n        };\r\n        var promise = db._changes.add(change).then(function (rev) {\r\n            trans._lastWrittenRevision = Math.max(trans._lastWrittenRevision, rev);\r\n            return rev;\r\n        });\r\n        // Wait for onsuccess so that we have the primKey if it is auto-incremented and update the change item if so.\r\n        this.onsuccess = function (resultKey) {\r\n            if (primKey != resultKey)\r\n                promise._then(function () {\r\n                    change.key = resultKey;\r\n                    db._changes.put(change);\r\n                });\r\n        };\r\n        this.onerror = function () {\r\n            // If the main operation fails, make sure to regret the change\r\n            promise._then(function (rev) {\r\n                // Will only happen if app code catches the main operation error to prohibit transaction from aborting.\r\n                db._changes.delete(rev);\r\n            });\r\n        };\r\n        return rv;\r\n    };\r\n}\n\nfunction initUpdatingHook(db, tableName) {\r\n    return function updatingHook(mods, primKey, oldObj, trans) {\r\n        /// <param name=\"trans\" type=\"db.Transaction\"></param>\r\n        // mods may contain property paths with undefined as value if the property\r\n        // is being deleted. Since we cannot persist undefined we need to act\r\n        // like those changes is setting the value to null instead.\r\n        var modsWithoutUndefined = {};\r\n        // As of current Dexie version (1.0.3) hook may be called even if it wouldn't really change.\r\n        // Therefore we may do that kind of optimization here - to not add change entries if\r\n        // there's nothing to change.\r\n        var anythingChanged = false;\r\n        var newObj = __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].deepClone(oldObj);\r\n        for (var propPath in mods) {\r\n            var mod = mods[propPath];\r\n            if (typeof mod === 'undefined') {\r\n                __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].delByKeyPath(newObj, propPath);\r\n                modsWithoutUndefined[propPath] = null; // Null is as close we could come to deleting a property when not allowing undefined.\r\n                anythingChanged = true;\r\n            }\r\n            else {\r\n                var currentValue = __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].getByKeyPath(oldObj, propPath);\r\n                if (mod !== currentValue && JSON.stringify(mod) !== JSON.stringify(currentValue)) {\r\n                    __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].setByKeyPath(newObj, propPath, mod);\r\n                    modsWithoutUndefined[propPath] = mod;\r\n                    anythingChanged = true;\r\n                }\r\n            }\r\n        }\r\n        if (anythingChanged) {\r\n            var change = {\r\n                source: trans.source || null,\r\n                table: tableName,\r\n                key: primKey,\r\n                type: UPDATE,\r\n                mods: modsWithoutUndefined,\r\n                oldObj: oldObj,\r\n                obj: newObj\r\n            };\r\n            var promise = db._changes.add(change); // Just so we get the correct revision order of the update...\r\n            this.onsuccess = function () {\r\n                promise._then(function (rev) {\r\n                    trans._lastWrittenRevision = Math.max(trans._lastWrittenRevision, rev);\r\n                });\r\n            };\r\n            this.onerror = function () {\r\n                // If the main operation fails, make sure to regret the change.\r\n                promise._then(function (rev) {\r\n                    // Will only happen if app code catches the main operation error to prohibit transaction from aborting.\r\n                    db._changes.delete(rev);\r\n                });\r\n            };\r\n        }\r\n    };\r\n}\n\nfunction initDeletingHook(db, tableName) {\r\n    return function deletingHook(primKey, obj, trans) {\r\n        /// <param name=\"trans\" type=\"db.Transaction\"></param>\r\n        var promise = db._changes.add({\r\n            source: trans.source || null,\r\n            table: tableName,\r\n            key: primKey,\r\n            type: DELETE,\r\n            oldObj: obj\r\n        }).then(function (rev) {\r\n            trans._lastWrittenRevision = Math.max(trans._lastWrittenRevision, rev);\r\n            return rev;\r\n        })\r\n            .catch(function (e) {\r\n            console.log(obj);\r\n            console.log(e.stack);\r\n        });\r\n        this.onerror = function () {\r\n            // If the main operation fails, make sure to regret the change.\r\n            // Using _then because if promise is already fullfilled, the standard then() would\r\n            // do setTimeout() and we would loose the transaction.\r\n            promise._then(function (rev) {\r\n                // Will only happen if app code catches the main operation error to prohibit transaction from aborting.\r\n                db._changes.delete(rev);\r\n            });\r\n        };\r\n    };\r\n}\n\nfunction initCrudMonitor(db) {\r\n    //\r\n    // The Creating/Updating/Deleting hook will make sure any change is stored to the changes table\r\n    //\r\n    return function crudMonitor(table) {\r\n        /// <param name=\"table\" type=\"db.Table\"></param>\r\n        if (table.hook._observing)\r\n            return;\r\n        table.hook._observing = true;\r\n        var tableName = table.name;\r\n        table.hook('creating').subscribe(initCreatingHook(db, table));\r\n        table.hook('updating').subscribe(initUpdatingHook(db, tableName));\r\n        table.hook('deleting').subscribe(initDeletingHook(db, tableName));\r\n    };\r\n}\n\nfunction initOnStorage(Observable) {\r\n    return function onStorage(event) {\r\n        // We use the onstorage event to trigger onLatestRevisionIncremented since we will wake up when other windows modify the DB as well!\r\n        if (event.key.indexOf(\"Dexie.Observable/\") === 0) {\r\n            var parts = event.key.split('/');\r\n            var prop = parts[1];\r\n            var dbname = parts[2];\r\n            if (prop === 'latestRevision') {\r\n                var rev = parseInt(event.newValue, 10);\r\n                if (!isNaN(rev) && rev > Observable.latestRevision[dbname]) {\r\n                    Observable.latestRevision[dbname] = rev;\r\n                    __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].ignoreTransaction(function () {\r\n                        Observable.on('latestRevisionIncremented').fire(dbname, rev);\r\n                    });\r\n                }\r\n            }\r\n            else if (prop.indexOf(\"deadnode:\") === 0) {\r\n                var nodeID = parseInt(prop.split(':')[1], 10);\r\n                if (event.newValue) {\r\n                    Observable.on.suicideNurseCall.fire(dbname, nodeID);\r\n                }\r\n            }\r\n            else if (prop === 'intercomm') {\r\n                if (event.newValue) {\r\n                    Observable.on.intercomm.fire(dbname);\r\n                }\r\n            }\r\n        }\r\n    };\r\n}\n\nfunction initOverrideOpen(db, SyncNode, crudMonitor) {\r\n    return function overrideOpen(origOpen) {\r\n        return function () {\r\n            //\r\n            // Make sure to subscribe to \"creating\", \"updating\" and \"deleting\" hooks for all observable tables that were created in the stores() method.\r\n            //\r\n            Object.keys(db._allTables).forEach(function (tableName) {\r\n                var table = db._allTables[tableName];\r\n                if (table.schema.observable) {\r\n                    crudMonitor(table);\r\n                }\r\n                if (table.name === \"_syncNodes\") {\r\n                    table.mapToClass(SyncNode);\r\n                }\r\n            });\r\n            return origOpen.apply(this, arguments);\r\n        };\r\n    };\r\n}\n\nvar Promise$1 = __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].Promise;\r\nfunction initIntercomm(db, Observable, SyncNode, mySyncNode, localStorage) {\r\n    //\r\n    // Intercommunication between nodes\r\n    //\r\n    // Enable inter-process communication between browser windows using localStorage storage event (is registered in Dexie.Observable)\r\n    var requestsWaitingForReply = {};\r\n    /**\r\n     * @param {string} type Type of message\r\n     * @param message Message to send\r\n     * @param {number} destinationNode ID of destination node\r\n     * @param {{wantReply: boolean, isFailure: boolean, requestId: number}} options If {wantReply: true}, the returned promise will complete with the reply from remote. Otherwise it will complete when message has been successfully sent.</param>\r\n     */\r\n    db.observable.sendMessage = function (type, message, destinationNode, options) {\r\n        /// <param name=\"type\" type=\"String\">Type of message</param>\r\n        /// <param name=\"message\">Message to send</param>\r\n        /// <param name=\"destinationNode\" type=\"Number\">ID of destination node</param>\r\n        /// <param name=\"options\" type=\"Object\" optional=\"true\">{wantReply: Boolean, isFailure: Boolean, requestId: Number}. If wantReply, the returned promise will complete with the reply from remote. Otherwise it will complete when message has been successfully sent.</param>\r\n        options = options || {};\r\n        if (!mySyncNode.node)\r\n            return options.wantReply ?\r\n                Promise$1.reject(new __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].DatabaseClosedError()) :\r\n                Promise$1.resolve(); // If caller doesn't want a reply, it won't catch errors either.\r\n        var msg = { message: message, destinationNode: destinationNode, sender: mySyncNode.node.id, type: type };\r\n        __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].extend(msg, options); // wantReply: wantReply, success: !isFailure, requestId: ...\r\n        return __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].ignoreTransaction(function () {\r\n            var tables = [\"_intercomm\"];\r\n            if (options.wantReply)\r\n                tables.push(\"_syncNodes\"); // If caller wants a reply, include \"_syncNodes\" in transaction to check that there's a receiver there. Otherwise, new master will get it.\r\n            var promise = db.transaction('rw', tables, function () {\r\n                if (options.wantReply) {\r\n                    // Check that there is a receiver there to take the request.\r\n                    return db._syncNodes.where('id').equals(destinationNode).count(function (receiverAlive) {\r\n                        if (receiverAlive)\r\n                            return db._intercomm.add(msg);\r\n                        else\r\n                            return db._syncNodes.where('isMaster').above(0).first(function (masterNode) {\r\n                                msg.destinationNode = masterNode.id;\r\n                                return db._intercomm.add(msg);\r\n                            });\r\n                    });\r\n                }\r\n                else {\r\n                    // If caller doesn't need a response, we don't have to make sure that it gets one.\r\n                    return db._intercomm.add(msg);\r\n                }\r\n            }).then(function (messageId) {\r\n                var rv = null;\r\n                if (options.wantReply) {\r\n                    rv = new Promise$1(function (resolve, reject) {\r\n                        requestsWaitingForReply[messageId.toString()] = { resolve: resolve, reject: reject };\r\n                    });\r\n                }\r\n                if (localStorage) {\r\n                    localStorage.setItem(\"Dexie.Observable/intercomm/\" + db.name, messageId.toString());\r\n                }\r\n                Observable.on.intercomm.fire(db.name);\r\n                return rv;\r\n            });\r\n            if (!options.wantReply) {\r\n                promise.catch(function () {\r\n                });\r\n                return;\r\n            }\r\n            else {\r\n                // Forward rejection to caller if it waits for reply.\r\n                return promise;\r\n            }\r\n        });\r\n    };\r\n    // Send a message to all local _syncNodes\r\n    db.observable.broadcastMessage = function (type, message, bIncludeSelf) {\r\n        if (!mySyncNode.node)\r\n            return;\r\n        var mySyncNodeId = mySyncNode.node.id;\r\n        __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].ignoreTransaction(function () {\r\n            db._syncNodes.toArray(function (nodes) {\r\n                return Promise$1.all(nodes\r\n                    .filter(function (node) { return node.type === 'local' && (bIncludeSelf || node.id !== mySyncNodeId); })\r\n                    .map(function (node) { return db.observable.sendMessage(type, message, node.id); }));\r\n            }).catch(function () {\r\n            });\r\n        });\r\n    };\r\n    function consumeIntercommMessages() {\r\n        // Check if we got messages:\r\n        if (!mySyncNode.node)\r\n            return Promise$1.reject(new __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].DatabaseClosedError());\r\n        return __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].ignoreTransaction(function () {\r\n            return db.transaction('rw', '_intercomm', function () {\r\n                return db._intercomm.where({ destinationNode: mySyncNode.node.id }).toArray(function (messages) {\r\n                    messages.forEach(function (msg) { return consumeMessage(msg); });\r\n                    return db._intercomm.where('id').anyOf(messages.map(function (msg) { return msg.id; })).delete();\r\n                });\r\n            });\r\n        });\r\n    }\r\n    function consumeMessage(msg) {\r\n        if (msg.type === 'response') {\r\n            // This is a response. Lookup pending request and fulfill its promise.\r\n            var request = requestsWaitingForReply[msg.requestId.toString()];\r\n            if (request) {\r\n                if (msg.isFailure) {\r\n                    request.reject(msg.message.error);\r\n                }\r\n                else {\r\n                    request.resolve(msg.message.result);\r\n                }\r\n                delete requestsWaitingForReply[msg.requestId.toString()];\r\n            }\r\n        }\r\n        else {\r\n            // This is a message or request. Fire the event and add an API for the subscriber to use if reply is requested\r\n            msg.resolve = function (result) {\r\n                db.observable.sendMessage('response', { result: result }, msg.sender, { requestId: msg.id });\r\n            };\r\n            msg.reject = function (error) {\r\n                db.observable.sendMessage('response', { error: error.toString() }, msg.sender, { isFailure: true, requestId: msg.id });\r\n            };\r\n            db.on.message.fire(msg);\r\n        }\r\n    }\r\n    // Listener for 'intercomm' events\r\n    // Gets fired when we get a 'storage' event from local storage or when sendMessage is called\r\n    // 'storage' is used to communicate between tabs (sendMessage changes the localStorage to trigger the event)\r\n    // sendMessage is used to communicate in the same tab and to trigger a storage event\r\n    function onIntercomm(dbname) {\r\n        // When storage event trigger us to check\r\n        if (dbname === db.name) {\r\n            consumeIntercommMessages().catch('DatabaseClosedError', function () { });\r\n        }\r\n    }\r\n    return {\r\n        onIntercomm: onIntercomm,\r\n        consumeIntercommMessages: consumeIntercommMessages\r\n    };\r\n}\n\nfunction overrideParseStoresSpec(origFunc) {\r\n    return function (stores, dbSchema) {\r\n        // Create the _changes and _syncNodes tables\r\n        stores[\"_changes\"] = \"++rev\";\r\n        stores[\"_syncNodes\"] = \"++id,myRevision,lastHeartBeat,&url,isMaster,type,status\";\r\n        stores[\"_intercomm\"] = \"++id,destinationNode\";\r\n        stores[\"_uncommittedChanges\"] = \"++id,node\"; // For remote syncing when server returns a partial result.\r\n        // Call default implementation. Will populate the dbSchema structures.\r\n        origFunc.call(this, stores, dbSchema);\r\n        // Allow UUID primary keys using $$ prefix on primary key or indexes\r\n        Object.keys(dbSchema).forEach(function (tableName) {\r\n            var schema = dbSchema[tableName];\r\n            if (schema.primKey.name.indexOf('$$') === 0) {\r\n                schema.primKey.uuid = true;\r\n                schema.primKey.name = schema.primKey.name.substr(2);\r\n                schema.primKey.keyPath = schema.primKey.keyPath.substr(2);\r\n            }\r\n        });\r\n        // Now mark all observable tables\r\n        Object.keys(dbSchema).forEach(function (tableName) {\r\n            // Marked observable tables with \"observable\" in their TableSchema.\r\n            if (tableName.indexOf('_') !== 0 && tableName.indexOf('$') !== 0) {\r\n                dbSchema[tableName].observable = true;\r\n            }\r\n        });\r\n    };\r\n}\n\nfunction deleteOldChanges(db) {\r\n    // This is a background job and should never be done within\r\n    // a caller's transaction. Use Dexie.ignoreTransaction() to ensure that.\r\n    // We should not return the Promise but catch it ourselves instead.\r\n    // To prohibit starving the database we want to lock transactions as short as possible\r\n    // and since we're not in a hurry, we could do this job in chunks and reschedule a\r\n    // continuation every 500 ms.\r\n    var CHUNK_SIZE = 100;\r\n    __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].ignoreTransaction(function () {\r\n        return db._syncNodes.orderBy(\"myRevision\").first(function (oldestNode) {\r\n            return db._changes\r\n                .where(\"rev\").below(oldestNode.myRevision)\r\n                .limit(CHUNK_SIZE)\r\n                .primaryKeys();\r\n        }).then(function (keysToDelete) {\r\n            if (keysToDelete.length === 0)\r\n                return; // Done.\r\n            return db._changes.bulkDelete(keysToDelete).then(function () {\r\n                // If not done garbage collecting, reschedule a continuation of it until done.\r\n                if (keysToDelete.length === CHUNK_SIZE) {\r\n                    // Limit reached. Changes are there are more job to do. Schedule again:\r\n                    setTimeout(function () { return db.isOpen() && deleteOldChanges(db); }, 500);\r\n                }\r\n            });\r\n        });\r\n    }).catch(function () {\r\n        // The operation is not crucial. A failure could almost only be due to that database has been closed.\r\n        // No need to log this.\r\n    });\r\n}\n\n/* ==========================================================================\r\n *                           dexie-observable.js\r\n * ==========================================================================\r\n *\r\n * Dexie addon for observing database changes not just on local db instance\r\n * but also on other instances, tabs and windows.\r\n *\r\n * Comprises a base framework for dexie-syncable.js\r\n *\r\n * By David Fahlander, david.fahlander@gmail.com,\r\n *    Nikolas Poniros, https://github.com/nponiros\r\n *\r\n * ==========================================================================\r\n *\r\n * Version {version}, {date}\r\n *\r\n * http://dexie.org\r\n *\r\n * Apache License Version 2.0, January 2004, http://www.apache.org/licenses/\r\n *\r\n */\r\nvar global = self;\r\n/** class DatabaseChange\r\n    *\r\n    *  Object contained by the _changes table.\r\n    */\r\nvar DatabaseChange = __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].defineClass({\r\n    rev: Number,\r\n    source: String,\r\n    table: String,\r\n    key: Object,\r\n    type: Number,\r\n    obj: Object,\r\n    mods: Object,\r\n    oldObj: Object // DELETE: oldObj contains the object deleted. UPDATE: oldObj contains the old object before updates applied.\r\n});\r\n// Import some usable helper functions\r\nvar override = __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].override;\r\nvar Promise = __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].Promise;\r\nvar browserIsShuttingDown = false;\r\nfunction Observable(db) {\r\n    /// <summary>\r\n    ///   Extension to Dexie providing Syncronization capabilities to Dexie.\r\n    /// </summary>\r\n    /// <param name=\"db\" type=\"Dexie\"></param>\r\n    var NODE_TIMEOUT = 20000, // 20 seconds before local db instances are timed out. This is so that old changes can be deleted when not needed and to garbage collect old _syncNodes objects.\r\n    HIBERNATE_GRACE_PERIOD = 20000, // 20 seconds\r\n    // LOCAL_POLL: The time to wait before polling local db for changes and cleaning up old nodes. \r\n    // Polling for changes is a fallback only needed in certain circomstances (when the onstorage event doesnt reach all listeners - when different browser windows doesnt share the same process)\r\n    LOCAL_POLL = 500, // 500 ms. In real-world there will be this value + the time it takes to poll(). A small value is needed in Workers where we cannot rely on storage event.\r\n    HEARTBEAT_INTERVAL = NODE_TIMEOUT - 5000;\r\n    var localStorage = Observable.localStorageImpl;\r\n    /** class SyncNode\r\n        *\r\n        * Object contained in the _syncNodes table.\r\n        */\r\n    var SyncNode = __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].defineClass({\r\n        //id: Number,\r\n        myRevision: Number,\r\n        type: String,\r\n        lastHeartBeat: Number,\r\n        deleteTimeStamp: Number,\r\n        url: String,\r\n        isMaster: Number,\r\n        // Below properties should be extended in Dexie.Syncable. Not here. They apply to remote nodes only (type == \"remote\"):\r\n        syncProtocol: String,\r\n        syncContext: null,\r\n        syncOptions: Object,\r\n        connected: false,\r\n        status: Number,\r\n        appliedRemoteRevision: null,\r\n        remoteBaseRevisions: [{ local: Number, remote: null }],\r\n        dbUploadState: {\r\n            tablesToUpload: [String],\r\n            currentTable: String,\r\n            currentKey: null,\r\n            localBaseRevision: Number\r\n        }\r\n    });\r\n    db.observable = {};\r\n    db.observable.SyncNode = SyncNode;\r\n    var wakeupObservers = initWakeupObservers(db, Observable, localStorage);\r\n    var overrideCreateTransaction = initOverrideCreateTransaction(db, wakeupObservers);\r\n    var crudMonitor = initCrudMonitor(db);\r\n    var overrideOpen = initOverrideOpen(db, SyncNode, crudMonitor);\r\n    var mySyncNode = { node: null };\r\n    var intercomm = initIntercomm(db, Observable, SyncNode, mySyncNode, localStorage);\r\n    var onIntercomm = intercomm.onIntercomm;\r\n    var consumeIntercommMessages = intercomm.consumeIntercommMessages;\r\n    // Allow other addons to access the local sync node. May be needed by Dexie.Syncable.\r\n    Object.defineProperty(db, \"_localSyncNode\", {\r\n        get: function () { return mySyncNode.node; }\r\n    });\r\n    var pollHandle = null, heartbeatHandle = null;\r\n    if (__WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].fake) {\r\n        // This code will never run.\r\n        // It's here just to enable auto-complete in visual studio - helps a lot when writing code.\r\n        db.version(1).stores({\r\n            _syncNodes: \"++id,myRevision,lastHeartBeat\",\r\n            _changes: \"++rev\",\r\n            _intercomm: \"++id,destinationNode\",\r\n            _uncommittedChanges: \"++id,node\"\r\n        });\r\n        db._syncNodes.mapToClass(SyncNode);\r\n        db._changes.mapToClass(DatabaseChange);\r\n        mySyncNode.node = new SyncNode({\r\n            myRevision: 0,\r\n            type: \"local\",\r\n            lastHeartBeat: Date.now(),\r\n            deleteTimeStamp: null\r\n        });\r\n    }\r\n    //\r\n    // Override parsing the stores to add \"_changes\" and \"_syncNodes\" tables.\r\n    // It also adds UUID support for the primary key and sets tables as observable tables.\r\n    //\r\n    db.Version.prototype._parseStoresSpec = override(db.Version.prototype._parseStoresSpec, overrideParseStoresSpec);\r\n    // changes event on db:\r\n    db.on.addEventType({\r\n        changes: 'asap',\r\n        cleanup: [promisableChain, nop],\r\n        message: 'asap'\r\n    });\r\n    //\r\n    // Override transaction creation to always include the \"_changes\" store when any observable store is involved.\r\n    //\r\n    db._createTransaction = override(db._createTransaction, overrideCreateTransaction);\r\n    // If Observable.latestRevsion[db.name] is undefined, set it to 0 so that comparing against it always works.\r\n    // You might think that it will always be undefined before this call, but in case another Dexie instance in the same\r\n    // window with the same database name has been created already, this static property will already be set correctly.\r\n    Observable.latestRevision[db.name] = Observable.latestRevision[db.name] || 0;\r\n    //\r\n    // Override open to setup hooks for db changes and map the _syncNodes table to class\r\n    //\r\n    db.open = override(db.open, overrideOpen);\r\n    db.close = override(db.close, function (origClose) {\r\n        return function () {\r\n            if (db.dynamicallyOpened())\r\n                return origClose.apply(this, arguments); // Don't observe dynamically opened databases.\r\n            // Teardown our framework.\r\n            if (wakeupObservers.timeoutHandle) {\r\n                clearTimeout(wakeupObservers.timeoutHandle);\r\n                delete wakeupObservers.timeoutHandle;\r\n            }\r\n            Observable.on('latestRevisionIncremented').unsubscribe(onLatestRevisionIncremented);\r\n            Observable.on('suicideNurseCall').unsubscribe(onSuicide);\r\n            Observable.on('intercomm').unsubscribe(onIntercomm);\r\n            Observable.on('beforeunload').unsubscribe(onBeforeUnload);\r\n            // Inform other db instances in same window that we are dying:\r\n            if (mySyncNode.node && mySyncNode.node.id) {\r\n                Observable.on.suicideNurseCall.fire(db.name, mySyncNode.node.id);\r\n                // Inform other windows as well:\r\n                if (localStorage) {\r\n                    localStorage.setItem('Dexie.Observable/deadnode:' + mySyncNode.node.id.toString() + '/' + db.name, \"dead\"); // In IE, this will also wakeup our own window. cleanup() may trigger twice per other db instance. But that doesnt to anything.\r\n                }\r\n                mySyncNode.node.deleteTimeStamp = 1; // One millisecond after 1970. Makes it occur in the past but still keeps it truthy.\r\n                mySyncNode.node.lastHeartBeat = 0;\r\n                db._syncNodes.put(mySyncNode.node); // This async operation may be cancelled since the browser is closing down now.\r\n                mySyncNode.node = null;\r\n            }\r\n            if (pollHandle)\r\n                clearTimeout(pollHandle);\r\n            pollHandle = null;\r\n            if (heartbeatHandle)\r\n                clearTimeout(heartbeatHandle);\r\n            heartbeatHandle = null;\r\n            return origClose.apply(this, arguments);\r\n        };\r\n    });\r\n    // Override Dexie.delete() in order to delete Observable.latestRevision[db.name].\r\n    db.delete = override(db.delete, function (origDelete) {\r\n        return function () {\r\n            return origDelete.apply(this, arguments).then(function (result) {\r\n                // Reset Observable.latestRevision[db.name]\r\n                Observable.latestRevision[db.name] = 0;\r\n                return result;\r\n            });\r\n        };\r\n    });\r\n    // When db opens, make sure to start monitor any changes before other db operations will start.\r\n    db.on(\"ready\", function startObserving() {\r\n        if (db.dynamicallyOpened())\r\n            return db; // Don't observe dynamically opened databases.\r\n        return db.table(\"_changes\").orderBy(\"rev\").last(function (lastChange) {\r\n            // Since startObserving() is called before database open() method, this will be the first database operation enqueued to db.\r\n            // Therefore we know that the retrieved value will be This query will\r\n            var latestRevision = (lastChange ? lastChange.rev : 0);\r\n            mySyncNode.node = new SyncNode({\r\n                myRevision: latestRevision,\r\n                type: \"local\",\r\n                lastHeartBeat: Date.now(),\r\n                deleteTimeStamp: null,\r\n                isMaster: 0\r\n            });\r\n            if (Observable.latestRevision[db.name] < latestRevision) {\r\n                // Side track . For correctness whenever setting Observable.latestRevision[db.name] we must make sure the event is fired if increased:\r\n                // There are other db instances in same window that hasnt yet been informed about a new revision\r\n                Observable.latestRevision[db.name] = latestRevision;\r\n                __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].ignoreTransaction(function () {\r\n                    Observable.on.latestRevisionIncremented.fire(latestRevision);\r\n                });\r\n            }\r\n            // Add new sync node or if this is a reopening of the database after a close() call, update it.\r\n            return db.transaction('rw', '_syncNodes', function () {\r\n                return db._syncNodes\r\n                    .where('isMaster').equals(1)\r\n                    .first(function (currentMaster) {\r\n                    if (!currentMaster) {\r\n                        // There's no master. We must be the master\r\n                        mySyncNode.node.isMaster = 1;\r\n                    }\r\n                    else if (currentMaster.lastHeartBeat < Date.now() - NODE_TIMEOUT) {\r\n                        // Master have been inactive for too long\r\n                        // Take over mastership\r\n                        mySyncNode.node.isMaster = 1;\r\n                        currentMaster.isMaster = 0;\r\n                        return db._syncNodes.put(currentMaster);\r\n                    }\r\n                }).then(function () {\r\n                    // Add our node to DB and start subscribing to events\r\n                    return db._syncNodes.add(mySyncNode.node).then(function () {\r\n                        Observable.on('latestRevisionIncremented', onLatestRevisionIncremented); // Wakeup when a new revision is available.\r\n                        Observable.on('beforeunload', onBeforeUnload);\r\n                        Observable.on('suicideNurseCall', onSuicide);\r\n                        Observable.on('intercomm', onIntercomm);\r\n                        // Start polling for changes and do cleanups:\r\n                        pollHandle = setTimeout(poll, LOCAL_POLL);\r\n                        // Start heartbeat\r\n                        heartbeatHandle = setTimeout(heartbeat, HEARTBEAT_INTERVAL);\r\n                    });\r\n                });\r\n            }).then(function () {\r\n                cleanup();\r\n            });\r\n        });\r\n    }, true); // True means the on(ready) event will survive a db reopening (db.close() / db.open()).\r\n    var handledRevision = 0;\r\n    function onLatestRevisionIncremented(dbname, latestRevision) {\r\n        if (dbname === db.name) {\r\n            if (handledRevision >= latestRevision)\r\n                return; // Make sure to only run once per revision. (Workaround for IE triggering storage event on same window)\r\n            handledRevision = latestRevision;\r\n            __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].vip(function () {\r\n                readChanges(latestRevision).catch('DatabaseClosedError', function () {\r\n                    // Handle database closed error gracefully while reading changes.\r\n                    // Don't trigger 'unhandledrejection'.\r\n                    // Even though we intercept the close() method, it might be called when in the middle of\r\n                    // reading changes and then that flow will cancel with DatabaseClosedError.\r\n                });\r\n            });\r\n        }\r\n    }\r\n    function readChanges(latestRevision, recursion, wasPartial) {\r\n        // Whenever changes are read, fire db.on(\"changes\") with the array of changes. Eventually, limit the array to 1000 entries or so (an entire database is\r\n        // downloaded from server AFTER we are initiated. For example, if first sync call fails, then after a while we get reconnected. However, that scenario\r\n        // should be handled in case database is totally empty we should fail if sync is not available)\r\n        if (!recursion && readChanges.ongoingOperation) {\r\n            // We are already reading changes. Prohibit a parallell execution of this which would lead to duplicate trigging of 'changes' event.\r\n            // Instead, the callback in toArray() will always check Observable.latestRevision[db.name] to see if it has changed and if so, re-launch readChanges().\r\n            // The caller should get the Promise instance from the ongoing operation so that the then() method will resolve when operation is finished.\r\n            return readChanges.ongoingOperation;\r\n        }\r\n        var partial = false;\r\n        var ourSyncNode = mySyncNode.node; // Because mySyncNode can suddenly be set to null on database close, and worse, can be set to a new value if database is reopened.\r\n        if (!ourSyncNode) {\r\n            return Promise.reject(new __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].DatabaseClosedError());\r\n        }\r\n        var LIMIT = 1000;\r\n        var promise = db._changes.where(\"rev\").above(ourSyncNode.myRevision).limit(LIMIT).toArray(function (changes) {\r\n            if (changes.length > 0) {\r\n                var lastChange = changes[changes.length - 1];\r\n                partial = (changes.length === LIMIT);\r\n                db.on('changes').fire(changes, partial);\r\n                ourSyncNode.myRevision = lastChange.rev;\r\n            }\r\n            else if (wasPartial) {\r\n                // No more changes, BUT since we have triggered on('changes') with partial = true,\r\n                // we HAVE TO trigger changes again with empty list and partial = false\r\n                db.on('changes').fire([], false);\r\n            }\r\n            var ourNodeStillExists = false;\r\n            return db._syncNodes.where(':id').equals(ourSyncNode.id).modify(function (syncNode) {\r\n                ourNodeStillExists = true;\r\n                syncNode.lastHeartBeat = Date.now(); // Update heart beat (not nescessary, but why not!)\r\n                syncNode.deleteTimeStamp = null; // Reset \"deleteTimeStamp\" flag if it was there.\r\n                syncNode.myRevision = Math.max(syncNode.myRevision, ourSyncNode.myRevision);\r\n            }).then(function () { return ourNodeStillExists; });\r\n        }).then(function (ourNodeStillExists) {\r\n            if (!ourNodeStillExists) {\r\n                // My node has been deleted. We must have been lazy and got removed by another node.\r\n                if (browserIsShuttingDown) {\r\n                    throw new Error(\"Browser is shutting down\");\r\n                }\r\n                else {\r\n                    db.close();\r\n                    console.error(\"Out of sync\"); // TODO: What to do? Reload the page?\r\n                    if (global.location)\r\n                        global.location.reload(true);\r\n                    throw new Error(\"Out of sync\"); // Will make current promise reject\r\n                }\r\n            }\r\n            // Check if more changes have come since we started reading changes in the first place. If so, relaunch readChanges and let the ongoing promise not\r\n            // resolve until all changes have been read.\r\n            if (partial || Observable.latestRevision[db.name] > ourSyncNode.myRevision) {\r\n                // Either there were more than 1000 changes or additional changes where added while we were reading these changes,\r\n                // In either case, call readChanges() again until we're done.\r\n                return readChanges(Observable.latestRevision[db.name], (recursion || 0) + 1, partial);\r\n            }\r\n        }).finally(function () {\r\n            delete readChanges.ongoingOperation;\r\n        });\r\n        if (!recursion) {\r\n            readChanges.ongoingOperation = promise;\r\n        }\r\n        return promise;\r\n    }\r\n    /**\r\n     * The reason we need heartbeat in parallell with poll() is due to the risk of long-running\r\n     * transactions while syncing changes from server to client in Dexie.Syncable. That transaction will\r\n     * include _changes (which will block readChanges()) but not _syncNodes. So this heartbeat will go on\r\n     * during that changes are being applied and update our lastHeartBeat property while poll() is waiting.\r\n     * When cleanup() (who also is blocked by the sync) wakes up, it won't kill the master node because this\r\n     * heartbeat job will have updated the master node's heartbeat during the long-running sync transaction.\r\n     *\r\n     * If we did not have this heartbeat, and a server send lots of changes that took more than NODE_TIMEOUT\r\n     * (20 seconds), another node waking up after the sync would kill the master node and take over because\r\n     * it would believe it was dead.\r\n     */\r\n    function heartbeat() {\r\n        heartbeatHandle = null;\r\n        var currentInstance = mySyncNode.node && mySyncNode.node.id;\r\n        if (!currentInstance)\r\n            return;\r\n        db.transaction('rw!', db._syncNodes, function () {\r\n            db._syncNodes.where({ id: currentInstance }).first(function (ourSyncNode) {\r\n                if (!ourSyncNode) {\r\n                    // We do not exist anymore. Call db.close() to teardown polls etc.\r\n                    if (db.isOpen())\r\n                        db.close();\r\n                    return;\r\n                }\r\n                ourSyncNode.lastHeartBeat = Date.now();\r\n                ourSyncNode.deleteTimeStamp = null; // Reset \"deleteTimeStamp\" flag if it was there.\r\n                return db._syncNodes.put(ourSyncNode);\r\n            });\r\n        }).catch('DatabaseClosedError', function () {\r\n            // Ignore silently\r\n        }).finally(function () {\r\n            if (mySyncNode.node && mySyncNode.node.id === currentInstance && db.isOpen()) {\r\n                heartbeatHandle = setTimeout(heartbeat, HEARTBEAT_INTERVAL);\r\n            }\r\n        });\r\n    }\r\n    function poll() {\r\n        pollHandle = null;\r\n        var currentInstance = mySyncNode.node && mySyncNode.node.id;\r\n        if (!currentInstance)\r\n            return;\r\n        __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].vip(function () {\r\n            readChanges(Observable.latestRevision[db.name]).then(cleanup).then(consumeIntercommMessages)\r\n                .catch('DatabaseClosedError', function () {\r\n                // Handle database closed error gracefully while reading changes.\r\n                // Don't trigger 'unhandledrejection'.\r\n                // Even though we intercept the close() method, it might be called when in the middle of\r\n                // reading changes and then that flow will cancel with DatabaseClosedError.\r\n            })\r\n                .finally(function () {\r\n                // Poll again in given interval:\r\n                if (mySyncNode.node && mySyncNode.node.id === currentInstance && db.isOpen()) {\r\n                    pollHandle = setTimeout(poll, LOCAL_POLL);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    function cleanup() {\r\n        var ourSyncNode = mySyncNode.node;\r\n        if (!ourSyncNode)\r\n            return Promise.reject(new __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].DatabaseClosedError());\r\n        return db.transaction('rw', '_syncNodes', '_changes', '_intercomm', function () {\r\n            // Cleanup dead local nodes that has no heartbeat for over a minute\r\n            // Dont do the following:\r\n            //nodes.where(\"lastHeartBeat\").below(Date.now() - NODE_TIMEOUT).and(function (node) { return node.type == \"local\"; }).delete();\r\n            // Because client may have been in hybernate mode and recently woken up. That would lead to deletion of all nodes.\r\n            // Instead, we should mark any old nodes for deletion in a minute or so. If they still dont wakeup after that minute we could consider them dead.\r\n            var weBecameMaster = false;\r\n            db._syncNodes.where(\"lastHeartBeat\").below(Date.now() - NODE_TIMEOUT).filter(function (node) { return node.type === 'local'; }).modify(function (node) {\r\n                if (node.deleteTimeStamp && node.deleteTimeStamp < Date.now()) {\r\n                    // Delete the node.\r\n                    delete this.value;\r\n                    // Cleanup localStorage \"deadnode:\" entry for this node (localStorage API was used to wakeup other windows (onstorage event) - an event type missing in indexedDB.)\r\n                    if (localStorage) {\r\n                        localStorage.removeItem('Dexie.Observable/deadnode:' + node.id + '/' + db.name);\r\n                    }\r\n                    // Check if we are deleting a master node\r\n                    if (node.isMaster) {\r\n                        // The node we are deleting is master. We must take over that role.\r\n                        // OK to call nodes.update(). No need to call Dexie.vip() because nodes is opened in existing transaction!\r\n                        db._syncNodes.update(ourSyncNode, { isMaster: 1 });\r\n                        weBecameMaster = true;\r\n                    }\r\n                    // Cleanup intercomm messages destinated to the node being deleted.\r\n                    // Those that waits for reply should be redirected to us.\r\n                    db._intercomm.where({ destinationNode: node.id }).modify(function (msg) {\r\n                        if (msg.wantReply)\r\n                            msg.destinationNode = ourSyncNode.id;\r\n                        else\r\n                            // Delete the message from DB and if someone is waiting for reply, let ourselved answer the request.\r\n                            delete this.value;\r\n                    });\r\n                }\r\n                else if (!node.deleteTimeStamp) {\r\n                    // Mark the node for deletion\r\n                    node.deleteTimeStamp = Date.now() + HIBERNATE_GRACE_PERIOD;\r\n                }\r\n            }).then(function () {\r\n                // Cleanup old revisions that no node is interested of.\r\n                Observable.deleteOldChanges(db);\r\n                return db.on(\"cleanup\").fire(weBecameMaster);\r\n            });\r\n        });\r\n    }\r\n    function onBeforeUnload() {\r\n        // Mark our own sync node for deletion.\r\n        if (!mySyncNode.node)\r\n            return;\r\n        browserIsShuttingDown = true;\r\n        mySyncNode.node.deleteTimeStamp = 1; // One millisecond after 1970. Makes it occur in the past but still keeps it truthy.\r\n        mySyncNode.node.lastHeartBeat = 0;\r\n        db._syncNodes.put(mySyncNode.node); // This async operation may be cancelled since the browser is closing down now.\r\n        Observable.wereTheOneDying = true; // If other nodes in same window wakes up by this call, make sure they dont start taking over mastership and stuff...\r\n        // Inform other windows that we're gone, so that they may take over our role if needed. Setting localStorage item below will trigger Observable.onStorage, which will trigger onSuicie() below:\r\n        if (localStorage) {\r\n            localStorage.setItem('Dexie.Observable/deadnode:' + mySyncNode.node.id.toString() + '/' + db.name, \"dead\"); // In IE, this will also wakeup our own window. However, that is doublechecked in nursecall subscriber below.\r\n        }\r\n    }\r\n    function onSuicide(dbname, nodeID) {\r\n        if (dbname === db.name && !Observable.wereTheOneDying) {\r\n            // Make sure it's dead indeed. Second bullet. Why? Because it has marked itself for deletion in the onbeforeunload event, which is fired just before window dies.\r\n            // It's own call to put() may have been cancelled.\r\n            // Note also that in IE, this event may be called twice, but that doesnt harm!\r\n            __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].vip(function () {\r\n                db._syncNodes.update(nodeID, { deleteTimeStamp: 1, lastHeartBeat: 0 }).then(cleanup);\r\n            });\r\n        }\r\n    }\r\n}\r\n//\r\n// Static properties and methods\r\n// \r\nObservable.latestRevision = {}; // Latest revision PER DATABASE. Example: Observable.latestRevision.FriendsDB = 37;\r\nObservable.on = __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].Events(null, \"latestRevisionIncremented\", \"suicideNurseCall\", \"intercomm\", \"beforeunload\"); // fire(dbname, value);\r\nObservable.createUUID = createUUID;\r\nObservable.deleteOldChanges = deleteOldChanges;\r\nObservable._onStorage = initOnStorage(Observable);\r\nObservable._onBeforeUnload = function () {\r\n    Observable.on.beforeunload.fire();\r\n};\r\ntry {\r\n    Observable.localStorageImpl = global.localStorage;\r\n}\r\ncatch (ex) { }\r\n//\r\n// Map window events to static events in Dexie.Observable:\r\n//\r\nif (global.addEventListener) {\r\n    global.addEventListener(\"storage\", Observable._onStorage);\r\n    global.addEventListener(\"beforeunload\", Observable._onBeforeUnload);\r\n}\r\n// Register addon:\r\n__WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].Observable = Observable;\r\n__WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].addons.push(Observable);\n\n/* harmony default export */ __webpack_exports__[\"a\"] = Observable;\n//# sourceMappingURL=dexie-observable.es.js.map\n\n\n/***/ }),\n/* 37 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = { \"default\": __webpack_require__(78), __esModule: true };\n\n/***/ }),\n/* 38 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\n\nvar _iterator = __webpack_require__(69);\n\nvar _iterator2 = _interopRequireDefault(_iterator);\n\nvar _symbol = __webpack_require__(68);\n\nvar _symbol2 = _interopRequireDefault(_symbol);\n\nvar _typeof = typeof _symbol2.default === \"function\" && typeof _iterator2.default === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === \"function\" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? \"symbol\" : typeof obj; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = typeof _symbol2.default === \"function\" && _typeof(_iterator2.default) === \"symbol\" ? function (obj) {\n  return typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);\n} : function (obj) {\n  return obj && typeof _symbol2.default === \"function\" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? \"symbol\" : typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);\n};\n\n/***/ }),\n/* 39 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = __webpack_require__(13)\n  , TAG = __webpack_require__(1)('toStringTag')\n  // ES3 wrong here\n  , ARG = cof(function(){ return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function(it, key){\n  try {\n    return it[key];\n  } catch(e){ /* empty */ }\n};\n\nmodule.exports = function(it){\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n\n/***/ }),\n/* 40 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(2).document && document.documentElement;\n\n/***/ }),\n/* 41 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = !__webpack_require__(4) && !__webpack_require__(10)(function(){\n  return Object.defineProperty(__webpack_require__(26)('div'), 'a', {get: function(){ return 7; }}).a != 7;\n});\n\n/***/ }),\n/* 42 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = __webpack_require__(13);\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n\n/***/ }),\n/* 43 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar LIBRARY        = __webpack_require__(16)\n  , $export        = __webpack_require__(5)\n  , redefine       = __webpack_require__(49)\n  , hide           = __webpack_require__(8)\n  , has            = __webpack_require__(7)\n  , Iterators      = __webpack_require__(15)\n  , $iterCreate    = __webpack_require__(94)\n  , setToStringTag = __webpack_require__(19)\n  , getPrototypeOf = __webpack_require__(46)\n  , ITERATOR       = __webpack_require__(1)('iterator')\n  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`\n  , FF_ITERATOR    = '@@iterator'\n  , KEYS           = 'keys'\n  , VALUES         = 'values';\n\nvar returnThis = function(){ return this; };\n\nmodule.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function(kind){\n    if(!BUGGY && kind in proto)return proto[kind];\n    switch(kind){\n      case KEYS: return function keys(){ return new Constructor(this, kind); };\n      case VALUES: return function values(){ return new Constructor(this, kind); };\n    } return function entries(){ return new Constructor(this, kind); };\n  };\n  var TAG        = NAME + ' Iterator'\n    , DEF_VALUES = DEFAULT == VALUES\n    , VALUES_BUG = false\n    , proto      = Base.prototype\n    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]\n    , $default   = $native || getMethod(DEFAULT)\n    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined\n    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native\n    , methods, key, IteratorPrototype;\n  // Fix native\n  if($anyNative){\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));\n    if(IteratorPrototype !== Object.prototype){\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if(DEF_VALUES && $native && $native.name !== VALUES){\n    VALUES_BUG = true;\n    $default = function values(){ return $native.call(this); };\n  }\n  // Define iterator\n  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG]  = returnThis;\n  if(DEFAULT){\n    methods = {\n      values:  DEF_VALUES ? $default : getMethod(VALUES),\n      keys:    IS_SET     ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if(FORCED)for(key in methods){\n      if(!(key in proto))redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n\n/***/ }),\n/* 44 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar pIE            = __webpack_require__(17)\n  , createDesc     = __webpack_require__(18)\n  , toIObject      = __webpack_require__(9)\n  , toPrimitive    = __webpack_require__(33)\n  , has            = __webpack_require__(7)\n  , IE8_DOM_DEFINE = __webpack_require__(41)\n  , gOPD           = Object.getOwnPropertyDescriptor;\n\nexports.f = __webpack_require__(4) ? gOPD : function getOwnPropertyDescriptor(O, P){\n  O = toIObject(O);\n  P = toPrimitive(P, true);\n  if(IE8_DOM_DEFINE)try {\n    return gOPD(O, P);\n  } catch(e){ /* empty */ }\n  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);\n};\n\n/***/ }),\n/* 45 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\nvar $keys      = __webpack_require__(47)\n  , hiddenKeys = __webpack_require__(27).concat('length', 'prototype');\n\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){\n  return $keys(O, hiddenKeys);\n};\n\n/***/ }),\n/* 46 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has         = __webpack_require__(7)\n  , toObject    = __webpack_require__(20)\n  , IE_PROTO    = __webpack_require__(30)('IE_PROTO')\n  , ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function(O){\n  O = toObject(O);\n  if(has(O, IE_PROTO))return O[IE_PROTO];\n  if(typeof O.constructor == 'function' && O instanceof O.constructor){\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};\n\n/***/ }),\n/* 47 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar has          = __webpack_require__(7)\n  , toIObject    = __webpack_require__(9)\n  , arrayIndexOf = __webpack_require__(87)(false)\n  , IE_PROTO     = __webpack_require__(30)('IE_PROTO');\n\nmodule.exports = function(object, names){\n  var O      = toIObject(object)\n    , i      = 0\n    , result = []\n    , key;\n  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while(names.length > i)if(has(O, key = names[i++])){\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n\n/***/ }),\n/* 48 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// most Object methods by ES6 should accept primitives\nvar $export = __webpack_require__(5)\n  , core    = __webpack_require__(0)\n  , fails   = __webpack_require__(10);\nmodule.exports = function(KEY, exec){\n  var fn  = (core.Object || {})[KEY] || Object[KEY]\n    , exp = {};\n  exp[KEY] = exec(fn);\n  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);\n};\n\n/***/ }),\n/* 49 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(8);\n\n/***/ }),\n/* 50 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar ctx                = __webpack_require__(14)\n  , invoke             = __webpack_require__(90)\n  , html               = __webpack_require__(40)\n  , cel                = __webpack_require__(26)\n  , global             = __webpack_require__(2)\n  , process            = global.process\n  , setTask            = global.setImmediate\n  , clearTask          = global.clearImmediate\n  , MessageChannel     = global.MessageChannel\n  , counter            = 0\n  , queue              = {}\n  , ONREADYSTATECHANGE = 'onreadystatechange'\n  , defer, channel, port;\nvar run = function(){\n  var id = +this;\n  if(queue.hasOwnProperty(id)){\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\nvar listener = function(event){\n  run.call(event.data);\n};\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif(!setTask || !clearTask){\n  setTask = function setImmediate(fn){\n    var args = [], i = 1;\n    while(arguments.length > i)args.push(arguments[i++]);\n    queue[++counter] = function(){\n      invoke(typeof fn == 'function' ? fn : Function(fn), args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clearTask = function clearImmediate(id){\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if(__webpack_require__(13)(process) == 'process'){\n    defer = function(id){\n      process.nextTick(ctx(run, id, 1));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  } else if(MessageChannel){\n    channel = new MessageChannel;\n    port    = channel.port2;\n    channel.port1.onmessage = listener;\n    defer = ctx(port.postMessage, port, 1);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){\n    defer = function(id){\n      global.postMessage(id + '', '*');\n    };\n    global.addEventListener('message', listener, false);\n  // IE8-\n  } else if(ONREADYSTATECHANGE in cel('script')){\n    defer = function(id){\n      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){\n        html.removeChild(this);\n        run.call(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function(id){\n      setTimeout(ctx(run, id, 1), 0);\n    };\n  }\n}\nmodule.exports = {\n  set:   setTask,\n  clear: clearTask\n};\n\n/***/ }),\n/* 51 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// 7.1.15 ToLength\nvar toInteger = __webpack_require__(32)\n  , min       = Math.min;\nmodule.exports = function(it){\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n\n/***/ }),\n/* 52 */\n/***/ (function(module, exports) {\n\n\n\n/***/ }),\n/* 53 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar $at  = __webpack_require__(107)(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\n__webpack_require__(43)(String, 'String', function(iterated){\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function(){\n  var O     = this._t\n    , index = this._i\n    , point;\n  if(index >= O.length)return {value: undefined, done: true};\n  point = $at(O, index);\n  this._i += point.length;\n  return {value: point, done: false};\n});\n\n/***/ }),\n/* 54 */\n/***/ (function(module, exports, __webpack_require__) {\n\n__webpack_require__(110);\nvar global        = __webpack_require__(2)\n  , hide          = __webpack_require__(8)\n  , Iterators     = __webpack_require__(15)\n  , TO_STRING_TAG = __webpack_require__(1)('toStringTag');\n\nfor(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){\n  var NAME       = collections[i]\n    , Collection = global[NAME]\n    , proto      = Collection && Collection.prototype;\n  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);\n  Iterators[NAME] = Iterators.Array;\n}\n\n/***/ }),\n/* 55 */\n/***/ (function(module, exports) {\n\nvar g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n/***/ }),\n/* 56 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_promise__ = __webpack_require__(23);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_promise___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_promise__);\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = initConnectionStatus;\n\nvar CONNECTION_CHECK_PATH = 'check';\n\nfunction initConnectionStatus(global) {\n  function checkServerConnection(url) {\n    return global.fetch(url, { method: 'HEAD' });\n  }\n\n  function isOnline(url) {\n    // If we have no URL we are offline\n    if (!url) {\n      return __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_promise___default.a.resolve(false);\n    }\n    var serverUrl = url[url.length - 1] === '/' ? '' + url + CONNECTION_CHECK_PATH : url + '/' + CONNECTION_CHECK_PATH;\n\n    if (global.navigator.onLine) {\n      return checkServerConnection(serverUrl).then(function () {\n        return true;\n      }).catch(function () {\n        return false;\n      });\n    }\n    return __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_promise___default.a.resolve(false);\n  }\n\n  function onlineStatusChanged(url, cb) {\n    global.addEventListener('online', function () {\n      isOnline(url).then(function (status) {\n        cb(status);\n      });\n    });\n\n    global.addEventListener('offline', function () {\n      cb(false);\n    });\n\n    // Set initial status\n    isOnline(url).then(function (status) {\n      cb(status);\n    });\n  }\n\n  return { isOnline: isOnline, onlineStatusChanged: onlineStatusChanged };\n}\n\n/***/ }),\n/* 57 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* eslint guard-for-in:0, no-unused-vars: 0 */\n/**\n * cuid.js\n * Collision-resistant UID generator for browsers and node.\n * Sequential for fast db lookups and recency sorting.\n * Safe for element IDs and server-side lookups.\n *\n * Extracted from CLCTR\n *\n * Copyright (c) Eric Elliott 2012\n * MIT License\n */\n// The file was modified to use ES2015\nvar c = 0;\nvar blockSize = 4;\nvar base = 36;\nvar discreteValues = Math.pow(base, blockSize);\n\nfunction pad(num, size) {\n  var s = '000000000' + num;\n  return s.substr(s.length - size);\n}\n\nfunction randomBlock() {\n  return pad((Math.random() * discreteValues << 0).toString(base), blockSize);\n}\n\nfunction safeCounter() {\n  c = c < discreteValues ? c : 0;\n  c++; // this is not subliminal\n  return c - 1;\n}\n\n// We want to cache the results of this\nvar cache = function calc() {\n  var count = 0;\n\n  for (var i in window) {\n    count++;\n  }\n\n  return count;\n}();\n\nfunction globalCount() {\n  return cache;\n}\n\nfunction browserPrint() {\n  var mimeTypesUAString = (navigator.mimeTypes.length + navigator.userAgent.length).toString(base);\n  return pad(mimeTypesUAString + globalCount().toString(base), 4);\n}\n\nfunction cuid() {\n  // Starting with a lowercase letter makes\n  // it HTML element ID friendly.\n  var letter = 'c'; // hard-coded allows for sequential access\n\n  // timestamp\n  // warning: this exposes the exact date and time\n  // that the uid was created.\n  var timestamp = new Date().getTime().toString(base);\n\n  // A few chars to generate distinct ids for different\n  // clients (so different computers are far less\n  // likely to generate the same id)\n  var fingerprint = browserPrint();\n\n  // Grab some more chars from Math.random()\n  var random = randomBlock() + randomBlock();\n\n  // Prevent same-machine collisions.\n  var counter = pad(safeCounter().toString(base), blockSize);\n\n  return letter + timestamp + counter + fingerprint + random;\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = cuid;\n\n/***/ }),\n/* 58 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = initSync;\n/*\n * Implementation of the ISyncProtocol\n * https://github.com/dfahlander/Dexie.js/wiki/Dexie.Syncable.ISyncProtocol\n */\nfunction initSync(serverComm, isOnline) {\n  return function sync(context, url, options, baseRevision, syncedRevision, changes, partial, applyRemoteChanges, onChangesAccepted, onSuccess, onError) {\n    var request = {\n      // Will not be defined the first time we call the server\n      clientIdentity: context.clientIdentity,\n      baseRevision: baseRevision,\n      partial: partial,\n      changes: changes,\n      syncedRevision: syncedRevision\n    };\n\n    serverComm(url, request, options).then(function (data) {\n      if (!data.success) {\n        // Server didn't accept our changes. Stop trying to sync\n        onError(data.errorMessage, Infinity);\n      } else {\n        // If we have no clientIdentity yet, then this was the first call\n        // Make sure we save the clientIdentity and then schedule the next call\n        if (!context.clientIdentity) {\n          context.clientIdentity = data.clientIdentity;\n          context.save().then(function () {\n            applyRemoteChanges(data.changes, data.currentRevision, data.partial, false);\n            onChangesAccepted();\n            onSuccess({ again: options.pollInterval });\n          }).catch(function (e) {\n            // We failed to save the clientIdentity. Stop trying to sync\n            // We would not be able to get/send any partial data\n            onError(e, Infinity);\n          });\n          // This is a subsequent call.\n          // We already have a clientIdentity so we can just schedule the next call\n        } else {\n          applyRemoteChanges(data.changes, data.currentRevision, data.partial, false);\n          onChangesAccepted();\n          onSuccess({ again: options.pollInterval });\n        }\n      }\n    }).catch(function (e) {\n      isOnline(url).then(function (status) {\n        if (status) {\n          // We were temporarily offline -> retry\n          onError(e, options.pollInterval);\n        } else {\n          // Was probably not just a temp thing -> stop retrying\n          // Synable will automatically disconnect us with an ERROR\n          // and we will have to manually reconnect\n          onError(e, Infinity);\n        }\n      });\n    });\n  };\n}\n\n/***/ }),\n/* 59 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_promise__ = __webpack_require__(23);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_promise___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_promise__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_json_stringify__ = __webpack_require__(62);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_json_stringify___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_json_stringify__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_isomorphic_fetch__ = __webpack_require__(121);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_isomorphic_fetch___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_isomorphic_fetch__);\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = serverComm;\n\n\n\n\nfunction serverComm(url, data, options) {\n  var headers = new Headers();\n  headers.set('Content-Type', 'application/json');\n  var opts = {\n    headers: headers,\n    method: 'POST',\n    body: __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_json_stringify___default()(data),\n    mode: 'cors',\n    credentials: options.credentials\n  };\n  return __WEBPACK_IMPORTED_MODULE_2_isomorphic_fetch___default()(url, opts).then(function (response) {\n    if (response.ok) {\n      // status 200-299\n      return response.json();\n    }\n    return {\n      success: false,\n      errorMessage: 'Some server error occurred'\n    };\n  }, function (error) {\n    // Network failure\n    return __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_promise___default.a.reject(error);\n  });\n}\n\n/***/ }),\n/* 60 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_defineProperty__ = __webpack_require__(72);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_defineProperty___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_defineProperty__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_keys__ = __webpack_require__(66);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_keys___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_keys__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_babel_runtime_core_js_promise__ = __webpack_require__(23);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_babel_runtime_core_js_promise___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_babel_runtime_core_js_promise__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_babel_runtime_core_js_object_assign__ = __webpack_require__(63);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_babel_runtime_core_js_object_assign___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_babel_runtime_core_js_object_assign__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_babel_runtime_core_js_object_get_prototype_of__ = __webpack_require__(65);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_babel_runtime_core_js_object_get_prototype_of___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_babel_runtime_core_js_object_get_prototype_of__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_babel_runtime_helpers_classCallCheck__ = __webpack_require__(70);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_babel_runtime_helpers_classCallCheck___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_babel_runtime_helpers_classCallCheck__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_babel_runtime_helpers_createClass__ = __webpack_require__(71);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_babel_runtime_helpers_createClass___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_babel_runtime_helpers_createClass__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_babel_runtime_helpers_possibleConstructorReturn__ = __webpack_require__(74);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_babel_runtime_helpers_possibleConstructorReturn___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_babel_runtime_helpers_possibleConstructorReturn__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_babel_runtime_helpers_inherits__ = __webpack_require__(73);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_babel_runtime_helpers_inherits___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_babel_runtime_helpers_inherits__);\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = initSyncClient;\n\n\n\n\n\n\n\n\n\nvar SYNCABLE_PROTOCOL = 'sync_client_protocol';\nvar defaultSyncOptions = {\n  pollInterval: 10000, // Poll every 10 seconds\n  credentials: 'omit'\n};\n\nfunction initSyncClient(_ref) {\n  var Dexie = _ref.Dexie,\n      observable = _ref.observable,\n      syncable = _ref.syncable,\n      sync = _ref.sync,\n      isOnline = _ref.isOnline,\n      onlineStatusChanged = _ref.onlineStatusChanged,\n      cuid = _ref.cuid;\n\n  var SyncClient = function (_Dexie) {\n    __WEBPACK_IMPORTED_MODULE_8_babel_runtime_helpers_inherits___default()(SyncClient, _Dexie);\n\n    /*\n     * dbName: string, name for the database\n     * dbVersions: {version: number, stores: Array<Dexie.SchemaDefinition>}\n     * https://github.com/dfahlander/Dexie.js/wiki/Version.stores()\n     */\n    function SyncClient(dbName, dbVersions, partialsThreshold) {\n      __WEBPACK_IMPORTED_MODULE_5_babel_runtime_helpers_classCallCheck___default()(this, SyncClient);\n\n      var _this = __WEBPACK_IMPORTED_MODULE_7_babel_runtime_helpers_possibleConstructorReturn___default()(this, (SyncClient.__proto__ || __WEBPACK_IMPORTED_MODULE_4_babel_runtime_core_js_object_get_prototype_of___default()(SyncClient)).call(this, dbName, { addons: [observable, syncable] }));\n\n      dbVersions.forEach(function (version) {\n        if (version.upgrader) {\n          _this.version(version.version).stores(version.stores).upgrade(version.upgrader);\n        } else {\n          _this.version(version.version).stores(version.stores);\n        }\n      });\n\n      Dexie.Syncable.registerSyncProtocol(SYNCABLE_PROTOCOL, { sync: sync, partialsThreshold: partialsThreshold });\n\n      _this.options = {};\n      _this.urls = [];\n      _this.statusChangeListeners = {};\n\n      _this.syncable.on('statusChanged', function (status, url) {\n        var cb = _this.statusChangeListeners[url];\n        if (cb) {\n          cb(Dexie.Syncable.StatusTexts[status]);\n        }\n      });\n      return _this;\n    }\n\n    __WEBPACK_IMPORTED_MODULE_6_babel_runtime_helpers_createClass___default()(SyncClient, [{\n      key: '_connect',\n      value: function _connect(url, options) {\n        var _this2 = this;\n\n        return this.syncable.connect(SYNCABLE_PROTOCOL, url, options).catch(function (e) {\n          // disconnect when onError is called\n          _this2.disconnect(url);\n          throw e;\n        });\n      }\n\n      /*\n       * options:\n       *   pollInterval: number -> How often to resync\n       */\n\n    }, {\n      key: 'connect',\n      value: function connect(url, options) {\n        var _this3 = this;\n\n        // First call to connect\n        // Setup onlineStatusChanged\n        // Check isOnline before trying to connect using Dexie.Syncable\n        if (this.urls.indexOf(url) === -1) {\n          this.options[url] = __WEBPACK_IMPORTED_MODULE_3_babel_runtime_core_js_object_assign___default()({}, options, defaultSyncOptions);\n\n          return isOnline(url).then(function (status) {\n            if (status) {\n              return _this3._connect(url, _this3.options[url]).then(function () {\n                // Make sure we managed to connect before adding URL\n                // and listener\n                _this3.urls.push(url);\n\n                onlineStatusChanged(url, function (newStatus) {\n                  if (newStatus) {\n                    _this3._connect(url, _this3.options[url]);\n                  } else {\n                    _this3.disconnect(url);\n                  }\n                });\n              });\n            }\n            return __WEBPACK_IMPORTED_MODULE_2_babel_runtime_core_js_promise___default.a.reject(new Error('Is not online'));\n          });\n        }\n        return __WEBPACK_IMPORTED_MODULE_2_babel_runtime_core_js_promise___default.a.resolve();\n      }\n    }, {\n      key: 'disconnect',\n      value: function disconnect(url) {\n        var _this4 = this;\n\n        return this.syncable.disconnect(url).then(function () {\n          _this4.urls = _this4.urls.filter(function (u) {\n            return u !== url;\n          });\n        });\n      }\n    }, {\n      key: 'removeUrl',\n      value: function removeUrl(url) {\n        var _this5 = this;\n\n        return this.syncable.delete(url).then(function () {\n          _this5.urls = _this5.urls.filter(function (u) {\n            return u !== url;\n          });\n          _this5.statusChangeListeners[url] = undefined;\n        });\n      }\n    }, {\n      key: 'statusChange',\n      value: function statusChange(url, cb) {\n        this.statusChangeListeners[url] = cb;\n      }\n\n      /*\n       * Returns a Promise<Array<{url, status}>>\n       */\n\n    }, {\n      key: 'getStatuses',\n      value: function getStatuses() {\n        var _this6 = this;\n\n        return this.syncable.list().then(function (urls) {\n          var promises = urls.map(function (url) {\n            return _this6.syncable.getStatus(url);\n          });\n          return __WEBPACK_IMPORTED_MODULE_2_babel_runtime_core_js_promise___default.a.all(promises).then(function (statuses) {\n            return urls.map(function (url, index) {\n              return {\n                url: url,\n                status: Dexie.Syncable.StatusTexts[statuses[index]]\n              };\n            });\n          });\n        });\n      }\n    }, {\n      key: 'getStatus',\n      value: function getStatus(url) {\n        return this.syncable.getStatus(url).then(function (status) {\n          return Dexie.Syncable.StatusTexts[status];\n        });\n      }\n    }, {\n      key: 'getID',\n      value: function getID() {\n        return SyncClient.getID();\n      }\n    }], [{\n      key: 'getID',\n      value: function getID() {\n        return cuid();\n      }\n    }]);\n\n    return SyncClient;\n  }(Dexie);\n\n  SyncClient.statuses = __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_keys___default()(Dexie.Syncable.Statuses).reduce(function (statuses, statusKey) {\n    return __WEBPACK_IMPORTED_MODULE_3_babel_runtime_core_js_object_assign___default()(statuses, __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_defineProperty___default()({}, statusKey, statusKey));\n  }, {});\n\n  return SyncClient;\n}\n\n/***/ }),\n/* 61 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_dexie__ = __webpack_require__(22);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_dexie_observable__ = __webpack_require__(36);\n/* ========================================================================== \r\n *                           dexie-syncable.js\r\n * ==========================================================================\r\n *\r\n * Dexie addon for syncing indexedDB with remote endpoints.\r\n *\r\n * By David Fahlander, david.fahlander@gmail.com,\r\n *    Nikolas Poniros, https://github.com/nponiros\r\n *\r\n * ==========================================================================\r\n *\r\n * Version {version}, {date}\r\n *\r\n * http://dexie.org\r\n *\r\n * Apache License Version 2.0, January 2004, http://www.apache.org/licenses/\r\n * \r\n */\r\n\n\n\n\nvar Promise$1 = __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].Promise;\r\nfunction initSyncableConnect(db, connect) {\r\n    return function syncableConnect(protocolInstance, protocolName, url, options) {\r\n        if (db.isOpen()) {\r\n            // Database is open\r\n            if (!db._localSyncNode)\r\n                throw new Error(\"Precondition failed: local sync node is missing. Make sure Dexie.Observable is active!\");\r\n            if (db._localSyncNode.isMaster) {\r\n                // We are master node\r\n                return connect(protocolInstance, protocolName, url, options, db._localSyncNode.id);\r\n            }\r\n            else {\r\n                // We are not master node\r\n                // Request master node to do the connect:\r\n                return db.table('_syncNodes').where('isMaster').above(0).first(function (masterNode) {\r\n                    // There will always be a master node. In theory we may self have become master node when we come here. But that's ok. We'll request ourselves.\r\n                    return db.observable.sendMessage('connect', {\r\n                        protocolName: protocolName,\r\n                        url: url,\r\n                        options: options\r\n                    }, masterNode.id, { wantReply: true });\r\n                });\r\n            }\r\n        }\r\n        else if (db.hasBeenClosed()) {\r\n            // Database has been closed.\r\n            return Promise$1.reject(new __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].DatabaseClosedError());\r\n        }\r\n        else if (db.hasFailed()) {\r\n            // Database has failed to open\r\n            return Promise$1.reject(new __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].InvalidStateError(\"Dexie.Syncable: Cannot connect. Database has failed to open\"));\r\n        }\r\n        else {\r\n            // Database not yet open. It may be on its way to open, or open() hasn't yet been called.\r\n            // Wait for it to open, then connect.\r\n            var promise = new Promise$1(function (resolve, reject) {\r\n                db.on(\"ready\", function () {\r\n                    // First, check if this is the very first time we connect to given URL.\r\n                    // Need to know, because if it is, we should stall the promise returned to\r\n                    // db.on('ready') to not be fulfilled until the initial sync has succeeded.\r\n                    return db._syncNodes.get({ url: url }, function (node) {\r\n                        // Ok, now we know whether we should await the connect promise or not.\r\n                        // No matter, we should now connect (will maybe create the SyncNode instance\r\n                        // representing the given URL)\r\n                        var connectPromise = db.syncable.connect(protocolName, url, options);\r\n                        connectPromise.then(resolve, reject); // Resolve the returned promise when connected.\r\n                        // Ok, so let's see if we should suspend DB queries until connected or not:\r\n                        if (node && node.appliedRemoteRevision) {\r\n                            // The very first initial sync has been done so we need not wait\r\n                            // for the connect promise to complete. It can continue in background.\r\n                            // Returning here will resume db.on('ready') and resume all queries that\r\n                            // the application has put to the database.\r\n                            return;\r\n                        }\r\n                        // This was the very first time we connect to the remote server,\r\n                        // we must make sure that the initial sync request succeeeds before resuming\r\n                        // database queries that the application code puts onto the database.\r\n                        // If OFFLINE or other error, don't allow the application to proceed.\r\n                        // We are assuming that an initial sync is essential for the application to\r\n                        // function correctly.\r\n                        return connectPromise;\r\n                    });\r\n                });\r\n                // Force open() to happen. Otherwise connect() may stall forever.\r\n                db.open().catch(function (ex) {\r\n                    // If open fails, db.on('ready') may not have been called and we must\r\n                    // reject promise with InvalidStateError\r\n                    reject(new __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].InvalidStateError(\"Dexie.Syncable: Couldn't connect. Database failed to open\", ex));\r\n                });\r\n            });\r\n            return promise;\r\n        }\r\n    };\r\n}\n\nfunction initPersistedContext(node) {\r\n    //\r\n    // PersistedContext : IPersistedContext\r\n    //\r\n    return (function () {\r\n        function PersistedContext(nodeID, otherProps) {\r\n            this.nodeID = nodeID;\r\n            if (otherProps)\r\n                __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].extend(this, otherProps);\r\n        }\r\n        PersistedContext.prototype.save = function () {\r\n            // Store this instance in the syncContext property of the node it belongs to.\r\n            return __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].vip(function () {\r\n                return node.save();\r\n            });\r\n        };\r\n        return PersistedContext;\r\n    }());\r\n}\n\nfunction initGetOrCreateSyncNode(db, protocolName, url) {\r\n    return function getOrCreateSyncNode(options) {\r\n        return db.transaction('rw', db._syncNodes, db._changes, function () {\r\n            if (!url)\r\n                throw new Error(\"Url cannot be empty\");\r\n            // Returning a promise from transaction scope will make the transaction promise resolve with the value of that promise.\r\n            return db._syncNodes.where(\"url\").equalsIgnoreCase(url).first(function (node) {\r\n                // If we found a node it will be instanceof SyncNode as Dexie.Observable\r\n                // maps to class\r\n                if (node) {\r\n                    var PersistedContext = initPersistedContext(node);\r\n                    // Node already there. Make syncContext become an instance of PersistedContext:\r\n                    node.syncContext = new PersistedContext(node.id, node.syncContext);\r\n                    node.syncProtocol = protocolName; // In case it was changed (would be very strange but...) could happen...\r\n                    node.syncOptions = options; // Options could have been changed\r\n                    db._syncNodes.put(node);\r\n                }\r\n                else {\r\n                    // Create new node and sync everything\r\n                    node = new db.observable.SyncNode();\r\n                    node.myRevision = -1;\r\n                    node.appliedRemoteRevision = null;\r\n                    node.remoteBaseRevisions = [];\r\n                    node.type = \"remote\";\r\n                    node.syncProtocol = protocolName;\r\n                    node.url = url;\r\n                    node.syncOptions = options;\r\n                    node.lastHeartBeat = Date.now();\r\n                    node.dbUploadState = null;\r\n                    var PersistedContext_1 = initPersistedContext(node);\r\n                    __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].Promise.resolve(function () {\r\n                        // If options.initialUpload is explicitely false, set myRevision to currentRevision.\r\n                        if (options.initialUpload === false)\r\n                            return db._changes.toCollection().lastKey(function (currentRevision) {\r\n                                node.myRevision = currentRevision;\r\n                            });\r\n                    }()).then(function () {\r\n                        db._syncNodes.add(node).then(function (nodeID) {\r\n                            node.syncContext = new PersistedContext_1(nodeID); // Update syncContext in db with correct nodeId.\r\n                            db._syncNodes.put(node);\r\n                        });\r\n                    });\r\n                }\r\n                return node; // returning node will make the db.transaction()-promise resolve with this value.\r\n            });\r\n        });\r\n    };\r\n}\n\nfunction initEnqueue(db) {\r\n    return function enqueue(context, fn, instanceID) {\r\n        function _enqueue() {\r\n            if (!context.ongoingOperation) {\r\n                context.ongoingOperation = __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].ignoreTransaction(function () {\r\n                    return __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].vip(function () {\r\n                        return fn();\r\n                    });\r\n                }).finally(function () {\r\n                    delete context.ongoingOperation;\r\n                });\r\n            }\r\n            else {\r\n                context.ongoingOperation = context.ongoingOperation.then(function () {\r\n                    return enqueue(context, fn, instanceID);\r\n                });\r\n            }\r\n            return context.ongoingOperation;\r\n        }\r\n        if (!instanceID) {\r\n            // Caller wants to enqueue it until database becomes open.\r\n            if (db.isOpen()) {\r\n                return _enqueue();\r\n            }\r\n            else {\r\n                return __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].Promise.reject(new __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].DatabaseClosedError());\r\n            }\r\n        }\r\n        else if (db._localSyncNode && instanceID === db._localSyncNode.id) {\r\n            // DB is already open but queue doesn't want it to be queued if database has been closed (request bound to current instance of DB)\r\n            return _enqueue();\r\n        }\r\n        else {\r\n            return __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].Promise.reject(new __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].DatabaseClosedError());\r\n        }\r\n    };\r\n}\n\nfunction initSaveToUncommittedChanges(db, node) {\r\n    return function saveToUncommittedChanges(changes, remoteRevision) {\r\n        return db.transaction('rw!', db._uncommittedChanges, function () {\r\n            return db._uncommittedChanges.bulkAdd(changes.map(function (change) {\r\n                var changeWithNodeId = {\r\n                    node: node.id,\r\n                    type: change.type,\r\n                    table: change.table,\r\n                    key: change.key\r\n                };\r\n                if (change.obj)\r\n                    changeWithNodeId.obj = change.obj;\r\n                if (change.mods)\r\n                    changeWithNodeId.mods = change.mods;\r\n                return changeWithNodeId;\r\n            }));\r\n        }).then(function () {\r\n            node.appliedRemoteRevision = remoteRevision;\r\n            return node.save();\r\n        });\r\n    };\r\n}\n\n// Change Types\r\n// Change Types\r\nvar CREATE = 1;\r\nvar UPDATE = 2;\r\nvar DELETE = 3;\n\nfunction bulkUpdate(table, changes) {\r\n    var keys = changes.map(function (c) { return c.key; });\r\n    var map = {};\r\n    // Retrieve current object of each change to update and map each\r\n    // found object's primary key to the existing object:\r\n    return table.where(':id').anyOf(keys).raw().each(function (obj, cursor) {\r\n        map[cursor.primaryKey + ''] = obj;\r\n    }).then(function () {\r\n        // Filter away changes whose key wasn't found in the local database\r\n        // (we can't update them if we do not know the existing values)\r\n        var updatesThatApply = changes.filter(function (c) { return map.hasOwnProperty(c.key + ''); });\r\n        // Apply modifications onto each existing object (in memory)\r\n        // and generate array of resulting objects to put using bulkPut():\r\n        var objsToPut = updatesThatApply.map(function (c) {\r\n            var curr = map[c.key + ''];\r\n            Object.keys(c.mods).forEach(function (keyPath) {\r\n                __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].setByKeyPath(curr, keyPath, c.mods[keyPath]);\r\n            });\r\n            return curr;\r\n        });\r\n        return table.bulkPut(objsToPut);\r\n    });\r\n}\n\nfunction initApplyChanges(db) {\r\n    return function applyChanges(changes, offset) {\r\n        var length = changes.length;\r\n        // This is the base case for the recursion\r\n        if (offset >= length)\r\n            return __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].Promise.resolve(null);\r\n        var firstChange = changes[offset];\r\n        var i, change;\r\n        for (i = offset + 1; i < length; ++i) {\r\n            change = changes[i];\r\n            if (change.type !== firstChange.type ||\r\n                change.table !== firstChange.table)\r\n                break;\r\n        }\r\n        var table = db.table(firstChange.table);\r\n        var specifyKeys = !table.schema.primKey.keyPath;\r\n        var changesToApply = changes.slice(offset, i);\r\n        var changeType = firstChange.type;\r\n        var bulkPromise = changeType === CREATE ?\r\n            table.bulkPut(changesToApply.map(function (c) { return c.obj; }), specifyKeys ?\r\n                changesToApply.map(function (c) { return c.key; }) : undefined) :\r\n            changeType === UPDATE ?\r\n                bulkUpdate(table, changesToApply) :\r\n                changeType === DELETE ?\r\n                    table.bulkDelete(changesToApply.map(function (c) { return c.key; })) :\r\n                    __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].Promise.resolve(null);\r\n        return bulkPromise.then(function () { return applyChanges(changes, i); });\r\n    };\r\n}\n\nfunction initFinallyCommitAllChanges(db, node) {\r\n    var applyChanges = initApplyChanges(db);\r\n    return function finallyCommitAllChanges(changes, remoteRevision) {\r\n        // 1. Open a write transaction on all tables in DB\r\n        var tablesToIncludeInTrans = db.tables.filter(function (table) { return table.name === '_changes' ||\r\n            table.name === '_uncommittedChanges' ||\r\n            table.schema.observable; });\r\n        return db.transaction('rw!', tablesToIncludeInTrans, function () {\r\n            var trans = __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].currentTransaction;\r\n            var localRevisionBeforeChanges = 0;\r\n            return db._changes.orderBy('rev').last(function (lastChange) {\r\n                // Store what revision we were at before committing the changes\r\n                localRevisionBeforeChanges = (lastChange && lastChange.rev) || 0;\r\n            }).then(function () {\r\n                // Specify the source. Important for the change consumer to ignore changes originated from self!\r\n                trans.source = node.id;\r\n                // 2. Apply uncommitted changes and delete each uncommitted change\r\n                return db._uncommittedChanges.where('node').equals(node.id).toArray();\r\n            }).then(function (uncommittedChanges) {\r\n                return applyChanges(uncommittedChanges, 0);\r\n            }).then(function () {\r\n                return db._uncommittedChanges.where('node').equals(node.id).delete();\r\n            }).then(function () {\r\n                // 3. Apply last chunk of changes\r\n                return applyChanges(changes, 0);\r\n            }).then(function () {\r\n                // Get what revision we are at now:\r\n                return db._changes.orderBy('rev').last();\r\n            }).then(function (lastChange) {\r\n                var currentLocalRevision = (lastChange && lastChange.rev) || 0;\r\n                // 4. Update node states (appliedRemoteRevision, remoteBaseRevisions and eventually myRevision)\r\n                node.appliedRemoteRevision = remoteRevision;\r\n                node.remoteBaseRevisions.push({ remote: remoteRevision, local: currentLocalRevision });\r\n                if (node.myRevision === localRevisionBeforeChanges) {\r\n                    // If server was up-to-date before we added new changes from the server, update myRevision to last change\r\n                    // because server is still up-to-date! This is also important in order to prohibit getLocalChangesForNode() from\r\n                    // ever sending an empty change list to server, which would otherwise be done every second time it would send changes.\r\n                    node.myRevision = currentLocalRevision;\r\n                }\r\n                // Garbage collect remoteBaseRevisions not in use anymore:\r\n                if (node.remoteBaseRevisions.length > 1) {\r\n                    for (var i = node.remoteBaseRevisions.length - 1; i > 0; --i) {\r\n                        if (node.myRevision >= node.remoteBaseRevisions[i].local) {\r\n                            node.remoteBaseRevisions.splice(0, i);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                // We are not including _syncNodes in transaction, so this save() call will execute in its own transaction.\r\n                node.save().catch(function (err) {\r\n                    console.warn(\"Dexie.Syncable: Unable to save SyncNode after applying remote changes: \" + (err.stack || err));\r\n                });\r\n            });\r\n        });\r\n    };\r\n}\n\nfunction getBaseRevisionAndMaxClientRevision(node) {\r\n    /// <param name=\"node\" type=\"db.observable.SyncNode\"></param>\r\n    if (node.remoteBaseRevisions.length === 0)\r\n        return {\r\n            // No remoteBaseRevisions have arrived yet. No limit on clientRevision and provide null as remoteBaseRevision:\r\n            maxClientRevision: Infinity,\r\n            remoteBaseRevision: null\r\n        };\r\n    for (var i = node.remoteBaseRevisions.length - 1; i >= 0; --i) {\r\n        if (node.myRevision >= node.remoteBaseRevisions[i].local) {\r\n            // Found a remoteBaseRevision that fits node.myRevision. Return remoteBaseRevision and eventually a roof maxClientRevision pointing out where next remoteBaseRevision bases its changes on.\r\n            return {\r\n                maxClientRevision: i === node.remoteBaseRevisions.length - 1 ? Infinity : node.remoteBaseRevisions[i + 1].local,\r\n                remoteBaseRevision: node.remoteBaseRevisions[i].remote\r\n            };\r\n        }\r\n    }\r\n    // There are at least one item in the list but the server hasn't yet become up-to-date with the 0 revision from client.\r\n    return {\r\n        maxClientRevision: node.remoteBaseRevisions[0].local,\r\n        remoteBaseRevision: null\r\n    };\r\n}\n\nfunction combineCreateAndUpdate(prevChange, nextChange) {\r\n    var clonedChange = __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].deepClone(prevChange); // Clone object before modifying since the earlier change in db.changes[] would otherwise be altered.\r\n    Object.keys(nextChange.mods).forEach(function (keyPath) {\r\n        __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].setByKeyPath(clonedChange.obj, keyPath, nextChange.mods[keyPath]);\r\n    });\r\n    return clonedChange;\r\n}\n\nfunction combineUpdateAndUpdate(prevChange, nextChange) {\r\n    var clonedChange = __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].deepClone(prevChange); // Clone object before modifying since the earlier change in db.changes[] would otherwise be altered.\r\n    Object.keys(nextChange.mods).forEach(function (keyPath) {\r\n        // If prev-change was changing a parent path of this keyPath, we must update the parent path rather than adding this keyPath\r\n        var hadParentPath = false;\r\n        Object.keys(prevChange.mods).filter(function (parentPath) { return keyPath.indexOf(parentPath + '.') === 0; }).forEach(function (parentPath) {\r\n            __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].setByKeyPath(clonedChange.mods[parentPath], keyPath.substr(parentPath.length + 1), nextChange.mods[keyPath]);\r\n            hadParentPath = true;\r\n        });\r\n        if (!hadParentPath) {\r\n            // Add or replace this keyPath and its new value\r\n            clonedChange.mods[keyPath] = nextChange.mods[keyPath];\r\n        }\r\n        // In case prevChange contained sub-paths to the new keyPath, we must make sure that those sub-paths are removed since\r\n        // we must mimic what would happen if applying the two changes after each other:\r\n        Object.keys(prevChange.mods).filter(function (subPath) { return subPath.indexOf(keyPath + '.') === 0; }).forEach(function (subPath) {\r\n            delete clonedChange.mods[subPath];\r\n        });\r\n    });\r\n    return clonedChange;\r\n}\n\nfunction mergeChange(prevChange, nextChange) {\r\n    switch (prevChange.type) {\r\n        case CREATE:\r\n            switch (nextChange.type) {\r\n                case CREATE:\r\n                    return nextChange; // Another CREATE replaces previous CREATE.\r\n                case UPDATE:\r\n                    return combineCreateAndUpdate(prevChange, nextChange); // Apply nextChange.mods into prevChange.obj\r\n                case DELETE:\r\n                    return nextChange; // Object created and then deleted. If it wasnt for that we MUST handle resent changes, we would skip entire change here. But what if the CREATE was sent earlier, and then CREATE/DELETE at later stage? It would become a ghost object in DB. Therefore, we MUST keep the delete change! If object doesnt exist, it wont harm!\r\n            }\r\n            break;\r\n        case UPDATE:\r\n            switch (nextChange.type) {\r\n                case CREATE:\r\n                    return nextChange; // Another CREATE replaces previous update.\r\n                case UPDATE:\r\n                    return combineUpdateAndUpdate(prevChange, nextChange); // Add the additional modifications to existing modification set.\r\n                case DELETE:\r\n                    return nextChange; // Only send the delete change. What was updated earlier is no longer of interest.\r\n            }\r\n            break;\r\n        case DELETE:\r\n            switch (nextChange.type) {\r\n                case CREATE:\r\n                    return nextChange; // A resurection occurred. Only create change is of interest.\r\n                case UPDATE:\r\n                    return prevChange; // Nothing to do. We cannot update an object that doesnt exist. Leave the delete change there.\r\n                case DELETE:\r\n                    return prevChange; // Still a delete change. Leave as is.\r\n            }\r\n            break;\r\n    }\r\n}\n\nfunction initGetChangesSinceRevision(db, node, hasMoreToGive) {\r\n    return function getChangesSinceRevision(revision, maxChanges, maxRevision, cb) {\r\n        /// <param name=\"cb\" value=\"function(changes, partial, nodeModificationsOnAck) {}\">Callback that will retrieve next chunk of changes and a boolean telling if it's a partial result or not. If truthy, result is partial and there are more changes to come. If falsy, these changes are the final result.</param>\r\n        var changeSet = {};\r\n        var numChanges = 0;\r\n        var partial = false;\r\n        var ignoreSource = node.id;\r\n        var nextRevision = revision;\r\n        return db.transaction('r', db._changes, function () {\r\n            var query = db._changes.where('rev').between(revision, maxRevision, false, true);\r\n            return query.until(function () {\r\n                if (numChanges === maxChanges) {\r\n                    partial = true;\r\n                    return true;\r\n                }\r\n            }).each(function (change) {\r\n                // Note the revision in nextRevision:\r\n                nextRevision = change.rev;\r\n                // change.source is set based on currentTransaction.source\r\n                if (change.source === ignoreSource)\r\n                    return;\r\n                // Our _changes table contains more info than required (old objs, source etc). Just make sure to include the necessary info:\r\n                var changeToSend = {\r\n                    type: change.type,\r\n                    table: change.table,\r\n                    key: change.key\r\n                };\r\n                if (change.type === CREATE)\r\n                    changeToSend.obj = change.obj;\r\n                else if (change.type === UPDATE)\r\n                    changeToSend.mods = change.mods;\r\n                var id = change.table + \":\" + change.key;\r\n                var prevChange = changeSet[id];\r\n                if (!prevChange) {\r\n                    // This is the first change on this key. Add it unless it comes from the source that we are working against\r\n                    changeSet[id] = changeToSend;\r\n                    ++numChanges;\r\n                }\r\n                else {\r\n                    // Merge the oldchange with the new change\r\n                    var nextChange = changeToSend;\r\n                    var mergedChange = mergeChange(prevChange, nextChange);\r\n                    changeSet[id] = mergedChange;\r\n                }\r\n            });\r\n        }).then(function () {\r\n            var changes = Object.keys(changeSet).map(function (key) {\r\n                return changeSet[key];\r\n            });\r\n            hasMoreToGive.hasMoreToGive = partial;\r\n            return cb(changes, partial, { myRevision: nextRevision });\r\n        });\r\n    };\r\n}\n\nfunction initGetTableObjectsAsChanges(db, node, MAX_CHANGES_PER_CHUNK, getChangesSinceRevision, hasMoreToGive, cb) {\r\n    return function getTableObjectsAsChanges(state, changes, collection) {\r\n        /// <param name=\"state\" value=\"{tablesToUpload:[''],currentTable:'_changes',currentKey:null,localBaseRevision:0}\"></param>\r\n        /// <param name=\"changes\" type=\"Array\" elementType=\"IDatabaseChange\"></param>\r\n        /// <param name=\"collection\" type=\"db.Collection\"></param>\r\n        var limitReached = false;\r\n        return collection.until(function () {\r\n            if (changes.length === MAX_CHANGES_PER_CHUNK) {\r\n                limitReached = true;\r\n                return true;\r\n            }\r\n        }).each(function (item, cursor) {\r\n            changes.push({\r\n                type: CREATE,\r\n                table: state.currentTable,\r\n                key: cursor.key,\r\n                obj: cursor.value\r\n            });\r\n            state.currentKey = cursor.key;\r\n        }).then(function () {\r\n            if (limitReached) {\r\n                // Limit reached. Send partial result.\r\n                hasMoreToGive.hasMoreToGive = true;\r\n                return cb(changes, null, true, { dbUploadState: state });\r\n            }\r\n            else {\r\n                // Done iterating this table. Check if there are more tables to go through:\r\n                if (state.tablesToUpload.length === 0) {\r\n                    // Done iterating all tables\r\n                    // Now append changes occurred during our dbUpload:\r\n                    var brmcr = getBaseRevisionAndMaxClientRevision(node);\r\n                    return getChangesSinceRevision(state.localBaseRevision, MAX_CHANGES_PER_CHUNK - changes.length, brmcr.maxClientRevision, function (additionalChanges, partial, nodeModificationsOnAck) {\r\n                        changes = changes.concat(additionalChanges);\r\n                        nodeModificationsOnAck.dbUploadState = null;\r\n                        return cb(changes, brmcr.remoteBaseRevision, partial, nodeModificationsOnAck);\r\n                    });\r\n                }\r\n                else {\r\n                    // Not done iterating all tables. Continue on next table:\r\n                    state.currentTable = state.tablesToUpload.shift();\r\n                    return getTableObjectsAsChanges(state, changes, db.table(state.currentTable).orderBy(':id'));\r\n                }\r\n            }\r\n        });\r\n    };\r\n}\n\nfunction initGetLocalChangesForNode(db, hasMoreToGive, partialsThreshold) {\r\n    var MAX_CHANGES_PER_CHUNK = partialsThreshold;\r\n    return function getLocalChangesForNode(node, cb) {\r\n        /// <summary>\r\n        ///     Based on given node's current revision and state, this function makes sure to retrieve next chunk of changes\r\n        ///     for that node.\r\n        /// </summary>\r\n        /// <param name=\"node\"></param>\r\n        /// <param name=\"cb\" value=\"function(changes, remoteBaseRevision, partial, nodeModificationsOnAck) {}\">Callback that will retrieve next chunk of changes and a boolean telling if it's a partial result or not. If truthy, result is partial and there are more changes to come. If falsy, these changes are the final result.</param>\r\n        var getChangesSinceRevision = initGetChangesSinceRevision(db, node, hasMoreToGive);\r\n        var getTableObjectsAsChanges = initGetTableObjectsAsChanges(db, node, MAX_CHANGES_PER_CHUNK, getChangesSinceRevision, hasMoreToGive, cb);\r\n        // Only a \"remote\" SyncNode created by Dexie.Syncable\r\n        // could not pass this test (remote nodes have myRevision: -1 on instantiation)\r\n        if (node.myRevision >= 0) {\r\n            // Node is based on a revision in our local database and will just need to get the changes that have occurred since that revision.\r\n            var brmcr = getBaseRevisionAndMaxClientRevision(node);\r\n            return getChangesSinceRevision(node.myRevision, MAX_CHANGES_PER_CHUNK, brmcr.maxClientRevision, function (changes, partial, nodeModificationsOnAck) {\r\n                return cb(changes, brmcr.remoteBaseRevision, partial, nodeModificationsOnAck);\r\n            });\r\n        }\r\n        else {\r\n            // Node hasn't got anything from our local database yet. We will need to upload the entire DB to the node in the form of CREATE changes.\r\n            // Check if we're in the middle of already doing that:\r\n            if (node.dbUploadState === null) {\r\n                // Initialize dbUploadState\r\n                var tablesToUpload = db.tables.filter(function (table) {\r\n                    return table.schema.observable;\r\n                }).map(function (table) {\r\n                    return table.name;\r\n                });\r\n                if (tablesToUpload.length === 0)\r\n                    return __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].Promise.resolve(cb([], null, false, {})); // There are no synced tables at all.\r\n                var dbUploadState = {\r\n                    tablesToUpload: tablesToUpload,\r\n                    currentTable: tablesToUpload.shift(),\r\n                    currentKey: null\r\n                };\r\n                return db._changes.orderBy('rev').last(function (lastChange) {\r\n                    dbUploadState.localBaseRevision = (lastChange && lastChange.rev) || 0;\r\n                    var collection = db.table(dbUploadState.currentTable).orderBy(':id');\r\n                    return getTableObjectsAsChanges(dbUploadState, [], collection);\r\n                });\r\n            }\r\n            else if (node.dbUploadState.currentKey) {\r\n                var collection = db.table(node.dbUploadState.currentTable).where(':id').above(node.dbUploadState.currentKey);\r\n                return getTableObjectsAsChanges(__WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].deepClone(node.dbUploadState), [], collection);\r\n            }\r\n            else {\r\n                var collection = db.table(dbUploadState.currentTable).orderBy(':id');\r\n                return getTableObjectsAsChanges(__WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].deepClone(node.dbUploadState), [], collection);\r\n            }\r\n        }\r\n    };\r\n}\n\nvar Statuses = {\r\n    ERROR: -1,\r\n    OFFLINE: 0,\r\n    CONNECTING: 1,\r\n    ONLINE: 2,\r\n    SYNCING: 3,\r\n    ERROR_WILL_RETRY: 4 // An error occurred such as net down but the sync provider will retry to connect.\r\n};\r\nvar StatusTexts = {\r\n    \"-1\": \"ERROR\",\r\n    \"0\": \"OFFLINE\",\r\n    \"1\": \"CONNECTING\",\r\n    \"2\": \"ONLINE\",\r\n    \"3\": \"SYNCING\",\r\n    \"4\": \"ERROR_WILL_RETRY\"\r\n};\n\nvar Promise$2 = __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].Promise;\r\nfunction initConnectProtocol(db, protocolInstance, dbAliveID, options, rejectConnectPromise) {\r\n    var enqueue = initEnqueue(db);\r\n    var hasMoreToGive = { hasMoreToGive: true };\r\n    function stillAlive() {\r\n        // A better method than doing db.isOpen() because the same db instance may have been reopened, but then this sync call should be dead\r\n        // because the new instance should be considered a fresh instance and will have another local node.\r\n        return db._localSyncNode && db._localSyncNode.id === dbAliveID;\r\n    }\r\n    return function connectProtocol(node, activePeer) {\r\n        /// <param name=\"node\" type=\"db.observable.SyncNode\"></param>\r\n        var getLocalChangesForNode = initGetLocalChangesForNode(db, hasMoreToGive, protocolInstance.partialsThreshold);\r\n        var url = activePeer.url;\r\n        function changeStatusTo(newStatus) {\r\n            if (node.status !== newStatus) {\r\n                node.status = newStatus;\r\n                node.save().then(function () {\r\n                    db.syncable.on.statusChanged.fire(newStatus, url);\r\n                    // Also broadcast message to other nodes about the status\r\n                    db.observable.broadcastMessage(\"syncStatusChanged\", { newStatus: newStatus, url: url }, false);\r\n                }).catch('DatabaseClosedError', function () {\r\n                });\r\n            }\r\n        }\r\n        activePeer.on('disconnect', function (newStatus) {\r\n            if (!isNaN(newStatus))\r\n                changeStatusTo(newStatus);\r\n        });\r\n        var connectedContinuation;\r\n        changeStatusTo(Statuses.CONNECTING);\r\n        return doSync();\r\n        function doSync() {\r\n            // Use enqueue() to ensure only a single promise execution at a time.\r\n            return enqueue(doSync, function () {\r\n                // By returning the Promise returned by getLocalChangesForNode() a final catch() on the sync() method will also catch error occurring in entire sequence.\r\n                return getLocalChangesForNode_autoAckIfEmpty(node, sendChangesToProvider);\r\n            }, dbAliveID);\r\n        }\r\n        function sendChangesToProvider(changes, remoteBaseRevision, partial, nodeModificationsOnAck) {\r\n            // Create a final Promise for the entire sync() operation that will resolve when provider calls onSuccess().\r\n            // By creating finalPromise before calling protocolInstance.sync() it is possible for provider to call onError() immediately if it wants.\r\n            var finalSyncPromise = new Promise$2(function (resolve, reject) {\r\n                rejectConnectPromise.p = function (err) {\r\n                    reject(err);\r\n                };\r\n                __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].asap(function () {\r\n                    try {\r\n                        protocolInstance.sync(node.syncContext, url, options, remoteBaseRevision, node.appliedRemoteRevision, changes, partial, applyRemoteChanges, onChangesAccepted, function (continuation) {\r\n                            resolve(continuation);\r\n                        }, onError);\r\n                    }\r\n                    catch (ex) {\r\n                        onError(ex, Infinity);\r\n                    }\r\n                    function onError(error, again) {\r\n                        reject(error);\r\n                        if (stillAlive()) {\r\n                            if (!isNaN(again) && again < Infinity) {\r\n                                setTimeout(function () {\r\n                                    if (stillAlive()) {\r\n                                        changeStatusTo(Statuses.SYNCING);\r\n                                        doSync().catch('DatabaseClosedError', abortTheProvider);\r\n                                    }\r\n                                }, again);\r\n                                changeStatusTo(Statuses.ERROR_WILL_RETRY, error);\r\n                                if (connectedContinuation && connectedContinuation.disconnect)\r\n                                    connectedContinuation.disconnect();\r\n                                connectedContinuation = null;\r\n                            }\r\n                            else {\r\n                                abortTheProvider(error); // Will fire ERROR on statusChanged event.\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n            return finalSyncPromise.then(function () {\r\n                // Resolve caller of db.syncable.connect() with undefined. Not with continuation!\r\n                return undefined;\r\n            }).finally(function () {\r\n                // In case error happens after connect, don't try reject the connect promise anymore.\r\n                // This is important. A Dexie unit test that verifies unhandled rejections will fail when Dexie.Syncable addon\r\n                // is active and this happens. It would fire unhandledrejection but that we do not want.\r\n                rejectConnectPromise.p = null;\r\n            });\r\n            function onChangesAccepted() {\r\n                Object.keys(nodeModificationsOnAck).forEach(function (keyPath) {\r\n                    __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].setByKeyPath(node, keyPath, nodeModificationsOnAck[keyPath]);\r\n                });\r\n                // We dont know if onSuccess() was called by provider yet. If it's already called, finalPromise.then() will execute immediately,\r\n                // otherwise it will execute when finalSyncPromise resolves.\r\n                finalSyncPromise.then(continueSendingChanges);\r\n                return node.save();\r\n            }\r\n        }\r\n        function abortTheProvider(error) {\r\n            activePeer.disconnect(Statuses.ERROR, error);\r\n        }\r\n        function getLocalChangesForNode_autoAckIfEmpty(node, cb) {\r\n            return getLocalChangesForNode(node, function autoAck(changes, remoteBaseRevision, partial, nodeModificationsOnAck) {\r\n                if (changes.length === 0 && 'myRevision' in nodeModificationsOnAck && nodeModificationsOnAck.myRevision !== node.myRevision) {\r\n                    Object.keys(nodeModificationsOnAck).forEach(function (keyPath) {\r\n                        __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].setByKeyPath(node, keyPath, nodeModificationsOnAck[keyPath]);\r\n                    });\r\n                    node.save().catch('DatabaseClosedError', function () {\r\n                    });\r\n                    return getLocalChangesForNode(node, autoAck);\r\n                }\r\n                else {\r\n                    return cb(changes, remoteBaseRevision, partial, nodeModificationsOnAck);\r\n                }\r\n            });\r\n        }\r\n        function applyRemoteChanges(remoteChanges, remoteRevision, partial /*, clear*/) {\r\n            var saveToUncommittedChanges = initSaveToUncommittedChanges(db, node);\r\n            var finallyCommitAllChanges = initFinallyCommitAllChanges(db, node);\r\n            return enqueue(applyRemoteChanges, function () {\r\n                if (!stillAlive())\r\n                    return Promise$2.reject(new __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].DatabaseClosedError());\r\n                // FIXTHIS: Check what to do if clear() is true!\r\n                return (partial ? saveToUncommittedChanges(remoteChanges, remoteRevision) : finallyCommitAllChanges(remoteChanges, remoteRevision))\r\n                    .catch(function (error) {\r\n                    abortTheProvider(error);\r\n                    return Promise$2.reject(error);\r\n                });\r\n            }, dbAliveID);\r\n        }\r\n        //\r\n        //\r\n        //  Continuation Patterns Follows\r\n        //\r\n        //\r\n        function continueSendingChanges(continuation) {\r\n            if (!stillAlive()) {\r\n                if (continuation.disconnect)\r\n                    continuation.disconnect();\r\n                return;\r\n            }\r\n            connectedContinuation = continuation;\r\n            activePeer.on('disconnect', function () {\r\n                if (connectedContinuation) {\r\n                    if (connectedContinuation.react) {\r\n                        try {\r\n                            // react pattern must provide a disconnect function.\r\n                            connectedContinuation.disconnect();\r\n                        }\r\n                        catch (e) {\r\n                        }\r\n                    }\r\n                    connectedContinuation = null; // Stop poll() pattern from polling again and abortTheProvider() from being called twice.\r\n                }\r\n            });\r\n            if (continuation.react) {\r\n                continueUsingReactPattern(continuation);\r\n            }\r\n            else {\r\n                continueUsingPollPattern(continuation);\r\n            }\r\n        }\r\n        //  React Pattern (eager)\r\n        function continueUsingReactPattern(continuation) {\r\n            var changesWaiting, // Boolean\r\n            isWaitingForServer; // Boolean\r\n            function onChanges() {\r\n                if (connectedContinuation) {\r\n                    changeStatusTo(Statuses.SYNCING);\r\n                    if (isWaitingForServer)\r\n                        changesWaiting = true;\r\n                    else {\r\n                        reactToChanges();\r\n                    }\r\n                }\r\n            }\r\n            db.on('changes', onChanges);\r\n            activePeer.on('disconnect', function () {\r\n                db.on.changes.unsubscribe(onChanges);\r\n            });\r\n            function reactToChanges() {\r\n                if (!connectedContinuation)\r\n                    return;\r\n                changesWaiting = false;\r\n                isWaitingForServer = true;\r\n                getLocalChangesForNode_autoAckIfEmpty(node, function (changes, remoteBaseRevision, partial, nodeModificationsOnAck) {\r\n                    if (!connectedContinuation)\r\n                        return;\r\n                    if (changes.length > 0) {\r\n                        continuation.react(changes, remoteBaseRevision, partial, function onChangesAccepted() {\r\n                            Object.keys(nodeModificationsOnAck).forEach(function (keyPath) {\r\n                                __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].setByKeyPath(node, keyPath, nodeModificationsOnAck[keyPath]);\r\n                            });\r\n                            node.save().catch('DatabaseClosedError', function () {\r\n                            });\r\n                            // More changes may be waiting:\r\n                            reactToChanges();\r\n                        });\r\n                    }\r\n                    else {\r\n                        isWaitingForServer = false;\r\n                        if (changesWaiting) {\r\n                            // A change jumped in between the time-spot of quering _changes and getting called back with zero changes.\r\n                            // This is an expreemely rare scenario, and eventually impossible. But need to be here because it could happen in theory.\r\n                            reactToChanges();\r\n                        }\r\n                        else {\r\n                            changeStatusTo(Statuses.ONLINE);\r\n                        }\r\n                    }\r\n                }).catch(function (ex) {\r\n                    console.error(\"Got \" + ex.message + \" caught by reactToChanges\");\r\n                    abortTheProvider(ex);\r\n                });\r\n            }\r\n            reactToChanges();\r\n        }\r\n        //  Poll Pattern\r\n        function continueUsingPollPattern() {\r\n            function syncAgain() {\r\n                getLocalChangesForNode_autoAckIfEmpty(node, function (changes, remoteBaseRevision, partial, nodeModificationsOnAck) {\r\n                    protocolInstance.sync(node.syncContext, url, options, remoteBaseRevision, node.appliedRemoteRevision, changes, partial, applyRemoteChanges, onChangesAccepted, onSuccess, onError);\r\n                    function onChangesAccepted() {\r\n                        Object.keys(nodeModificationsOnAck).forEach(function (keyPath) {\r\n                            __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].setByKeyPath(node, keyPath, nodeModificationsOnAck[keyPath]);\r\n                        });\r\n                        node.save().catch('DatabaseClosedError', function () {\r\n                        });\r\n                    }\r\n                    function onSuccess(continuation) {\r\n                        if (!connectedContinuation) {\r\n                            // Got disconnected before succeeding. Quit.\r\n                            return;\r\n                        }\r\n                        connectedContinuation = continuation;\r\n                        if (partial) {\r\n                            // We only sent partial changes. Need to do another round asap.\r\n                            syncAgain();\r\n                        }\r\n                        else {\r\n                            // We've sent all changes now (in sync!)\r\n                            if (!isNaN(continuation.again) && continuation.again < Infinity) {\r\n                                // Provider wants to keep polling. Set Status to ONLINE.\r\n                                changeStatusTo(Statuses.ONLINE);\r\n                                setTimeout(function () {\r\n                                    if (connectedContinuation) {\r\n                                        changeStatusTo(Statuses.SYNCING);\r\n                                        syncAgain();\r\n                                    }\r\n                                }, continuation.again);\r\n                            }\r\n                            else {\r\n                                // Provider seems finished polling. Since we are never going to poll again,\r\n                                // disconnect provider and set status to OFFLINE until another call to db.syncable.connect().\r\n                                activePeer.disconnect(Statuses.OFFLINE);\r\n                            }\r\n                        }\r\n                    }\r\n                    function onError(error, again) {\r\n                        if (!isNaN(again) && again < Infinity) {\r\n                            if (connectedContinuation) {\r\n                                setTimeout(function () {\r\n                                    if (connectedContinuation) {\r\n                                        changeStatusTo(Statuses.SYNCING);\r\n                                        syncAgain();\r\n                                    }\r\n                                }, again);\r\n                                changeStatusTo(Statuses.ERROR_WILL_RETRY);\r\n                            } // else status is already changed since we got disconnected.\r\n                        }\r\n                        else {\r\n                            abortTheProvider(error); // Will fire ERROR on onStatusChanged.\r\n                        }\r\n                    }\r\n                }).catch(abortTheProvider);\r\n            }\r\n            if (hasMoreToGive.hasMoreToGive) {\r\n                syncAgain();\r\n            }\r\n            else if (connectedContinuation && !isNaN(connectedContinuation.again) && connectedContinuation.again < Infinity) {\r\n                changeStatusTo(Statuses.ONLINE);\r\n                setTimeout(function () {\r\n                    if (connectedContinuation) {\r\n                        changeStatusTo(Statuses.SYNCING);\r\n                        syncAgain();\r\n                    }\r\n                }, connectedContinuation.again);\r\n            }\r\n            else {\r\n                // Provider seems finished polling. Since we are never going to poll again,\r\n                // disconnect provider and set status to OFFLINE until another call to db.syncable.connect().\r\n                activePeer.disconnect(Statuses.OFFLINE);\r\n            }\r\n        }\r\n    };\r\n}\n\nfunction initConnectFn(db, activePeers) {\r\n    return function connect(protocolInstance, protocolName, url, options, dbAliveID) {\r\n        /// <param name=\"protocolInstance\" type=\"ISyncProtocol\"></param>\r\n        var existingPeer = activePeers.filter(function (peer) {\r\n            return peer.url === url;\r\n        });\r\n        if (existingPeer.length > 0) {\r\n            var activePeer = existingPeer[0];\r\n            var diffObject = {};\r\n            __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].getObjectDiff(activePeer.syncOptions, options, diffObject);\r\n            // Options have been changed\r\n            // We need to disconnect and reconnect\r\n            if (Object.keys(diffObject).length !== 0) {\r\n                return db.syncable.disconnect(url)\r\n                    .then(function () {\r\n                    return execConnect();\r\n                });\r\n            }\r\n            else {\r\n                // Never create multiple syncNodes with same protocolName and url. Instead, let the next call to connect() return the same promise that\r\n                // have already been started and eventually also resolved. If promise has already resolved (node connected), calling existing promise.then() will give a callback directly.\r\n                return existingPeer[0].connectPromise;\r\n            }\r\n        }\r\n        function execConnect() {\r\n            // Use an object otherwise we wouldn't be able to get the reject promise from\r\n            // connectProtocol\r\n            var rejectConnectPromise = { p: null };\r\n            var connectProtocol = initConnectProtocol(db, protocolInstance, dbAliveID, options, rejectConnectPromise);\r\n            var getOrCreateSyncNode = initGetOrCreateSyncNode(db, protocolName, url);\r\n            var connectPromise = getOrCreateSyncNode(options).then(function (node) {\r\n                return connectProtocol(node, activePeer);\r\n            });\r\n            var disconnected = false;\r\n            var activePeer = {\r\n                url: url,\r\n                status: Statuses.OFFLINE,\r\n                connectPromise: connectPromise,\r\n                syncOptions: options,\r\n                on: __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].Events(null, \"disconnect\"),\r\n                disconnect: function (newStatus, error) {\r\n                    var pos = activePeers.indexOf(activePeer);\r\n                    if (pos >= 0)\r\n                        activePeers.splice(pos, 1);\r\n                    if (error && rejectConnectPromise.p)\r\n                        rejectConnectPromise.p(error);\r\n                    if (!disconnected) {\r\n                        activePeer.on.disconnect.fire(newStatus, error);\r\n                    }\r\n                    disconnected = true;\r\n                }\r\n            };\r\n            activePeers.push(activePeer);\r\n            return connectPromise;\r\n        }\r\n        return execConnect();\r\n    };\r\n}\n\n/* ==========================================================================\r\n *                           dexie-syncable.js\r\n * ==========================================================================\r\n *\r\n * Dexie addon for syncing indexedDB with remote endpoints.\r\n *\r\n * By David Fahlander, david.fahlander@gmail.com,\r\n *    Nikolas Poniros, https://github.com/nponiros\r\n *\r\n * ==========================================================================\r\n *\r\n * Version {version}, {date}\r\n *\r\n * http://dexie.org\r\n *\r\n * Apache License Version 2.0, January 2004, http://www.apache.org/licenses/\r\n *\r\n */\r\n// Depend on 'dexie-observable'\r\n// To support both ES6,AMD,CJS and UMD (plain script), we just import it and then access it as \"Dexie.Observable\".\r\n// That way, our plugin works in all UMD cases.\r\n// If target platform would only be module based (ES6/AMD/CJS), we could have done 'import Observable from \"dexie-observable\"'.\r\nvar override = __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].override;\nvar Promise = __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].Promise;\nvar Observable = __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].Observable;\r\nfunction Syncable(db) {\r\n    /// <param name=\"db\" type=\"Dexie\"></param>\r\n    var activePeers = [];\r\n    var connectFn = initConnectFn(db, activePeers);\r\n    var syncableConnect = initSyncableConnect(db, connectFn);\r\n    db.on('message', function (msg) {\r\n        // Message from other local node arrives...\r\n        __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].vip(function () {\r\n            if (msg.type === 'connect') {\r\n                // We are master node and another non-master node wants us to do the connect.\r\n                db.syncable.connect(msg.message.protocolName, msg.message.url, msg.message.options).then(msg.resolve, msg.reject);\r\n            }\r\n            else if (msg.type === 'disconnect') {\r\n                db.syncable.disconnect(msg.message.url).then(msg.resolve, msg.reject);\r\n            }\r\n            else if (msg.type === 'syncStatusChanged') {\r\n                // We are client and a master node informs us about syncStatus change.\r\n                // Lookup the connectedProvider and call its event\r\n                db.syncable.on.statusChanged.fire(msg.message.newStatus, msg.message.url);\r\n            }\r\n        });\r\n    });\r\n    db.on('cleanup', function (weBecameMaster) {\r\n        // A cleanup (done in Dexie.Observable) may result in that a master node is removed and we become master.\r\n        if (weBecameMaster) {\r\n            // We took over the master role in Observable's cleanup method.\r\n            // We should connect to remote servers now.\r\n            // At this point, also reconnect servers with status ERROR_WILL_RETRY as well as plain ERROR.\r\n            // Reason to reconnect to those with plain \"ERROR\" is that the ERROR state may occur when a database\r\n            // connection has been closed. The new master would then be expected to reconnect.\r\n            // Also, this is not an infinite poll(). This is rare event that a new browser tab takes over from\r\n            // an old closed one. \r\n            __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].ignoreTransaction(function () { return __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].vip(function () {\r\n                return db._syncNodes.where({ type: 'remote' })\r\n                    .filter(function (node) { return node.status !== Statuses.OFFLINE; })\r\n                    .toArray(function (connectedRemoteNodes) { return Promise.all(connectedRemoteNodes.map(function (node) {\r\n                    return db.syncable.connect(node.syncProtocol, node.url, node.syncOptions).catch(function (e) {\r\n                        console.warn(\"Dexie.Syncable: Could not connect to \" + node.url + \". \" + (e.stack || e));\r\n                    });\r\n                })); });\r\n            }); }).catch('DatabaseClosedError', function () { });\r\n        }\r\n    });\r\n    // \"ready\" subscriber for the master node that makes sure it will always connect to sync server\r\n    // when the database opens. It will not wait for the connection to complete, just initiate the\r\n    // connection so that it will continue syncing as long as the database is open.\r\n    // Dexie.Observable's 'ready' subscriber will have been invoked prior to this, making sure\r\n    // that db._localSyncNode exists and persisted before this subscriber kicks in.\r\n    db.on('ready', function onReady() {\r\n        // Again, in onReady: If we ARE master, make sure to connect to remote servers that is in a connected state.\r\n        if (db._localSyncNode && db._localSyncNode.isMaster) {\r\n            // Make sure to connect to remote servers that is in a connected state (NOT OFFLINE or ERROR!)\r\n            // This \"ready\" subscriber will never be the one performing the initial sync request, because\r\n            // even after calling db.syncable.connect(), there won't exist any \"remote\" sync node yet.\r\n            // Instead, db.syncable.connect() will subscribe to \"ready\" also, and that subscriber will be\r\n            // called after this one. There, in that subscriber, the initial sync request will take place\r\n            // and the \"remote\" node will be created so that this \"ready\" subscriber can auto-connect the\r\n            // next time this database is opened.\r\n            // CONCLUSION: We can always assume that the local DB has been in sync with the server at least\r\n            // once in the past for each \"connectedRemoteNode\" we find in query below.\r\n            // Don't halt db.ready while connecting (i.e. we do not return a promise here!)\r\n            db._syncNodes\r\n                .where('type').equals('remote')\r\n                .and(function (node) { return node.status !== Statuses.OFFLINE; })\r\n                .toArray(function (connectedRemoteNodes) {\r\n                // There are connected remote nodes that we must manage (or take over to manage)\r\n                connectedRemoteNodes.forEach(function (node) { return db.syncable.connect(node.syncProtocol, node.url, node.syncOptions)\r\n                    .catch(function () { }); } // A failure will be triggered in on('statusChanged'). We can ignore.\r\n                );\r\n            }).catch('DatabaseClosedError', function () { });\r\n        }\r\n    }, true); // True means the ready event will survive a db reopen - db.close()/db.open()\r\n    db.syncable = {};\r\n    db.syncable.getStatus = function (url, cb) {\r\n        if (db.isOpen()) {\r\n            return __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].vip(function () {\r\n                return db._syncNodes.where('url').equals(url).first(function (node) {\r\n                    return node ? node.status : Statuses.OFFLINE;\r\n                });\r\n            }).then(cb);\r\n        }\r\n        else {\r\n            return Promise.resolve(Syncable.Statuses.OFFLINE).then(cb);\r\n        }\r\n    };\r\n    db.syncable.getOptions = function (url, cb) {\r\n        return db.transaction('r?', db._syncNodes, function () {\r\n            return db._syncNodes.where('url').equals(url).first(function (node) {\r\n                return node.syncOptions;\r\n            }).then(cb);\r\n        });\r\n    };\r\n    db.syncable.list = function () {\r\n        return db.transaction('r?', db._syncNodes, function () {\r\n            return db._syncNodes.where('type').equals('remote').toArray(function (a) {\r\n                return a.map(function (node) { return node.url; });\r\n            });\r\n        });\r\n    };\r\n    db.syncable.on = __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].Events(db, { statusChanged: \"asap\" });\r\n    db.syncable.disconnect = function (url) {\r\n        return __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].ignoreTransaction(function () {\r\n            return Promise.resolve().then(function () {\r\n                if (db._localSyncNode && db._localSyncNode.isMaster) {\r\n                    return Promise.all(activePeers.filter(function (peer) { return peer.url === url; }).map(function (peer) {\r\n                        return peer.disconnect(Statuses.OFFLINE);\r\n                    }));\r\n                }\r\n                else {\r\n                    return db._syncNodes.where('isMaster').above(0).first(function (masterNode) {\r\n                        return db.observable.sendMessage('disconnect', { url: url }, masterNode.id, { wantReply: true });\r\n                    });\r\n                }\r\n            }).then(function () {\r\n                return db._syncNodes.where(\"url\").equals(url).modify(function (node) {\r\n                    node.status = Statuses.OFFLINE;\r\n                });\r\n            });\r\n        });\r\n    };\r\n    db.syncable.connect = function (protocolName, url, options) {\r\n        options = options || {}; // Make sure options is always an object because 1) Provider expects it to be. 2) We'll be persisting it and you cannot persist undefined.\r\n        var protocolInstance = Syncable.registeredProtocols[protocolName];\r\n        if (protocolInstance) {\r\n            return syncableConnect(protocolInstance, protocolName, url, options);\r\n        }\r\n        else {\r\n            return Promise.reject(new Error(\"ISyncProtocol '\" + protocolName + \"' is not registered in Dexie.Syncable.registerSyncProtocol()\"));\r\n        }\r\n    };\r\n    db.syncable.delete = function (url) {\r\n        return db.syncable.disconnect(url).then(function () {\r\n            return db.transaction('rw!', db._syncNodes, db._changes, db._uncommittedChanges, function () {\r\n                // Find the node(s)\r\n                // Several can be found, as detected by @martindiphoorn,\r\n                // let's delete them and cleanup _uncommittedChanges and _changes \r\n                // accordingly.\r\n                var nodeIDsToDelete;\r\n                return db._syncNodes\r\n                    .where(\"url\").equals(url)\r\n                    .toArray(function (nodes) { return nodes.map(function (node) { return node.id; }); })\r\n                    .then(function (nodeIDs) {\r\n                    nodeIDsToDelete = nodeIDs;\r\n                    // Delete the syncNode that represents the remote endpoint.\r\n                    return db._syncNodes.where('id').anyOf(nodeIDs).delete();\r\n                })\r\n                    .then(function () {\r\n                    // In case there were uncommittedChanges belonging to this, delete them as well\r\n                    return db._uncommittedChanges.where('node').anyOf(nodeIDsToDelete).delete();\r\n                });\r\n            }).then(function () {\r\n                // Spawn background job to delete old changes, now that a node has been deleted,\r\n                // there might be changes in _changes table that is not needed to keep anymore.\r\n                // This is done in its own transaction, or possible several transaction to prohibit\r\n                // starvation\r\n                Observable.deleteOldChanges(db);\r\n            });\r\n        });\r\n    };\r\n    db.syncable.unsyncedChanges = function (url) {\r\n        return db._syncNodes.where(\"url\").equals(url).first(function (node) {\r\n            return db._changes.where('rev').above(node.myRevision).toArray();\r\n        });\r\n    };\r\n    db.close = override(db.close, function (origClose) {\r\n        return function () {\r\n            activePeers.forEach(function (peer) {\r\n                peer.disconnect();\r\n            });\r\n            return origClose.apply(this, arguments);\r\n        };\r\n    });\r\n    Object.defineProperty(db.observable.SyncNode.prototype, 'save', {\r\n        enumerable: false,\r\n        configurable: true,\r\n        writable: true,\r\n        value: function () {\r\n            var _this = this;\r\n            return db.transaction('rw?', db._syncNodes, function () {\r\n                return db._syncNodes.put(_this);\r\n            });\r\n        }\r\n    });\r\n}\r\nSyncable.Statuses = Statuses;\r\nSyncable.StatusTexts = StatusTexts;\r\nSyncable.registeredProtocols = {}; // Map<String,ISyncProviderFactory> when key is the provider name.\r\nSyncable.registerSyncProtocol = function (name, protocolInstance) {\r\n    /// <summary>\r\n    ///    Register a synchronization protocol that can synchronize databases with remote servers.\r\n    /// </summary>\r\n    /// <param name=\"name\" type=\"String\">Provider name</param>\r\n    /// <param name=\"protocolInstance\" type=\"ISyncProtocol\">Implementation of ISyncProtocol</param>\r\n    var partialsThreshold = protocolInstance.partialsThreshold;\r\n    if (typeof partialsThreshold === 'number') {\r\n        // Don't allow NaN or negative threshold\r\n        if (isNaN(partialsThreshold) || partialsThreshold < 0) {\r\n            throw new Error('The given number for the threshold is not supported');\r\n        }\r\n    }\r\n    else {\r\n        // Use Infinity as the default so simple protocols don't have to care about partial synchronization\r\n        protocolInstance.partialsThreshold = Infinity;\r\n    }\r\n    Syncable.registeredProtocols[name] = protocolInstance;\r\n};\r\n// Register addon in Dexie:\r\n__WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].Syncable = Syncable;\r\n__WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */].addons.push(Syncable);\n\n/* harmony default export */ __webpack_exports__[\"a\"] = Syncable;\n//# sourceMappingURL=dexie-syncable.es.js.map\n\n\n/***/ }),\n/* 62 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = { \"default\": __webpack_require__(75), __esModule: true };\n\n/***/ }),\n/* 63 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = { \"default\": __webpack_require__(76), __esModule: true };\n\n/***/ }),\n/* 64 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = { \"default\": __webpack_require__(77), __esModule: true };\n\n/***/ }),\n/* 65 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = { \"default\": __webpack_require__(79), __esModule: true };\n\n/***/ }),\n/* 66 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = { \"default\": __webpack_require__(80), __esModule: true };\n\n/***/ }),\n/* 67 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = { \"default\": __webpack_require__(81), __esModule: true };\n\n/***/ }),\n/* 68 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = { \"default\": __webpack_require__(83), __esModule: true };\n\n/***/ }),\n/* 69 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = { \"default\": __webpack_require__(84), __esModule: true };\n\n/***/ }),\n/* 70 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\n\nexports.default = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\n/***/ }),\n/* 71 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\n\nvar _defineProperty = __webpack_require__(37);\n\nvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      (0, _defineProperty2.default)(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n/***/ }),\n/* 72 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\n\nvar _defineProperty = __webpack_require__(37);\n\nvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (obj, key, value) {\n  if (key in obj) {\n    (0, _defineProperty2.default)(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\n/***/ }),\n/* 73 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\n\nvar _setPrototypeOf = __webpack_require__(67);\n\nvar _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);\n\nvar _create = __webpack_require__(64);\n\nvar _create2 = _interopRequireDefault(_create);\n\nvar _typeof2 = __webpack_require__(38);\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(superClass)));\n  }\n\n  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\n/***/ }),\n/* 74 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\n\nvar _typeof2 = __webpack_require__(38);\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && ((typeof call === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(call)) === \"object\" || typeof call === \"function\") ? call : self;\n};\n\n/***/ }),\n/* 75 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar core  = __webpack_require__(0)\n  , $JSON = core.JSON || (core.JSON = {stringify: JSON.stringify});\nmodule.exports = function stringify(it){ // eslint-disable-line no-unused-vars\n  return $JSON.stringify.apply($JSON, arguments);\n};\n\n/***/ }),\n/* 76 */\n/***/ (function(module, exports, __webpack_require__) {\n\n__webpack_require__(111);\nmodule.exports = __webpack_require__(0).Object.assign;\n\n/***/ }),\n/* 77 */\n/***/ (function(module, exports, __webpack_require__) {\n\n__webpack_require__(112);\nvar $Object = __webpack_require__(0).Object;\nmodule.exports = function create(P, D){\n  return $Object.create(P, D);\n};\n\n/***/ }),\n/* 78 */\n/***/ (function(module, exports, __webpack_require__) {\n\n__webpack_require__(113);\nvar $Object = __webpack_require__(0).Object;\nmodule.exports = function defineProperty(it, key, desc){\n  return $Object.defineProperty(it, key, desc);\n};\n\n/***/ }),\n/* 79 */\n/***/ (function(module, exports, __webpack_require__) {\n\n__webpack_require__(114);\nmodule.exports = __webpack_require__(0).Object.getPrototypeOf;\n\n/***/ }),\n/* 80 */\n/***/ (function(module, exports, __webpack_require__) {\n\n__webpack_require__(115);\nmodule.exports = __webpack_require__(0).Object.keys;\n\n/***/ }),\n/* 81 */\n/***/ (function(module, exports, __webpack_require__) {\n\n__webpack_require__(116);\nmodule.exports = __webpack_require__(0).Object.setPrototypeOf;\n\n/***/ }),\n/* 82 */\n/***/ (function(module, exports, __webpack_require__) {\n\n__webpack_require__(52);\n__webpack_require__(53);\n__webpack_require__(54);\n__webpack_require__(117);\nmodule.exports = __webpack_require__(0).Promise;\n\n/***/ }),\n/* 83 */\n/***/ (function(module, exports, __webpack_require__) {\n\n__webpack_require__(118);\n__webpack_require__(52);\n__webpack_require__(119);\n__webpack_require__(120);\nmodule.exports = __webpack_require__(0).Symbol;\n\n/***/ }),\n/* 84 */\n/***/ (function(module, exports, __webpack_require__) {\n\n__webpack_require__(53);\n__webpack_require__(54);\nmodule.exports = __webpack_require__(35).f('iterator');\n\n/***/ }),\n/* 85 */\n/***/ (function(module, exports) {\n\nmodule.exports = function(){ /* empty */ };\n\n/***/ }),\n/* 86 */\n/***/ (function(module, exports) {\n\nmodule.exports = function(it, Constructor, name, forbiddenField){\n  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){\n    throw TypeError(name + ': incorrect invocation!');\n  } return it;\n};\n\n/***/ }),\n/* 87 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = __webpack_require__(9)\n  , toLength  = __webpack_require__(51)\n  , toIndex   = __webpack_require__(108);\nmodule.exports = function(IS_INCLUDES){\n  return function($this, el, fromIndex){\n    var O      = toIObject($this)\n      , length = toLength(O.length)\n      , index  = toIndex(fromIndex, length)\n      , value;\n    // Array#includes uses SameValueZero equality algorithm\n    if(IS_INCLUDES && el != el)while(length > index){\n      value = O[index++];\n      if(value != value)return true;\n    // Array#toIndex ignores holes, Array#includes - not\n    } else for(;length > index; index++)if(IS_INCLUDES || index in O){\n      if(O[index] === el)return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n\n/***/ }),\n/* 88 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// all enumerable object keys, includes symbols\nvar getKeys = __webpack_require__(12)\n  , gOPS    = __webpack_require__(29)\n  , pIE     = __webpack_require__(17);\nmodule.exports = function(it){\n  var result     = getKeys(it)\n    , getSymbols = gOPS.f;\n  if(getSymbols){\n    var symbols = getSymbols(it)\n      , isEnum  = pIE.f\n      , i       = 0\n      , key;\n    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);\n  } return result;\n};\n\n/***/ }),\n/* 89 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar ctx         = __webpack_require__(14)\n  , call        = __webpack_require__(93)\n  , isArrayIter = __webpack_require__(91)\n  , anObject    = __webpack_require__(3)\n  , toLength    = __webpack_require__(51)\n  , getIterFn   = __webpack_require__(109)\n  , BREAK       = {}\n  , RETURN      = {};\nvar exports = module.exports = function(iterable, entries, fn, that, ITERATOR){\n  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)\n    , f      = ctx(fn, that, entries ? 2 : 1)\n    , index  = 0\n    , length, step, iterator, result;\n  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');\n  // fast case for arrays with default iterator\n  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){\n    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\n    if(result === BREAK || result === RETURN)return result;\n  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){\n    result = call(iterator, f, step.value, entries);\n    if(result === BREAK || result === RETURN)return result;\n  }\n};\nexports.BREAK  = BREAK;\nexports.RETURN = RETURN;\n\n/***/ }),\n/* 90 */\n/***/ (function(module, exports) {\n\n// fast apply, http://jsperf.lnkit.com/fast-apply/5\nmodule.exports = function(fn, args, that){\n  var un = that === undefined;\n  switch(args.length){\n    case 0: return un ? fn()\n                      : fn.call(that);\n    case 1: return un ? fn(args[0])\n                      : fn.call(that, args[0]);\n    case 2: return un ? fn(args[0], args[1])\n                      : fn.call(that, args[0], args[1]);\n    case 3: return un ? fn(args[0], args[1], args[2])\n                      : fn.call(that, args[0], args[1], args[2]);\n    case 4: return un ? fn(args[0], args[1], args[2], args[3])\n                      : fn.call(that, args[0], args[1], args[2], args[3]);\n  } return              fn.apply(that, args);\n};\n\n/***/ }),\n/* 91 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// check on default Array iterator\nvar Iterators  = __webpack_require__(15)\n  , ITERATOR   = __webpack_require__(1)('iterator')\n  , ArrayProto = Array.prototype;\n\nmodule.exports = function(it){\n  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);\n};\n\n/***/ }),\n/* 92 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// 7.2.2 IsArray(argument)\nvar cof = __webpack_require__(13);\nmodule.exports = Array.isArray || function isArray(arg){\n  return cof(arg) == 'Array';\n};\n\n/***/ }),\n/* 93 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// call something on iterator step with safe closing on error\nvar anObject = __webpack_require__(3);\nmodule.exports = function(iterator, fn, value, entries){\n  try {\n    return entries ? fn(anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch(e){\n    var ret = iterator['return'];\n    if(ret !== undefined)anObject(ret.call(iterator));\n    throw e;\n  }\n};\n\n/***/ }),\n/* 94 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar create         = __webpack_require__(28)\n  , descriptor     = __webpack_require__(18)\n  , setToStringTag = __webpack_require__(19)\n  , IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\n__webpack_require__(8)(IteratorPrototype, __webpack_require__(1)('iterator'), function(){ return this; });\n\nmodule.exports = function(Constructor, NAME, next){\n  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});\n  setToStringTag(Constructor, NAME + ' Iterator');\n};\n\n/***/ }),\n/* 95 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar ITERATOR     = __webpack_require__(1)('iterator')\n  , SAFE_CLOSING = false;\n\ntry {\n  var riter = [7][ITERATOR]();\n  riter['return'] = function(){ SAFE_CLOSING = true; };\n  Array.from(riter, function(){ throw 2; });\n} catch(e){ /* empty */ }\n\nmodule.exports = function(exec, skipClosing){\n  if(!skipClosing && !SAFE_CLOSING)return false;\n  var safe = false;\n  try {\n    var arr  = [7]\n      , iter = arr[ITERATOR]();\n    iter.next = function(){ return {done: safe = true}; };\n    arr[ITERATOR] = function(){ return iter; };\n    exec(arr);\n  } catch(e){ /* empty */ }\n  return safe;\n};\n\n/***/ }),\n/* 96 */\n/***/ (function(module, exports) {\n\nmodule.exports = function(done, value){\n  return {value: value, done: !!done};\n};\n\n/***/ }),\n/* 97 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar getKeys   = __webpack_require__(12)\n  , toIObject = __webpack_require__(9);\nmodule.exports = function(object, el){\n  var O      = toIObject(object)\n    , keys   = getKeys(O)\n    , length = keys.length\n    , index  = 0\n    , key;\n  while(length > index)if(O[key = keys[index++]] === el)return key;\n};\n\n/***/ }),\n/* 98 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar META     = __webpack_require__(21)('meta')\n  , isObject = __webpack_require__(11)\n  , has      = __webpack_require__(7)\n  , setDesc  = __webpack_require__(6).f\n  , id       = 0;\nvar isExtensible = Object.isExtensible || function(){\n  return true;\n};\nvar FREEZE = !__webpack_require__(10)(function(){\n  return isExtensible(Object.preventExtensions({}));\n});\nvar setMeta = function(it){\n  setDesc(it, META, {value: {\n    i: 'O' + ++id, // object ID\n    w: {}          // weak collections IDs\n  }});\n};\nvar fastKey = function(it, create){\n  // return primitive with prefix\n  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if(!has(it, META)){\n    // can't set metadata to uncaught frozen object\n    if(!isExtensible(it))return 'F';\n    // not necessary to add metadata\n    if(!create)return 'E';\n    // add missing metadata\n    setMeta(it);\n  // return object ID\n  } return it[META].i;\n};\nvar getWeak = function(it, create){\n  if(!has(it, META)){\n    // can't set metadata to uncaught frozen object\n    if(!isExtensible(it))return true;\n    // not necessary to add metadata\n    if(!create)return false;\n    // add missing metadata\n    setMeta(it);\n  // return hash weak collections IDs\n  } return it[META].w;\n};\n// add metadata on freeze-family methods calling\nvar onFreeze = function(it){\n  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);\n  return it;\n};\nvar meta = module.exports = {\n  KEY:      META,\n  NEED:     false,\n  fastKey:  fastKey,\n  getWeak:  getWeak,\n  onFreeze: onFreeze\n};\n\n/***/ }),\n/* 99 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global    = __webpack_require__(2)\n  , macrotask = __webpack_require__(50).set\n  , Observer  = global.MutationObserver || global.WebKitMutationObserver\n  , process   = global.process\n  , Promise   = global.Promise\n  , isNode    = __webpack_require__(13)(process) == 'process';\n\nmodule.exports = function(){\n  var head, last, notify;\n\n  var flush = function(){\n    var parent, fn;\n    if(isNode && (parent = process.domain))parent.exit();\n    while(head){\n      fn   = head.fn;\n      head = head.next;\n      try {\n        fn();\n      } catch(e){\n        if(head)notify();\n        else last = undefined;\n        throw e;\n      }\n    } last = undefined;\n    if(parent)parent.enter();\n  };\n\n  // Node.js\n  if(isNode){\n    notify = function(){\n      process.nextTick(flush);\n    };\n  // browsers with MutationObserver\n  } else if(Observer){\n    var toggle = true\n      , node   = document.createTextNode('');\n    new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new\n    notify = function(){\n      node.data = toggle = !toggle;\n    };\n  // environments with maybe non-completely correct, but existent Promise\n  } else if(Promise && Promise.resolve){\n    var promise = Promise.resolve();\n    notify = function(){\n      promise.then(flush);\n    };\n  // for other environments - macrotask based on:\n  // - setImmediate\n  // - MessageChannel\n  // - window.postMessag\n  // - onreadystatechange\n  // - setTimeout\n  } else {\n    notify = function(){\n      // strange IE + webpack dev server bug - use .call(global)\n      macrotask.call(global, flush);\n    };\n  }\n\n  return function(fn){\n    var task = {fn: fn, next: undefined};\n    if(last)last.next = task;\n    if(!head){\n      head = task;\n      notify();\n    } last = task;\n  };\n};\n\n/***/ }),\n/* 100 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n// 19.1.2.1 Object.assign(target, source, ...)\nvar getKeys  = __webpack_require__(12)\n  , gOPS     = __webpack_require__(29)\n  , pIE      = __webpack_require__(17)\n  , toObject = __webpack_require__(20)\n  , IObject  = __webpack_require__(42)\n  , $assign  = Object.assign;\n\n// should work with symbols and should have deterministic property order (V8 bug)\nmodule.exports = !$assign || __webpack_require__(10)(function(){\n  var A = {}\n    , B = {}\n    , S = Symbol()\n    , K = 'abcdefghijklmnopqrst';\n  A[S] = 7;\n  K.split('').forEach(function(k){ B[k] = k; });\n  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n}) ? function assign(target, source){ // eslint-disable-line no-unused-vars\n  var T     = toObject(target)\n    , aLen  = arguments.length\n    , index = 1\n    , getSymbols = gOPS.f\n    , isEnum     = pIE.f;\n  while(aLen > index){\n    var S      = IObject(arguments[index++])\n      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)\n      , length = keys.length\n      , j      = 0\n      , key;\n    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];\n  } return T;\n} : $assign;\n\n/***/ }),\n/* 101 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar dP       = __webpack_require__(6)\n  , anObject = __webpack_require__(3)\n  , getKeys  = __webpack_require__(12);\n\nmodule.exports = __webpack_require__(4) ? Object.defineProperties : function defineProperties(O, Properties){\n  anObject(O);\n  var keys   = getKeys(Properties)\n    , length = keys.length\n    , i = 0\n    , P;\n  while(length > i)dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n\n/***/ }),\n/* 102 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\nvar toIObject = __webpack_require__(9)\n  , gOPN      = __webpack_require__(45).f\n  , toString  = {}.toString;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function(it){\n  try {\n    return gOPN(it);\n  } catch(e){\n    return windowNames.slice();\n  }\n};\n\nmodule.exports.f = function getOwnPropertyNames(it){\n  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));\n};\n\n\n/***/ }),\n/* 103 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar hide = __webpack_require__(8);\nmodule.exports = function(target, src, safe){\n  for(var key in src){\n    if(safe && target[key])target[key] = src[key];\n    else hide(target, key, src[key]);\n  } return target;\n};\n\n/***/ }),\n/* 104 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nvar isObject = __webpack_require__(11)\n  , anObject = __webpack_require__(3);\nvar check = function(O, proto){\n  anObject(O);\n  if(!isObject(proto) && proto !== null)throw TypeError(proto + \": can't set as prototype!\");\n};\nmodule.exports = {\n  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line\n    function(test, buggy, set){\n      try {\n        set = __webpack_require__(14)(Function.call, __webpack_require__(44).f(Object.prototype, '__proto__').set, 2);\n        set(test, []);\n        buggy = !(test instanceof Array);\n      } catch(e){ buggy = true; }\n      return function setPrototypeOf(O, proto){\n        check(O, proto);\n        if(buggy)O.__proto__ = proto;\n        else set(O, proto);\n        return O;\n      };\n    }({}, false) : undefined),\n  check: check\n};\n\n/***/ }),\n/* 105 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar global      = __webpack_require__(2)\n  , core        = __webpack_require__(0)\n  , dP          = __webpack_require__(6)\n  , DESCRIPTORS = __webpack_require__(4)\n  , SPECIES     = __webpack_require__(1)('species');\n\nmodule.exports = function(KEY){\n  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];\n  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {\n    configurable: true,\n    get: function(){ return this; }\n  });\n};\n\n/***/ }),\n/* 106 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// 7.3.20 SpeciesConstructor(O, defaultConstructor)\nvar anObject  = __webpack_require__(3)\n  , aFunction = __webpack_require__(24)\n  , SPECIES   = __webpack_require__(1)('species');\nmodule.exports = function(O, D){\n  var C = anObject(O).constructor, S;\n  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);\n};\n\n/***/ }),\n/* 107 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar toInteger = __webpack_require__(32)\n  , defined   = __webpack_require__(25);\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function(TO_STRING){\n  return function(that, pos){\n    var s = String(defined(that))\n      , i = toInteger(pos)\n      , l = s.length\n      , a, b;\n    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n\n/***/ }),\n/* 108 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar toInteger = __webpack_require__(32)\n  , max       = Math.max\n  , min       = Math.min;\nmodule.exports = function(index, length){\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n\n/***/ }),\n/* 109 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar classof   = __webpack_require__(39)\n  , ITERATOR  = __webpack_require__(1)('iterator')\n  , Iterators = __webpack_require__(15);\nmodule.exports = __webpack_require__(0).getIteratorMethod = function(it){\n  if(it != undefined)return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};\n\n/***/ }),\n/* 110 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar addToUnscopables = __webpack_require__(85)\n  , step             = __webpack_require__(96)\n  , Iterators        = __webpack_require__(15)\n  , toIObject        = __webpack_require__(9);\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = __webpack_require__(43)(Array, 'Array', function(iterated, kind){\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function(){\n  var O     = this._t\n    , kind  = this._k\n    , index = this._i++;\n  if(!O || index >= O.length){\n    this._t = undefined;\n    return step(1);\n  }\n  if(kind == 'keys'  )return step(0, index);\n  if(kind == 'values')return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n\n/***/ }),\n/* 111 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// 19.1.3.1 Object.assign(target, source)\nvar $export = __webpack_require__(5);\n\n$export($export.S + $export.F, 'Object', {assign: __webpack_require__(100)});\n\n/***/ }),\n/* 112 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar $export = __webpack_require__(5)\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\n$export($export.S, 'Object', {create: __webpack_require__(28)});\n\n/***/ }),\n/* 113 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar $export = __webpack_require__(5);\n// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)\n$export($export.S + $export.F * !__webpack_require__(4), 'Object', {defineProperty: __webpack_require__(6).f});\n\n/***/ }),\n/* 114 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// 19.1.2.9 Object.getPrototypeOf(O)\nvar toObject        = __webpack_require__(20)\n  , $getPrototypeOf = __webpack_require__(46);\n\n__webpack_require__(48)('getPrototypeOf', function(){\n  return function getPrototypeOf(it){\n    return $getPrototypeOf(toObject(it));\n  };\n});\n\n/***/ }),\n/* 115 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// 19.1.2.14 Object.keys(O)\nvar toObject = __webpack_require__(20)\n  , $keys    = __webpack_require__(12);\n\n__webpack_require__(48)('keys', function(){\n  return function keys(it){\n    return $keys(toObject(it));\n  };\n});\n\n/***/ }),\n/* 116 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// 19.1.3.19 Object.setPrototypeOf(O, proto)\nvar $export = __webpack_require__(5);\n$export($export.S, 'Object', {setPrototypeOf: __webpack_require__(104).set});\n\n/***/ }),\n/* 117 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar LIBRARY            = __webpack_require__(16)\n  , global             = __webpack_require__(2)\n  , ctx                = __webpack_require__(14)\n  , classof            = __webpack_require__(39)\n  , $export            = __webpack_require__(5)\n  , isObject           = __webpack_require__(11)\n  , aFunction          = __webpack_require__(24)\n  , anInstance         = __webpack_require__(86)\n  , forOf              = __webpack_require__(89)\n  , speciesConstructor = __webpack_require__(106)\n  , task               = __webpack_require__(50).set\n  , microtask          = __webpack_require__(99)()\n  , PROMISE            = 'Promise'\n  , TypeError          = global.TypeError\n  , process            = global.process\n  , $Promise           = global[PROMISE]\n  , process            = global.process\n  , isNode             = classof(process) == 'process'\n  , empty              = function(){ /* empty */ }\n  , Internal, GenericPromiseCapability, Wrapper;\n\nvar USE_NATIVE = !!function(){\n  try {\n    // correct subclassing with @@species support\n    var promise     = $Promise.resolve(1)\n      , FakePromise = (promise.constructor = {})[__webpack_require__(1)('species')] = function(exec){ exec(empty, empty); };\n    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test\n    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;\n  } catch(e){ /* empty */ }\n}();\n\n// helpers\nvar sameConstructor = function(a, b){\n  // with library wrapper special case\n  return a === b || a === $Promise && b === Wrapper;\n};\nvar isThenable = function(it){\n  var then;\n  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;\n};\nvar newPromiseCapability = function(C){\n  return sameConstructor($Promise, C)\n    ? new PromiseCapability(C)\n    : new GenericPromiseCapability(C);\n};\nvar PromiseCapability = GenericPromiseCapability = function(C){\n  var resolve, reject;\n  this.promise = new C(function($$resolve, $$reject){\n    if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');\n    resolve = $$resolve;\n    reject  = $$reject;\n  });\n  this.resolve = aFunction(resolve);\n  this.reject  = aFunction(reject);\n};\nvar perform = function(exec){\n  try {\n    exec();\n  } catch(e){\n    return {error: e};\n  }\n};\nvar notify = function(promise, isReject){\n  if(promise._n)return;\n  promise._n = true;\n  var chain = promise._c;\n  microtask(function(){\n    var value = promise._v\n      , ok    = promise._s == 1\n      , i     = 0;\n    var run = function(reaction){\n      var handler = ok ? reaction.ok : reaction.fail\n        , resolve = reaction.resolve\n        , reject  = reaction.reject\n        , domain  = reaction.domain\n        , result, then;\n      try {\n        if(handler){\n          if(!ok){\n            if(promise._h == 2)onHandleUnhandled(promise);\n            promise._h = 1;\n          }\n          if(handler === true)result = value;\n          else {\n            if(domain)domain.enter();\n            result = handler(value);\n            if(domain)domain.exit();\n          }\n          if(result === reaction.promise){\n            reject(TypeError('Promise-chain cycle'));\n          } else if(then = isThenable(result)){\n            then.call(result, resolve, reject);\n          } else resolve(result);\n        } else reject(value);\n      } catch(e){\n        reject(e);\n      }\n    };\n    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach\n    promise._c = [];\n    promise._n = false;\n    if(isReject && !promise._h)onUnhandled(promise);\n  });\n};\nvar onUnhandled = function(promise){\n  task.call(global, function(){\n    var value = promise._v\n      , abrupt, handler, console;\n    if(isUnhandled(promise)){\n      abrupt = perform(function(){\n        if(isNode){\n          process.emit('unhandledRejection', value, promise);\n        } else if(handler = global.onunhandledrejection){\n          handler({promise: promise, reason: value});\n        } else if((console = global.console) && console.error){\n          console.error('Unhandled promise rejection', value);\n        }\n      });\n      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\n      promise._h = isNode || isUnhandled(promise) ? 2 : 1;\n    } promise._a = undefined;\n    if(abrupt)throw abrupt.error;\n  });\n};\nvar isUnhandled = function(promise){\n  if(promise._h == 1)return false;\n  var chain = promise._a || promise._c\n    , i     = 0\n    , reaction;\n  while(chain.length > i){\n    reaction = chain[i++];\n    if(reaction.fail || !isUnhandled(reaction.promise))return false;\n  } return true;\n};\nvar onHandleUnhandled = function(promise){\n  task.call(global, function(){\n    var handler;\n    if(isNode){\n      process.emit('rejectionHandled', promise);\n    } else if(handler = global.onrejectionhandled){\n      handler({promise: promise, reason: promise._v});\n    }\n  });\n};\nvar $reject = function(value){\n  var promise = this;\n  if(promise._d)return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  promise._v = value;\n  promise._s = 2;\n  if(!promise._a)promise._a = promise._c.slice();\n  notify(promise, true);\n};\nvar $resolve = function(value){\n  var promise = this\n    , then;\n  if(promise._d)return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  try {\n    if(promise === value)throw TypeError(\"Promise can't be resolved itself\");\n    if(then = isThenable(value)){\n      microtask(function(){\n        var wrapper = {_w: promise, _d: false}; // wrap\n        try {\n          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));\n        } catch(e){\n          $reject.call(wrapper, e);\n        }\n      });\n    } else {\n      promise._v = value;\n      promise._s = 1;\n      notify(promise, false);\n    }\n  } catch(e){\n    $reject.call({_w: promise, _d: false}, e); // wrap\n  }\n};\n\n// constructor polyfill\nif(!USE_NATIVE){\n  // 25.4.3.1 Promise(executor)\n  $Promise = function Promise(executor){\n    anInstance(this, $Promise, PROMISE, '_h');\n    aFunction(executor);\n    Internal.call(this);\n    try {\n      executor(ctx($resolve, this, 1), ctx($reject, this, 1));\n    } catch(err){\n      $reject.call(this, err);\n    }\n  };\n  Internal = function Promise(executor){\n    this._c = [];             // <- awaiting reactions\n    this._a = undefined;      // <- checked in isUnhandled reactions\n    this._s = 0;              // <- state\n    this._d = false;          // <- done\n    this._v = undefined;      // <- value\n    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled\n    this._n = false;          // <- notify\n  };\n  Internal.prototype = __webpack_require__(103)($Promise.prototype, {\n    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)\n    then: function then(onFulfilled, onRejected){\n      var reaction    = newPromiseCapability(speciesConstructor(this, $Promise));\n      reaction.ok     = typeof onFulfilled == 'function' ? onFulfilled : true;\n      reaction.fail   = typeof onRejected == 'function' && onRejected;\n      reaction.domain = isNode ? process.domain : undefined;\n      this._c.push(reaction);\n      if(this._a)this._a.push(reaction);\n      if(this._s)notify(this, false);\n      return reaction.promise;\n    },\n    // 25.4.5.1 Promise.prototype.catch(onRejected)\n    'catch': function(onRejected){\n      return this.then(undefined, onRejected);\n    }\n  });\n  PromiseCapability = function(){\n    var promise  = new Internal;\n    this.promise = promise;\n    this.resolve = ctx($resolve, promise, 1);\n    this.reject  = ctx($reject, promise, 1);\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: $Promise});\n__webpack_require__(19)($Promise, PROMISE);\n__webpack_require__(105)(PROMISE);\nWrapper = __webpack_require__(0)[PROMISE];\n\n// statics\n$export($export.S + $export.F * !USE_NATIVE, PROMISE, {\n  // 25.4.4.5 Promise.reject(r)\n  reject: function reject(r){\n    var capability = newPromiseCapability(this)\n      , $$reject   = capability.reject;\n    $$reject(r);\n    return capability.promise;\n  }\n});\n$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {\n  // 25.4.4.6 Promise.resolve(x)\n  resolve: function resolve(x){\n    // instanceof instead of internal slot check because we should fix it without replacement native Promise core\n    if(x instanceof $Promise && sameConstructor(x.constructor, this))return x;\n    var capability = newPromiseCapability(this)\n      , $$resolve  = capability.resolve;\n    $$resolve(x);\n    return capability.promise;\n  }\n});\n$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(95)(function(iter){\n  $Promise.all(iter)['catch'](empty);\n})), PROMISE, {\n  // 25.4.4.1 Promise.all(iterable)\n  all: function all(iterable){\n    var C          = this\n      , capability = newPromiseCapability(C)\n      , resolve    = capability.resolve\n      , reject     = capability.reject;\n    var abrupt = perform(function(){\n      var values    = []\n        , index     = 0\n        , remaining = 1;\n      forOf(iterable, false, function(promise){\n        var $index        = index++\n          , alreadyCalled = false;\n        values.push(undefined);\n        remaining++;\n        C.resolve(promise).then(function(value){\n          if(alreadyCalled)return;\n          alreadyCalled  = true;\n          values[$index] = value;\n          --remaining || resolve(values);\n        }, reject);\n      });\n      --remaining || resolve(values);\n    });\n    if(abrupt)reject(abrupt.error);\n    return capability.promise;\n  },\n  // 25.4.4.4 Promise.race(iterable)\n  race: function race(iterable){\n    var C          = this\n      , capability = newPromiseCapability(C)\n      , reject     = capability.reject;\n    var abrupt = perform(function(){\n      forOf(iterable, false, function(promise){\n        C.resolve(promise).then(capability.resolve, reject);\n      });\n    });\n    if(abrupt)reject(abrupt.error);\n    return capability.promise;\n  }\n});\n\n/***/ }),\n/* 118 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n// ECMAScript 6 symbols shim\nvar global         = __webpack_require__(2)\n  , has            = __webpack_require__(7)\n  , DESCRIPTORS    = __webpack_require__(4)\n  , $export        = __webpack_require__(5)\n  , redefine       = __webpack_require__(49)\n  , META           = __webpack_require__(98).KEY\n  , $fails         = __webpack_require__(10)\n  , shared         = __webpack_require__(31)\n  , setToStringTag = __webpack_require__(19)\n  , uid            = __webpack_require__(21)\n  , wks            = __webpack_require__(1)\n  , wksExt         = __webpack_require__(35)\n  , wksDefine      = __webpack_require__(34)\n  , keyOf          = __webpack_require__(97)\n  , enumKeys       = __webpack_require__(88)\n  , isArray        = __webpack_require__(92)\n  , anObject       = __webpack_require__(3)\n  , toIObject      = __webpack_require__(9)\n  , toPrimitive    = __webpack_require__(33)\n  , createDesc     = __webpack_require__(18)\n  , _create        = __webpack_require__(28)\n  , gOPNExt        = __webpack_require__(102)\n  , $GOPD          = __webpack_require__(44)\n  , $DP            = __webpack_require__(6)\n  , $keys          = __webpack_require__(12)\n  , gOPD           = $GOPD.f\n  , dP             = $DP.f\n  , gOPN           = gOPNExt.f\n  , $Symbol        = global.Symbol\n  , $JSON          = global.JSON\n  , _stringify     = $JSON && $JSON.stringify\n  , PROTOTYPE      = 'prototype'\n  , HIDDEN         = wks('_hidden')\n  , TO_PRIMITIVE   = wks('toPrimitive')\n  , isEnum         = {}.propertyIsEnumerable\n  , SymbolRegistry = shared('symbol-registry')\n  , AllSymbols     = shared('symbols')\n  , OPSymbols      = shared('op-symbols')\n  , ObjectProto    = Object[PROTOTYPE]\n  , USE_NATIVE     = typeof $Symbol == 'function'\n  , QObject        = global.QObject;\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDesc = DESCRIPTORS && $fails(function(){\n  return _create(dP({}, 'a', {\n    get: function(){ return dP(this, 'a', {value: 7}).a; }\n  })).a != 7;\n}) ? function(it, key, D){\n  var protoDesc = gOPD(ObjectProto, key);\n  if(protoDesc)delete ObjectProto[key];\n  dP(it, key, D);\n  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);\n} : dP;\n\nvar wrap = function(tag){\n  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);\n  sym._k = tag;\n  return sym;\n};\n\nvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){\n  return typeof it == 'symbol';\n} : function(it){\n  return it instanceof $Symbol;\n};\n\nvar $defineProperty = function defineProperty(it, key, D){\n  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);\n  anObject(it);\n  key = toPrimitive(key, true);\n  anObject(D);\n  if(has(AllSymbols, key)){\n    if(!D.enumerable){\n      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));\n      it[HIDDEN][key] = true;\n    } else {\n      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;\n      D = _create(D, {enumerable: createDesc(0, false)});\n    } return setSymbolDesc(it, key, D);\n  } return dP(it, key, D);\n};\nvar $defineProperties = function defineProperties(it, P){\n  anObject(it);\n  var keys = enumKeys(P = toIObject(P))\n    , i    = 0\n    , l = keys.length\n    , key;\n  while(l > i)$defineProperty(it, key = keys[i++], P[key]);\n  return it;\n};\nvar $create = function create(it, P){\n  return P === undefined ? _create(it) : $defineProperties(_create(it), P);\n};\nvar $propertyIsEnumerable = function propertyIsEnumerable(key){\n  var E = isEnum.call(this, key = toPrimitive(key, true));\n  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;\n  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n};\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){\n  it  = toIObject(it);\n  key = toPrimitive(key, true);\n  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;\n  var D = gOPD(it, key);\n  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;\n  return D;\n};\nvar $getOwnPropertyNames = function getOwnPropertyNames(it){\n  var names  = gOPN(toIObject(it))\n    , result = []\n    , i      = 0\n    , key;\n  while(names.length > i){\n    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);\n  } return result;\n};\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it){\n  var IS_OP  = it === ObjectProto\n    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))\n    , result = []\n    , i      = 0\n    , key;\n  while(names.length > i){\n    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);\n  } return result;\n};\n\n// 19.4.1.1 Symbol([description])\nif(!USE_NATIVE){\n  $Symbol = function Symbol(){\n    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');\n    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);\n    var $set = function(value){\n      if(this === ObjectProto)$set.call(OPSymbols, value);\n      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;\n      setSymbolDesc(this, tag, createDesc(1, value));\n    };\n    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});\n    return wrap(tag);\n  };\n  redefine($Symbol[PROTOTYPE], 'toString', function toString(){\n    return this._k;\n  });\n\n  $GOPD.f = $getOwnPropertyDescriptor;\n  $DP.f   = $defineProperty;\n  __webpack_require__(45).f = gOPNExt.f = $getOwnPropertyNames;\n  __webpack_require__(17).f  = $propertyIsEnumerable;\n  __webpack_require__(29).f = $getOwnPropertySymbols;\n\n  if(DESCRIPTORS && !__webpack_require__(16)){\n    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n  }\n\n  wksExt.f = function(name){\n    return wrap(wks(name));\n  }\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});\n\nfor(var symbols = (\n  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'\n).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);\n\nfor(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);\n\n$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {\n  // 19.4.2.1 Symbol.for(key)\n  'for': function(key){\n    return has(SymbolRegistry, key += '')\n      ? SymbolRegistry[key]\n      : SymbolRegistry[key] = $Symbol(key);\n  },\n  // 19.4.2.5 Symbol.keyFor(sym)\n  keyFor: function keyFor(key){\n    if(isSymbol(key))return keyOf(SymbolRegistry, key);\n    throw TypeError(key + ' is not a symbol!');\n  },\n  useSetter: function(){ setter = true; },\n  useSimple: function(){ setter = false; }\n});\n\n$export($export.S + $export.F * !USE_NATIVE, 'Object', {\n  // 19.1.2.2 Object.create(O [, Properties])\n  create: $create,\n  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n  defineProperty: $defineProperty,\n  // 19.1.2.3 Object.defineProperties(O, Properties)\n  defineProperties: $defineProperties,\n  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n  // 19.1.2.7 Object.getOwnPropertyNames(O)\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// 24.3.2 JSON.stringify(value [, replacer [, space]])\n$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){\n  var S = $Symbol();\n  // MS Edge converts symbol values to JSON as {}\n  // WebKit converts symbol values to JSON as null\n  // V8 throws on boxed symbols\n  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';\n})), 'JSON', {\n  stringify: function stringify(it){\n    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined\n    var args = [it]\n      , i    = 1\n      , replacer, $replacer;\n    while(arguments.length > i)args.push(arguments[i++]);\n    replacer = args[1];\n    if(typeof replacer == 'function')$replacer = replacer;\n    if($replacer || !isArray(replacer))replacer = function(key, value){\n      if($replacer)value = $replacer.call(this, key, value);\n      if(!isSymbol(value))return value;\n    };\n    args[1] = replacer;\n    return _stringify.apply($JSON, args);\n  }\n});\n\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\n$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(8)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);\n// 19.4.3.5 Symbol.prototype[@@toStringTag]\nsetToStringTag($Symbol, 'Symbol');\n// 20.2.1.9 Math[@@toStringTag]\nsetToStringTag(Math, 'Math', true);\n// 24.3.3 JSON[@@toStringTag]\nsetToStringTag(global.JSON, 'JSON', true);\n\n/***/ }),\n/* 119 */\n/***/ (function(module, exports, __webpack_require__) {\n\n__webpack_require__(34)('asyncIterator');\n\n/***/ }),\n/* 120 */\n/***/ (function(module, exports, __webpack_require__) {\n\n__webpack_require__(34)('observable');\n\n/***/ }),\n/* 121 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// the whatwg-fetch polyfill installs the fetch() function\n// on the global object (window or self)\n//\n// Return that as the export for use in Webpack, Browserify etc.\n__webpack_require__(125);\nmodule.exports = self.fetch.bind(self);\n\n\n/***/ }),\n/* 122 */\n/***/ (function(module, exports) {\n\n// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n/***/ }),\n/* 123 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(55), __webpack_require__(122)))\n\n/***/ }),\n/* 124 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\n__webpack_require__(123);\nexports.setImmediate = setImmediate;\nexports.clearImmediate = clearImmediate;\n\n\n/***/ }),\n/* 125 */\n/***/ (function(module, exports) {\n\n(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ]\n\n    var isDataView = function(obj) {\n      return obj && DataView.prototype.isPrototypeOf(obj)\n    }\n\n    var isArrayBufferView = ArrayBuffer.isView || function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift()\n        return {done: value === undefined, value: value}\n      }\n    }\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      }\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var oldValue = this.map[name]\n    this.map[name] = oldValue ? oldValue+','+value : value\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name)\n    return this.has(name) ? this.map[name] : null\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value)\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this)\n      }\n    }\n  }\n\n  Headers.prototype.keys = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push(name) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.values = function() {\n    var items = []\n    this.forEach(function(value) { items.push(value) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.entries = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push([name, value]) })\n    return iteratorFor(items)\n  }\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsArrayBuffer(blob)\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsText(blob)\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf)\n    var chars = new Array(view.length)\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i])\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength)\n      view.set(new Uint8Array(buf))\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (!body) {\n        this._bodyText = ''\n      } else if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString()\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer)\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer])\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body)\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      }\n    }\n\n    this.text = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n\n    if (typeof input === 'string') {\n      this.url = input\n    } else {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, { body: this._bodyInit })\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers()\n    rawHeaders.split('\\r\\n').forEach(function(line) {\n      var parts = line.split(':')\n      var key = parts.shift().trim()\n      if (key) {\n        var value = parts.join(':').trim()\n        headers.append(key, value)\n      }\n    })\n    return headers\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = 'status' in options ? options.status : 200\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = 'statusText' in options ? options.statusText : 'OK'\n    this.headers = new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init)\n      var xhr = new XMLHttpRequest()\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        }\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n\n\n/***/ }),\n/* 126 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_dexie__ = __webpack_require__(22);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_dexie_observable__ = __webpack_require__(36);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_dexie_syncable__ = __webpack_require__(61);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__cuid_js__ = __webpack_require__(57);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__poll_sync_protocol__ = __webpack_require__(58);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__connection_status__ = __webpack_require__(56);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__server_comm__ = __webpack_require__(59);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__sync_client__ = __webpack_require__(60);\n\n\n\n\n\n\n\n\n\nvar _initConnectionStatus = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__connection_status__[\"a\" /* default */])(window),\n    isOnline = _initConnectionStatus.isOnline,\n    onlineStatusChanged = _initConnectionStatus.onlineStatusChanged;\n\nvar sync = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__poll_sync_protocol__[\"a\" /* default */])(__WEBPACK_IMPORTED_MODULE_6__server_comm__[\"a\" /* default */], isOnline);\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__sync_client__[\"a\" /* default */])({\n  Dexie: __WEBPACK_IMPORTED_MODULE_0_dexie__[\"a\" /* default */],\n  syncable: __WEBPACK_IMPORTED_MODULE_2_dexie_syncable__[\"a\" /* default */],\n  observable: __WEBPACK_IMPORTED_MODULE_1_dexie_observable__[\"a\" /* default */],\n  sync: sync,\n  onlineStatusChanged: onlineStatusChanged,\n  isOnline: isOnline,\n  cuid: __WEBPACK_IMPORTED_MODULE_3__cuid_js__[\"a\" /* default */]\n});\n\n/***/ })\n/******/ ]);\n//# sourceMappingURL=sync-client.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/sync-client/dist/sync-client.js\n// module id = 2\n// module chunks = 0","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Daniel/AppData/Local/Yarn/config/global/node_modules/setimmediate/setImmediate.js\n// module id = 3\n// module chunks = 0","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 4\n// module chunks = 0","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Daniel/AppData/Local/Yarn/config/global/node_modules/process/browser.js\n// module id = 5\n// module chunks = 0"],"sourceRoot":""}